window.COURSE_DATA = {"language":"en-GB","lastDownload":"2018-02-05T12:17:46+03:00","title":"Prep Full-Time","modules":[{"id":23,"name":"Week 1","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":true,"exportId":"i60852a055fd3facd93b7379ecc4aa1b4","items":[{"id":35,"title":"Monday: Git, HTML, and CSS","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003ch1\u003eGit, HTML, and CSS\u003c/h1\u003e\r\n\u003cp\u003eThis week we will be learning the building blocks of making basic web pages: HTML and CSS. We will also focus on using the command line and Git to create a daily workflow for our coding projects.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003eDaily Goals\u003c/h2\u003e\r\n\u003cp\u003eEveryone learns at a different pace. Understanding is the most important goal every day. If you feel like you will not be able to complete all of the lessons on a given day, talk to a teacher about ways to ensure that you are covering the day's objectives. Always focus on understanding the concepts at hand, not finishing the work as quickly as possible. Lessons that have \"Homework\" in the title indicate that the work is expected to be read outside of class hours, and not during class.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePlan\u003c/h2\u003e\r\n\u003cp\u003eWe will begin this week by practicing the command line, Git, Github, and exploring basic HTML. We'll create READMEs to include extra information with our projects on Github. We'll also learn a formatting language called Markdown to format READMEs. Then, we'll explore basic CSS to add styling to our web pages, and actually publish our sites online! Later in the week we will dive deeper into CSS by using divs and spans, floats, cascading, classes, ids, and the box model. Finally, we'll explore a tool called Bootstrap that offers even more powerful styling capability. You're in for a great time!\u003c/p\u003e\r\n\u003cp\u003eAt the end of this section, you will be able to:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eNavigate the command line to access and create directories and files\u003c/li\u003e\r\n\u003cli\u003eUse Git and GitHub to track the creation of static web pages\u003c/li\u003e\r\n\u003cli\u003eCreate a static webpage using HTML\u003c/li\u003e\r\n\u003cli\u003eStyle a static webpage using custom CSS rules in a linked stylesheet\u003c/li\u003e\r\n\u003cli\u003eCreate a project README.md in Markdown\u003c/li\u003e\r\n\u003cli\u003eApply Bootstrap rules and classes\u003c/li\u003e\r\n\u003cli\u003eAdapt a webpage for responsive design\u003c/li\u003e\r\n\u003c/ol\u003e\r\n \r\n \r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003eAt the end of this section, you will complete an independent project. Your instructor will review this project for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse the most common HTML tags:\r\n\u003cul\u003e\r\n\u003cli\u003ep, h, ul, ol, li, em, strong, a, img, div, span\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eUse Bootstrap classes to style your page\u003c/li\u003e\r\n\u003cli\u003eCreate a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eImplement standard indentation and spacing conventions of HTML and CSS\u003c/li\u003e\r\n\u003cli\u003eMake Git commits regularly with clear messages that finish the phrase \"It will…\"\u003c/li\u003e\r\n\u003cli\u003eAdd a README to the GitHub repository that includes:\r\n\u003cul\u003e\r\n\u003cli\u003eAuthor name\u003c/li\u003e\r\n\u003cli\u003eProject or program name\u003c/li\u003e\r\n\u003cli\u003eDescription of program\u003c/li\u003e\r\n\u003cli\u003eProgram setup instructions\u003c/li\u003e\r\n\u003cli\u003eLink to live version of site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eCopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-git-html-and-css"},{"id":36,"title":"Monday: Introduction and interaction with the command line","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eIntroduction to the Command Line\u003c/h1\u003e\r\n\u003cp\u003eOne of the first tools every developer needs to get familiar with is the terminal. No matter which language you use, you will be using the terminal a lot. As a person new to programming, using the terminal interface of a computer may be something you'll do for the first time in this lesson.\u003c/p\u003e\r\n\u003cp\u003eWhen you open up your computer and want to access a file or program, it's likely that you do this using a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003egraphical user interface\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGUI\u003c/strong\u003e. This is simply the graphical, or visual, part of a computer program that the user can interact with.\u003c/p\u003e\r\n\u003cp\u003eFor example, when you want to open up your internet browser and you click on the icon in your computer's menu bar, you are using the GUI of your computer's operating system to access the program. The cursor to indicate where on the screen you are clicking and the icons that represent programs are both part of the graphical user interface.\u003c/p\u003e\r\n\u003cp\u003eAnother example of a program with a GUI is a word processor. The GUI gives us a document to type in, a cursor to see where we're typing, letters on the screen to represent the text we've typed, menu options to format our text and save or documents, and more.\u003c/p\u003e\r\n\u003cp\u003eThe GUI gives us a visual representation of what the computer program is doing underneath the hood. However, it's not the only way to interact with a computer. We can also use our computer's terminal interface, and you often will when developing. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eterminal\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a text-based interface that allows users to interact with the computer by typing commands into the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecommand prompt\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou have probably navigated the folders and files on your computer using a GUI such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFinder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon Mac or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDolphin\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon Linux. In the next lesson, we'll see how we can create, update, delete, and navigate folders and files using the terminal. We'll also learn some additional functionality not available by using a GUI.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eAccessing the Terminal\u003c/h2\u003e\r\n\u003ch3\u003eUbuntu Setup\u003c/h3\u003e\r\n\u003cp\u003eThe Terminal application on a PC with Ubuntu installed can be accessed by pressing\u003cspan\u003e \u003c/span\u003e\u003cem\u003ectrl + Alt + T\u003c/em\u003e. Alternatively, you can locate the Terminal application by searching\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTerminal\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eonce you click on the ubuntu icon on the upper left side of your screen.\u003c/p\u003e\r\n\u003ch3\u003eMac Setup\u003c/h3\u003e\r\n\u003cp\u003eThe Terminal application on a Mac is located in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUtilities\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, which is located inside the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eApplications\u003c/em\u003efolder. Alternatively, you can locate the Terminal application by clicking on the magnifying glass icon at the upper right corner of the screen and typing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTerminal\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3\u003eWindows Setup\u003c/h3\u003e\r\n\u003cp\u003eOn Windows we need to use a terminal program as well. There are a lot of good options out there, but we recommend using a program called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGit Bash\u003c/strong\u003e. You can download it\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://git-for-windows.github.io/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCommand Prompt\u003c/h2\u003e\r\n\u003cp\u003eWhen you open up your computer's terminal, you should see a blank screen with a few lines of text in the corner, followed by a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$\u003c/code\u003e. This is called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eprompt\u003c/strong\u003e. It usually provides some contextual information such as who you are, your location on the computer, and other useful info. For example, the prompt on your computer might look something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~\u003c/span\u003e$\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this example,\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eguest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name of the user currently logged in\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003emoringa-Lenovo-B50-80\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the nickname of the computer we're using\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e~\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eindicates that we are located in the Home directory (we'll learn more about what this means later)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the end of the prompt\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTake note here that not all command prompts look the same. Your computer will likely have a different nickname or username, and you may be located somewhere else in the filesystem. There's no need to worry if the prompt on your computer looks different from the example above - this is totally normal.\u003c/p\u003e\r\n\u003cp\u003eAfter the prompt is a blinking grey rectangle, called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecursor\u003c/strong\u003e. This is where you will be typing commands.\u003c/p\u003e\r\n\u003cp\u003eBoth in the curriculum and in resources online, you will often see commands preceded by a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$\u003c/code\u003e. When typing the commands yourself, do not type the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- this is simply a common convention used to indicate that what follows is a command to be run.\u003c/p\u003e\r\n\u003cp\u003eNow that we have covered the basics of the terminal and command line, let's start using it. In the next lesson, we will learn some common and very useful commands, what they do, and how to use them.\u003c/p\u003e\r\n\u003ch1\u003eInteracting with the Command Line\u003c/h1\u003e\r\n\u003cp\u003eNow that we know what the command line is, how to access it, and what to use it for, let's start interacting with it. In this lesson, we will explore some of the most frequently used terminal commands. You will use these commands all the time at Moringa School, so start getting comfortable with them now.\u003c/p\u003e\r\n\u003cp\u003eTo type a command, simply open your terminal program and start typing. Anything you type will appear where the cursor is. Once you've typed the command, hit\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Linux or Windows) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Mac) to run it. For the remainder of this lesson,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill be used interchangeably.\u003c/p\u003e\r\n\u003ch3\u003eSee current location with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe first command on our journey will be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epwd\u003c/code\u003e, which prints your current location to the screen. It stands for \"print working directory\".\u003c/p\u003e\r\n\u003cp\u003eSee what happens when we use this command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eguest@moringa-Lenovo-B50-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e:~$ \u003cspan class=\"hljs-built_in\"\u003epwd\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter we hit\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn or Enter\u003c/em\u003e, we see a series of words separated by slashes (\u003ccode\u003e/\u003c/code\u003e), also known as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efile path\u003c/strong\u003e. Each of the words is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edirectory\u003c/strong\u003e, which is another word for a folder. So, in the example, the terminal returned:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs\"\u003e/home/jill\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis tells us that we are located inside of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejill\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, which is inside of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/p\u003e\r\n\u003cp\u003eThis default directory is also called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehome directory\u003c/strong\u003e, and it is a sort of \"entry point\" for a system, and contains all of a user's files, directories, and programs. Remember when we first opened up the terminal and saw that our location was represented by a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e~\u003c/code\u003e? The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e~\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esymbol refers to the home directory.\u003c/p\u003e\r\n\u003ch3\u003eList out contents of folder with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eNow that we know which folder we are in, let's see what's inside of the folder. The next command we will learn is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003els\u003c/code\u003e, which lists all the content of a folder (\u003ccode\u003els\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"list\"). When I type it on my computer, I see a list of all files and directories in that folder.\u003c/p\u003e\r\n\u003cp\u003eThis tells us that I have each of the following folders in my\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e/\u003cem\u003eGuest\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\n\u003cspan class=\"hljs-constant\"\u003eDocuments\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eDownloads\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eMusic\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003ePictures\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003ePublic\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eTemplates\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eVideos\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRemember, just like\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFinder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFile Explorer\u003c/em\u003e, the terminal interface lets us navigate and interact with our computer.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003els\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells us which files and folders are inside of a directory, just like the icons in the Graphical User Interface.\u003c/p\u003e\r\n\u003ch3\u003eChange folders with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eWhen we're using Finder and we want to move to a different folder, we find the icon for the folder where we want to go and double-click on it. In Terminal, we use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd folder-name\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efolder-name\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the name of the folder to which you'd like to navigate).\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"change directory\". Be sure to always type a space after any command that has an additional argument, such as the name of a directory in this example.\u003c/p\u003e\r\n\u003cp\u003eFor instance, in order to navigate to my\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, I use the command\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd \u003cspan class=\"hljs-constant\"\u003eDocuments\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter hitting\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e, the prompt reads\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e$\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice how\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDocuments\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enow precedes the `$`, indicating that our location has changed.\u003c/p\u003e\r\n\u003cp\u003eHere are a few more options to help you navigate your computer:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIf you type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand press the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ekey - with no directory specified - you'll go back to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome \u003c/em\u003efolder. (You can also type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd ~\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto go there.)\u003c/li\u003e\r\n\u003cli\u003eIf you type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd ..\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(that's two periods), you'll go to the directory above the one you're currently in. So if you're in your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, and type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd ..\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyou'll go to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCreate folders with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mkdir\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emkdir\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"make directory\". We create a folder with a command like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mkdir name-of-directory\u003c/code\u003e, replacing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename-of-directory\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith whatever we would like to name the folder. Make sure you are in your computer's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDesktop\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory and let's create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir moringa-prep\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003els\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon our current folder, we can see that it contains a new folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmoringa-prep\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eCreate new files with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etouch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand works a lot like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emkdir\u003c/code\u003e, but instead of creating a new directory, it creates a new file. The structure looks like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch new-file-name\u003c/code\u003e. For example, let's move to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003edirectory we just made:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd moringa-prep\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd let's create a new file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we list the files in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, we see that it contains\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmy-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote: If you're using Windows PowerShell, you can use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt; New-Item\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eCopy items with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cp\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecp\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"copy\", and it is used to copy files and directories. The basic structure of this command is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cp original-file new-file\u003c/code\u003e, where\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoriginal-file\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name of the original file, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew-file\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis what you want to name the copy. Here's how we would use it to create a copy of\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-file.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enamed\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanother-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecp my-first-file.html another-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we list the contents of the directory, we can see that there are two files:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nanother-file.html    my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe new file is an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindependent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecopy of the original, meaning that any changes to one do not affect the other.\u003c/p\u003e\r\n\u003cp\u003eA word of caution in naming copies. If there is already a file with the name of the new file in a folder, the old file will be overwritten and its contents will be lost, so be careful to give your new documents and folders a unique name.\u003c/p\u003e\r\n\u003ch3\u003eMove and rename items with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand stands for \"move\". It can both move and rename files. To see how this works, let's list the contents of our current directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nanother-file.html    my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's say we want to call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanother-file.html\u003c/em\u003e. We use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003ecommand to rename it like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emv another-file.html my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLike\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cp\u003c/code\u003e, the basic structure of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand requires two pieces of information: the name of the file we would like to rename or move; and the new name or location for the file or folder.\u003c/p\u003e\r\n\u003cp\u003eNow we can use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto see that the file has been renamed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmy-first-file.html    my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's see how we can use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto move a file. First, let's create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto hold the file:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir brand-new-folder\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere is how we move\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emv my-second-file.html brand-new-folder/my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we provided the name of the file that we want to move, which is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emy-second-file.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this case. Then, separated by a space, we provided the new name and location of the file:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrand-new-folder/my-second-file.html\u003c/code\u003e. By changing the name of the file from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emy-second-file.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrand-new-folder/my-second-file.html\u003c/code\u003e, we are actually moving the file into the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/p\u003e\r\n\u003cp\u003eSee for yourself! List the contents of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and see that\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis no longer there:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nbrand-new-folder    my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, navigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd brand-new-folder\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eList the contents of the folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmy-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd we can see that we have successfully used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to move\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3\u003eDelete files with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eWe can delete files using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. Let's see how it works. Here is how we delete\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003erm my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe basic structure of this command is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm file-to-delete\u003c/code\u003e, with a space between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the name of the file you'd like to delete. We can see with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat the file has been removed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that the folder is empty, let's delete it as well. Note that we can not delete a folder from inside of it, so first, navigate up one folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd ..\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen we can delete the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003erm -r brand-new-folder\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that this looks a little different from removing a file: we have an extra option in there,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-r\u003c/code\u003e. As a safety measure,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edoes not delete directories by default. In order to delete directories, we need to include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-r\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eafter the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e, which stands for \"recursive\".\u003c/p\u003e\r\n\u003cp\u003eIf we would like to delete a folder that contains files, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-rf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag instead:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm -rf folder-name\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eClear the terminal screen with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ clear\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eFinally, our terminal screen is getting pretty crowded with all of these commands! Sometimes it's nice to start with a blank screen. To clear the screen from previous commands, we use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ clear\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAfter the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ clear\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand has been issued, all that remains on the display screen is the command prompt. This does not actually clear any data, it simply gives us a blank screen to work with.\u003c/p\u003e\r\n\u003cp\u003eThere are a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eton\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof commands for the terminal, but knowing the commands covered in this lesson will make you pretty effective at using the command line. Being able to use the command line is one way to make yourself a powerful and efficient developer, so get in the habit early!\u003c/p\u003e\r\n\u003ch2\u003eCheat Sheet\u003c/h2\u003e\r\n\u003ch3\u003eCommands\u003c/h3\u003e\r\n\u003cp\u003eHere's a quick reference to all of the commands listed in this lesson. Feel free to reference this as you learn the commands - they'll be second nature before you know it.\u003c/p\u003e\r\n\u003ctable style=\"width: 672px; margin-left: auto; margin-right: auto;\" border=\"1\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003cstrong\u003eCommand\u003c/strong\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cstrong\u003eWhat it does \u003c/strong\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eLists out the contents of the current folder.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003ePrints the path of the current directory to the screen.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\n\u003ccode\u003e$ cd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eo\u003c/span\u003er\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd ~\u003c/code\u003e\n\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eChanges the current directory to the home directory.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ cd ..\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eChanges the current directory up one level.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ mkdir directory-name\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eCreates a new directory (folder) in the current directory with the name specified\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ touch file-name.html\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eCreates a new, empty file in the current directory with the name specified\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ cp original-file.html new-file.html\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eCreates a duplicate copy of the first file listed and gives it the name of the second file listed. Both files still exist.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ mv original-file-name.html new-file-name.html\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eMoves the contents of the first file into the second file. Effectively renames the file.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ mv sample-file.html new-location/sample-file.html\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eMoves the first file into the folder specified for the second file.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003cspan\u003e\u003ccode\u003e$ rm file-name.html\u003c/code\u003e\u003c/span\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\n\u003cspan\u003eRemoves the file specified.\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003cspan\u003e\u003ccode\u003e$ rm -rf directory-name\u003c/code\u003e\u003c/span\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\n\u003cspan\u003eRemoves the folder specified and all of the files inside.\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003cspan\u003e\u003ccode\u003e$ clear\u003c/code\u003e\u003c/span\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\n\u003cspan\u003eClears the terminal screen.\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e  \u003c/p\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003efile path\u003c/strong\u003e: The location of a file or folder in the file system. For example:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/MoringaSchool/Pictures/cute-kitten.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the path for the image called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecute-kitten.jpg\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003edirectory\u003c/strong\u003e: Another name for a folder in a file system. For example,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/MoringaSchool/Pictures/cute-kitten.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehas 3 directories:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringaSchool\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePictures\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003ehome directory\u003c/strong\u003e: The highest-level directory on a computer - this is the default directory when you open the terminal.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-introduction-and-interaction-with-the-command-line"},{"id":37,"title":"Assignment: Practice the Command Line","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch1\u003ePractice: Command Line\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Start using the command line to interact with your computer. Learn some basic commands.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following question with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a GUI and the command line?\u003c/li\u003e\r\n\u003cli\u003eWhat are some advantages you can think of for using the command line?\u003c/li\u003e\r\n\u003cli\u003eName two commands and what they do.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to start interacting with your computer through the command line. Then, once you have experience using the command line and using basic commands, complete the following exercise in the terminal.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eIf you're not already there, navigate to the home directory.\u003c/li\u003e\r\n\u003cli\u003ePrint your location to the screen to make sure you're in the right spot.\u003c/li\u003e\r\n\u003cli\u003eList the contents of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory to the terminal.\u003c/li\u003e\r\n\u003cli\u003eNavigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDesktop\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003cli\u003eCreate a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003cli\u003eCreate a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eCreate two more files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile2.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile3.html\u003c/em\u003e. (Here's a tip: you can create two files with a single command! Simply separate the two file names with a space:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch file2.html file3.html\u003c/code\u003e)\u003c/li\u003e\r\n\u003cli\u003eCreate a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eMove\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eCopy\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile2.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand name the copy\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile4.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eRename\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile3.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethird-file.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate into\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDelete\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate up one directory so that you are back in\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003ePrint your location to verify that you are back in\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDelete\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eList the contents to the page to make sure that\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewas successfully deleted.\u003c/li\u003e\r\n\u003cli\u003eClear the terminal screen.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eStill want more practice? Check out the adventure game at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://web.mit.edu/mprat/Public/web/Terminus/Web/main.html\" target=\"_blank\"\u003ethis link\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethat uses the same terminal commands that we just learned to navigate through the levels.\u003c/p\u003e","exportId":"i6b4f79c974dbc18ca84a97e25829bc5d"},{"id":38,"title":"Resource: Cheat Sheet: Command Line","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eHere's a quick reference of all of the commands listed in this lesson. Feel free to reference this as you learn the commands - they'll be second nature before you know it.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ pwd\u003c/code\u003e: Prints the path of the current directory to the screen\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ ls\u003c/code\u003e: Lists out the contents of the current folder\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cd directory-name\u003c/code\u003e: Changes the current directory to the one specified\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd ~\u003c/code\u003e: Changes the current directory to the home directory\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cd ..\u003c/code\u003e: Changes the current directory up one level\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ mkdir directory-name\u003c/code\u003e: Creates a new directory (folder) in the current directory with the name specified\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ touch file-name.html\u003c/code\u003e: Creates a new, empty file in the current directory with the name specified\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cp original-file.html new-file.html\u003c/code\u003e: Creates a duplicate copy of the first file listed and gives it the name of the second file listed. Both files still exist.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ mv original-file-name.html new-file-name.html\u003c/code\u003e: Moves the contents of the first file into the second file. Effectively renames the file.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ mv sample-file.html new-location/sample-file.html\u003c/code\u003e: Moves the first file into the folder specified for the second file.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ rm file-name.html\u003c/code\u003e: Removes the file specified.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ rm -rf directory-name\u003c/code\u003e: Removes the folder specified and all of the files inside.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ clear\u003c/code\u003e: Clears the terminal screen.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003efile path\u003c/strong\u003e: The location of a file or folder in the file system. For example:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/MoringaSchool/Pictures/cute-kitten.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the path for the image called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecute-kitten.jpg\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003edirectory\u003c/strong\u003e: Another name for a folder in a file system. For example,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/MoringaSchool/Pictures/cute-kitten.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehas 3 directories:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringaSchool\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePictures\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003ehome directory\u003c/strong\u003e: The highest-level directory on a computer - this is the default directory when you open the terminal.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"resource-cheat-sheet-command-line"},{"id":39,"title":"Monday: Text Editor and Github","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eText Editor: Atom\u003c/h1\u003e\r\n\u003cp\u003eWhen we write code, we do it in a text editor. Word processing programs like Microsoft Word are not ideal for writing code because they add styles and formatting that can get in the way of our code. We want plain, raw text without any extras for our coding files.\u003c/p\u003e\r\n\u003cp\u003eIf you have a Mac, your device comes with a text editor called TextEdit which can be found in your Applications list. If you have a PC, the default text editor is Notepad (Windows) or Gedit (Ubuntu), which can be found though the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStart\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emenu. The Mac and Ubuntu Terminal applications also include a console-based text editor called Nano. These text editors allow you to write code with plain, raw text.\u003c/p\u003e\r\n\u003cp\u003eAt Moringa School, we use the free text editor,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAtom\u003c/em\u003e. Atom was designed with the developer in mind by adding features and customization that help developers write their code more productively.\u003c/p\u003e\r\n\u003ch3\u003eInstallation\u003c/h3\u003e\r\n\u003cp\u003eTo use Atom on your device, download the appropriate installer for your operating system at the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://atom.io/\" target=\"_blank\"\u003eAtom website\u003c/a\u003e. Or, on Windows, you can optionally use a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epackage manager\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003esuch as\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://chocolatey.org/packages/Atom\" target=\"_blank\"\u003eChocolatey\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor installation, too.\u003c/p\u003e\r\n\u003ch3\u003eOverview\u003c/h3\u003e\r\n\u003cp\u003eLet's take a quick tour of Atom. When we open the editor, we arrive on an empty file with the name \"untitled\". If we add content to the file, we see the x at the top becomes a blue circle. This indicates that there is content that hasn't yet been saved. We'll save this file as\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eusing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.html\u003c/code\u003eextension to indicate that this will be a document written in HTML. The blue circle returns to a grey x and we know that our file's content has been saved.\u003c/p\u003e\r\n\u003cp\u003eAtom offers developers the ability to customize the editor's settings and shortcuts. Press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e,\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(Mac) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e,\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(Ubuntu and Windows) to see the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSettings\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eview.\u003c/p\u003e\r\n\u003cp\u003eOne setting that we want to make sure we have in place is the tab length. Writing good code means making a habit of using consistent indentation. The standard for indenting lines of code is 2 spaces. We have confirmed that this is set to 2. So, rather than hitting the space bar twice, we can use the tab key for indentation.\u003c/p\u003e\r\n\u003cp\u003eYou won't need to worry too much about all of the customization possibilities now but as you start gaining coding experience, remember that you can return to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSettings\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eview to make updates to keyboard shortcuts, themes, or packages that add other functionality to the editor.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Resources\u003c/h3\u003e\r\n\u003cp\u003eFor more details about using Atom, take a look at the Atom Flight Manual in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://atom.io/docs\" target=\"_blank\"\u003eDocumentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon the Atom website.\u003c/p\u003e\r\n\u003ch1\u003eGit and Github\u003c/h1\u003e\r\n\u003cp\u003eWhen we get started with writing a new program, the last thing we want to happen is to lose any of our hard work. To prevent that terrible possibility from happening, we will save versions of our code on our computer AND also save a version of our code on a location on the web. Later, when we work in teams, there will be more versions of our code as each team member copies the main version to work on, share, review and merge into our final program (and NOT overwrite each other's work!). At Moringa School, we will learn to manage these different versions of our code using two tools:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGit\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGitHub\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eGit is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eversion control system\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat we install on the computers where we write code. Git allows us take a snapshot of our program, called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecommit\u003c/strong\u003e, at important points along the way as we work. You can think of a commit like a save on a document that you are writing. Although unlike a save, once a commit is made, it is permanently stored in the history of the project. A newer commit does not overwrite the previous commit. If we ever want to go back to the place in time where the commit was made, where all the files looked exactly as they did when we committed, we will be able to do so.\u003c/p\u003e\r\n\u003cp\u003eWhen we are ready to save the code from our computers to a location on the web, we will use\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/\" target=\"_blank\"\u003eGitHub\u003c/a\u003e. GitHub allows us to create\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003erepositories\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto store the code and code history for each of our projects. A repository is what we call the container that holds all of the files from our project with all of the commits that have been made to it.\u003c/p\u003e\r\n\u003cp\u003eEach project that we create will be saved to a repository on GitHub. By the end of your time here, you will have a portfolio of your work represented by all of your GitHub repositories. LinkedIn will be your employment resume and GitHub will serve as your coding resume.\u003c/p\u003e\r\n\u003cp\u003eNote that all repositories on GitHub are public by default. For a monthly fee, GitHub offers\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/blog/2164-introducing-unlimited-private-repositories\" target=\"_blank\"\u003eunlimited private repositories\u003c/a\u003e. However, this is entirely optional. Private repos are not required for this course.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eInstallation\u003c/h2\u003e\r\n\u003ch3\u003eWindows\u003c/h3\u003e\r\n\u003cp\u003eIf you do not already have Git Bash installed, download it\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://git-scm.com/download/win\"\u003ehere.\u003c/a\u003e\u003c/p\u003e\r\n\u003ch3\u003eMac\u003c/h3\u003e\r\n\u003cp\u003eTo install Git on your personal Mac, follow these steps:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eInstall Homebrew, a package manager for Mac (skip this step if Homebrew is already installed on your computer): Go to the terminal and copy and paste this code at the prompt:\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ /usr/bin/ruby \u003cspan class=\"hljs-operator\"\u003e-e\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"\u003cspan class=\"hljs-variable\"\u003e$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u003c/span\u003e\"\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethe above command spans one line.\u003c/li\u003e\r\n\u003cli\u003eRun the following command so that Homebrew packages are run before the system versions of the same (which may be old or not what we want):\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003eecho \u003cspan class=\"hljs-string\"\u003e'export PATH=/usr/local/bin:$PATH'\u003c/span\u003e \u003cspan class=\"hljs-prompt\"\u003e\u0026gt;\u0026gt; \u003c/span\u003e~\u003cspan class=\"hljs-regexp\"\u003e/.bash_profile\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eInstall Git with this command:\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ebrew install git\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eUbuntu\u003c/h3\u003e\r\n\u003cp\u003eUbuntu has a powerful software installation tool known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAdvanced Packaging Tool\u003c/strong\u003e, which is accessed with the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eapt\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ecommand. To install Git via apt, run the following commands:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ sudo apt-get \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e\r\n$ sudo apt-\u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e git\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCreating a GitHub Account\u003c/h2\u003e\r\n\u003cp\u003eIf you have not already created a personal GitHub account to store your code, head over to the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/\"\u003eGitHub website\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand sign up for a free account now.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://moringaschool.instructure.com/courses/14/file_contents/viewer/files/github-account-signup.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Github Home Page\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1$IMS-CC-FILEBASE$/github-account-signup.png\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWhen creating an account, consider choosing a username that you will feel comfortable sharing in a professional setting. Also, keep in mind that all of the work that you will be adding to your GitHub account is viewable to the public. Make a commitment to always present the best version of your code. Again, your Github profile will serve as your resume and portfolio of coding abilities. Make sure your username is professional, and code within it is clean and presentable.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eGit Project Setup\u003c/h2\u003e\r\n\u003cp\u003eWe've started using command line to navigate our computer. Let's switch gears a little and expand on what we're able to do using the command line and start using Git and GitHub. In this lesson, we will create a simple webpage and track the process using Git.\u003c/p\u003e\r\n\u003ch3\u003eSet Git username\u003c/h3\u003e\r\n\u003cp\u003eThe first thing we need to do to start using Git is to let Git know who we are by setting our Git usernames.\u003c/p\u003e\r\n\u003ch4\u003eWorking in pairs\u003c/h4\u003e\r\n\u003cp\u003eIn class, we will be pair programming, so the name and email for each partner needs to be set.\u003c/p\u003e\r\n\u003cp\u003eTo accomplish this, we will be using a program called\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/pivotal/git_scripts\" target=\"_blank\"\u003eGit Scripts\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eby\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://pivotal.io/labs\" target=\"_blank\"\u003ePivotal Labs\u003c/a\u003e. To install Git Scripts, first you need to have Ruby installed (instructions\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\"\u003ehere\u003c/a\u003e), then follow the instructions in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/pivotal/git_scripts\" target=\"_blank\"\u003eGit Scripts repository link\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eOnce you have it installed, you will be able to make commits with both your and your partner's names (we'll see what this means in more detail shortly). The second thing you need to do is create a file named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.pairs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the top-most, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eroot\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edirectory of the project. Here's an example of what the file would look like if Grace Hopper and James Bond were working as a pair:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-attribute\"\u003epairs\u003c/span\u003e:\r\n  \u003cspan class=\"hljs-attribute\"\u003egh\u003c/span\u003e: Grace Hopper\r\n  \u003cspan class=\"hljs-attribute\"\u003ejb\u003c/span\u003e: James Bond\r\n\u003cspan class=\"hljs-attribute\"\u003eemail\u003c/span\u003e:\r\n  \u003cspan class=\"hljs-attribute\"\u003egh\u003c/span\u003e: gracehopper\u003cspan class=\"hljs-property\"\u003e@gmail\u003c/span\u003e.com\r\n  \u003cspan class=\"hljs-attribute\"\u003ejb\u003c/span\u003e: bond\u003cspan class=\"hljs-property\"\u003e@jamesbond\u003c/span\u003e.com\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou will insert your and your partner's initials, names, and email addresses in your own\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.pairs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile, but otherwise the file needs to match the example exactly. If not, then the Git Scripts program will run into an error.\u003c/p\u003e\r\n\u003ch4\u003eWorking solo\u003c/h4\u003e\r\n\u003cp\u003eFor most of your programming career, you'll be working by yourself on your personal computer. When that is the case, you need to set your personal info by setting\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eglobal\u003c/strong\u003e, or computer-wide, variables on your computer for your name and email. Here are the commands to run in the terminal to accomplish this (insert your own name and email when you do this):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ git config --\u003cspan class=\"hljs-built_in\"\u003eglobal\u003c/span\u003e user.name \u003cspan class=\"hljs-string\"\u003e\"Albert Einstein\"\u003c/span\u003e\r\n$ git config --\u003cspan class=\"hljs-built_in\"\u003eglobal\u003c/span\u003e user.email einstein\u003cspan class=\"hljs-property\"\u003e@email\u003c/span\u003e.com\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOnce this is done, the name and email are set for any project located anywhere on the computer. If you run these on your personal computer, you only need to run these commands one time for the names to be set for every project.\u003c/p\u003e\r\n\u003ch2\u003eTracking changes with Git\u003c/h2\u003e\r\n\u003cp\u003eAt Moringa School, every project that we create will have its own directory and its own repository. Now we are going to walk through creating a new project and tracking those changes with git.\u003c/p\u003e\r\n\u003cp\u003eThe first thing we need to do is create the project directory. We'll do this just like we have done previously - Git will come in shortly. Open up Terminal and navigate to the folder where you would like to create your projects.\u003c/p\u003e\r\n\u003cp\u003eI am going to create a new folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-projects\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside of my computer's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments \u003c/em\u003edirectory to hold all of the projects that I will create in class.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd \u003cspan class=\"hljs-constant\"\u003eDocuments\u003c/span\u003e\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir moringa-school-projects\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd moringa-school-projects\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we are located in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-projects\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and we can add a new directory for this project. I am going to call this one\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(and just a bit of computer programming history for you: it's traditional to write some form of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehello world\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the first program or example you write in a new language).\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir hello-world\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd hello-world\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we are located inside of our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and we can turn it into a Git repository. We do this by\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einitializing\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eGit inside of the directory (make sure that you do this inside of\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e! Remember, you can always see your location with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ git init\r\nInitialized empty Git repository \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-regexp\"\u003e/Documents/moringa-school-projects/hello-world/\u003c/span\u003e.git/\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs the confirmation message reads, the Git repository has been initialized inside of a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e. But when we try to list the contents of\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e) with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e, where is it?\u003c/p\u003e\r\n\u003cp\u003eDirectories that being with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehidden\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edirectories, which means that they do not show up with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. To view hidden files, we need to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-a\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoption like this, which stands for \"all\":\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ ls \u003cspan class=\"hljs-operator\"\u003e-a\u003c/span\u003e\r\n.git\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere's our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory! Let's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto it and see what's inside:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd .git\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\n\u003cspan class=\"hljs-constant\"\u003eHEAD\u003c/span\u003e        description info        refs\r\nconfig        hooks       objects\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we're never actually going to be touching any of these files. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory is where all of the changes we make to our project will be tracked. Whenever we add, edit, or delete files, Git will be keeping track of those changes in here. This is actually why the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory is hidden in the first place - to prevent us from making any changes that could interfere with Git's job.\u003c/p\u003e\r\n\u003cp\u003eLet's navigate back up to our main project directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e ..\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that we've set up our Git repository, we need to tell Git who is working on the project. If you are working solo, you can skip this step - you've already set the global username and email for all projects on your computer.\u003c/p\u003e\r\n\u003cp\u003eUsing the initials set in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, run the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit pair\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit pair gh jb\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you run this command and get a big error that looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e/usr/\u003cspan class=\"hljs-built_in\"\u003elocal\u003c/span\u003e/lib/ruby/gems/\u003cspan class=\"hljs-number\"\u003e2.4\u003c/span\u003e.\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e/gems/pivotal_git_scripts-\u003cspan class=\"hljs-number\"\u003e1.4\u003c/span\u003e.\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e/lib/pivotal_git_scripts/git_pair.rb:\u003cspan class=\"hljs-number\"\u003e167\u003c/span\u003e:\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e `block \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eread\u003c/span\u003e_author_info_from_config\u003cspan class=\"hljs-string\"\u003e': undefined method `[]'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e nil:NilClass (NoMethodError)\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eit means that something is wrong with the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Revisit the file and make sure the file matches and the spacing is correct - feel free to copy and paste the example\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in this lesson, replacing the names with yours and your partner's.\u003c/p\u003e\r\n\u003cp\u003eTo see information about the pair set for a project, you can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git about\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand, which comes from Git Scripts:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs python\"\u003e$ git about\r\ngit user:       Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond\r\ngit email:      grace+james\u003cspan class=\"hljs-decorator\"\u003e@\u003c/span\u003e\r\nGitHub project: NONE\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow our project is set up with a Git repository initialized. Let's start adding files to track!\u003c/p\u003e\r\n\u003cp\u003eCreate an empty file in the project directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch hello-world.html\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow open the project in Atom using the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003eatom .\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand tells the computer to open anything that follows it in Atom. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans current directory, so the entire directory should open up in Atom.\u003c/p\u003e\r\n\u003cp\u003eLet's add some text to\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's what this looks like in Atom:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://moringaschool.instructure.com/courses/14/file_contents/viewer/files/MP-W1D1-03-atom_hello_world.jpg?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Atom\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1$IMS-CC-FILEBASE$/MP-W1D1-03-atom_hello_world.jpg\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe little blue dot on the right of the page tab next to the file name (\u003cem\u003ehello-world.html\u003c/em\u003e) means that the file has unsaved changes. Save the file with\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFile\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSave\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the Atom menu bar.\u003c/p\u003e\r\n\u003cp\u003eWe can see what Git is doing with our files with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git status\r\nOn branch master\r\n\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\n\r\nUntracked files:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e include \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e what will be committed)\r\n\r\n    hello-world.html\r\n\r\nnothing added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e but untracked files present (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e track)\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis is Git telling us, \"I noticed that you added a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e, but unless you use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e, I am not going to do anything with it.\"\u003c/p\u003e\r\n\u003cp\u003eBefore we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add\u003c/code\u003e, let's quickly go over a concept that can be a little confusing when first learning git: the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003estaging environment\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand how it relates to a commit.\u003c/p\u003e\r\n\u003cp\u003eTo reiterate, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecommit\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a record of what files you have changed since the last time you made a commit. A commit is like a save point, and we want to make a commit when we've made a notable change or addition to a project. Commits narrate the development of a project and allow you to go back to the state of a project at any point.\u003c/p\u003e\r\n\u003cp\u003eSo, how do you tell Git which files to put into a commit? This is where the staging environment comes in. As we just saw, when you make changes to a repo, Git notices that a file has changed but won't do anything with it.\u003c/p\u003e\r\n\u003cp\u003eTo add a file to a commit, we first need to add it to the staging environment. To do this, we can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add \u0026lt;filename\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. Here is how we add\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add hello-world.html\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e, we see that Git is tracking\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git status\r\nOn branch master\r\n\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\n\r\nChanges \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be committed:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git rm --cached \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e unstage)\r\n\r\n    new file:   hello-world.html\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOnce you've used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to add all the files you want to the staging environment, you can then tell Git to package them into a commit using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. Let's do that now.\u003c/p\u003e\r\n\u003cp\u003eWhen pairing, we use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit-pair-commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Add initial hello world page\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen working solo, we use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Add initial hello world page\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo make a commit, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit-pair-commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand followed by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-m\u003c/code\u003eoption (for \"message\"), followed by a short message describing the commit.\u003c/p\u003e\r\n\u003cp\u003eFor consistency, commit messages should be in present tense and describe the change(s) made. As a rule of thumb, they should complete the phrase, \"This commit will...\". So when we look back at our commit history, we know that this commit will \"add initial hello world page\".\u003c/p\u003e\r\n\u003cp\u003eWe can look at our Git commit history with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e de955b7ef50670e42d21f2366ea09cf517379475\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;grace+james@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Tue May \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e58\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e +\u003cspan class=\"hljs-number\"\u003e0300\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial hello world page\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis command lists the commits made in a repository in reverse chronological order, so the most recent commits show up first. As we can see, this commit has been assigned a unique collection of numbers and letters,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ede955b7ef50670e42d21f2366ea09cf517379475\u003c/code\u003e. From now on, whenever we would like to return to this project exactly as it is right now, we will be able to return to this commit.\u003c/p\u003e\r\n\u003cp\u003eAll right, let's add a short paragraph to our page to introduce ourselves:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first website! I am about to embark on the exciting journey of learning how to code. Won't you join me?\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's check out our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit status\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand see what it tells us:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git status\r\nOn branch master\r\nChanges not staged for \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e what will be committed)\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git checkout -- \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e discard changes \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e working directory)\r\n\r\n    modified:   hello-world.html\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eno\u003c/span\u003e changes added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e/\u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git commit -a\"\u003c/span\u003e)\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGit knows that\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehas been modified, but the changes still need to be added to the staging environment and then committed. Let's do that now, using another option for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git add .\r\n$ git \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e -m \u003cspan class=\"hljs-string\"\u003e\"Add intro paragraph\"\u003c/span\u003e\r\n[\u003cspan class=\"hljs-keyword\"\u003emaster\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003ead09ba] \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e intro paragraph\r\n \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e file \u003cspan class=\"hljs-keyword\"\u003echanged\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e insertion(+)\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis time, we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add hello-world.html\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for the current directory (just like in the case of the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom .\u003c/code\u003e), and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill add any changes in the directory that have not yet been added to the staging environment, so we can add multiple files at the same time.\u003c/p\u003e\r\n\u003cp\u003eLet's look at our project history now:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003ead09ba06206efdf5be66c56b0e425ed56ac70d1\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;grace+james@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Tue May \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e26\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e22\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e +\u003cspan class=\"hljs-number\"\u003e0300\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e intro paragraph\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e de955b7ef50670e42d21f2366ea09cf517379475\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;grace+james@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Tue May \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e58\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e +\u003cspan class=\"hljs-number\"\u003e0300\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial hello world page\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the most recent commit is at the top. We can make this a little easier to read by adding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--oneline\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoption like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ git \u003cspan class=\"hljs-built_in\"\u003elog\u003c/span\u003e --oneline\r\n\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003ead09ba Add intro paragraph\r\nde955b7 Add initial hello world page\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe seven-character string before each message is also a unique identifier for the commit and can be used in the same way (we will see how in an upcoming lesson).\u003c/p\u003e\r\n\u003cp\u003eThis may seem like a lot of work for such minor changes on a single web page, but as we start building more projects - and more complex projects - we will see just how useful it is to track changes to our code this way.\u003c/p\u003e\r\n\u003ch2\u003eRemote repositories on GitHub\u003c/h2\u003e\r\n\u003cp\u003eSo far, our code only exists on the machines where they were written. We have been tracking our changes in a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elocal\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eGit repository, which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.git\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirectory we've seen. However, it would be good to have a copy of our work backed up online, especially when our projects grow in size and have real-world implications. More importantly, we will need some way of collaborating with others on our work. When we want to push our work to the world, we will push it to a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eremote\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003erepository on GitHub. In this lesson, we will explore GitHub and how to use it.\u003c/p\u003e\r\n\u003cp\u003eWhat do we mean when we say local and remote? When we work on a repository that we can only access from the computer on which it is saved, we call this a local repository. All the code we have written so far has been written locally. If we want to work on the project from another device, we won't be able to access it. A remote repository, on the other hand, is a repository that is saved in a location outside of the computer where it was created, but still accessible by that computer (and other computers as well). At Moringa School, we will generally be saving our work to remote repositories.\u003c/p\u003e\r\n\u003cp\u003eLet's start by pushing our local repository to a remote repository on GitHub.\u003c/p\u003e\r\n\u003cp\u003eThe first thing we need to do is create the remote repository on GitHub. Each partner needs to create a repository on their own GitHub account. Both remote repositories will link to the same local repository, but this will give each of you a personal record of the project.\u003c/p\u003e\r\n\u003cp\u003eOnce you're logged in, click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew Repository\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton, which will take you to the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/new\"\u003e\u003cem\u003eCreate New Repository \u003c/em\u003epage\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://moringaschool.instructure.com/courses/14/file_contents/viewer/files/MP-W1D1-03-new_repo_screen-1.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"MP-W1D1-03-new_repo_screen-1.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's go over the options on this page.\u003c/p\u003e\r\n\u003cp\u003eThe text box under\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRepository Name\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis where we enter the name of the repository. You can name it anything you'd like, but give it a name that helps you identify the repository. It makes sense to give it the same name as the project folder for your local repository. For this project, let's use \"hello-world\".\u003c/p\u003e\r\n\u003cp\u003eUnderneath the repository name, you can enter a description. The description is optional, but it can be helpful for others and your future self to have a quick reference for the description of the repository content.\u003c/p\u003e\r\n\u003cp\u003eYou have the option to make a repository public or private. Because we're using free GitHub accounts, we can only select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePublic\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoption. As the page notes, anyone can see a public repository, but you can choose who has permission to contribute to it.\u003c/p\u003e\r\n\u003cp\u003eThe last option asks whether you would like to initialize the project with a README. A README file contains information about the contents of the repository - stuff like the authors, description, setup instructions, and licensing information. Do not select this box. We will explore README files in an upcoming lesson.\u003c/p\u003e\r\n\u003cp\u003eWith the repository name and description set, click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate Repository\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton. You will be taken to a page that looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-04-empty_repo.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"MP-W1D1-04-empty_repo.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWith this empty repository in place, we can push our locally-stored code to the new remote location.\u003c/p\u003e\r\n\u003cp\u003eFirst, we need to tell our local repository that a remote repository even exists somewhere online. We do this by adding it to Git's record. Just like Git wouldn't do anything with our files until we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e, it won't acknowledge our remote repository yet, either.\u003c/p\u003e\r\n\u003cp\u003eTo tell the repository about the remote location, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cpp\"\u003e$ git remote add gh https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand takes two arguments:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe remote name, for example\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe remote name can be anything - it's a nickname for the remote repository at the URL provided. In this example, the remote repository belongs to one of our partners, Grace Hopper, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare their initials. When working in a pair, it's a good idea to give your remote repository your initials as a nickname, because it clearly differentiates the two remotes and is easy to remember.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe remote location or URL, for example\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://github.com/moringaschool/hello-world.git\u003c/code\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThis is the URL found in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eQuick setup\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebox at the top of the empty repository page\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003ePlease note that your command should include your repository info. Our URL is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://github.com/moringaschool/hello-world.git\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this example, but you want to replace this with your own URL.\u003c/p\u003e\r\n\u003cp\u003eNow Git knows that there is a remote repository, and it's where you want your local repository changes to go. To confirm that Git has done this successfully, run this command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit remote -v\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe response looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs nginx\"\u003e\u003cspan class=\"hljs-title\"\u003egh\u003c/span\u003e    \u003cspan class=\"hljs-url\"\u003ehttps://github.com/moringaschool/hello-world.git\u003c/span\u003e (fetch)\r\ngh    \u003cspan class=\"hljs-url\"\u003ehttps://github.com/moringaschool/hello-world.git\u003c/span\u003e (push)\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-v\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoption will give you a list of all of the remote repositories that your local repository knows about. There's one repository and it’s listed twice, which means it is available to push information to and to fetch information from. If both you and your partner have added remote repositories, then both repositories should be listed.\u003c/p\u003e\r\n\u003cp\u003eWe are finally ready to push our code from local to remote. In other words, we will be copying it from our machine to the location on GitHub. To do this, we will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit push\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e gh master\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit push\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand takes two arguments.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFirst, we provide the name of the remote repository location. In this example, we wanted to push to the remote repository we just created, so we can use the nickname\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat we created.\u003c/li\u003e\r\n\u003cli\u003eSecond, we provide the name of the version of the code (also known as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebranch\u003c/strong\u003e, which we will learn more about in an upcoming lesson) we are pushing. As we start building more complex projects, we will have multiple versions of code at various stages of development on a single, local device. At the moment, we only have one branch, the \"master\" branch.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name given to this branch by Git, and the master is always considered the master copy.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWhen you push to GitHub on a computer where the user has not been set globally, the terminal will prompt you to enter your GitHub login information. This is GitHub protecting your account - only the owner of a repository is allowed to push to it. Once you have entered your login information, the terminal will give you some feedback that it is pushing your code to the remote repository. Go ahead and refresh the repository's page on GitHub, and you can see the file structure of the project, and the same commits that we saw in the terminal.\u003c/p\u003e\r\n\u003ch2\u003eCloning from GitHub\u003c/h2\u003e\r\n\u003cp\u003eAll right, we've pushed code from our personal machine up to GitHub. But as we mentioned before, one of the big advantages to using a service like GitHub is how it lets us collaborate with others on the same code. This requires copying the code from the remote repository into a local repository, a process called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecloning\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo practice this, first, we need to remove the local repository from our personal computers. If you are in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory (check with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epwd\u003c/code\u003e):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ \u003cspan class=\"hljs-built_in\"\u003epwd\u003c/span\u003e\r\nDocuments/moringa-school-projects/hello-world\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMove up one directory with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd ..\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand remove the folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd ..\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003erm -rf hello-world\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow the folder is gone, and we can clone our remote repository back onto our computers. On the main GitHub page for the repository, find the button that says\u003cspan\u003e \u003c/span\u003e\u003cem\u003eClone or download\u003c/em\u003e. A dialog box opens containing the URL for the repository. This is the same URL as the one we used for the remote. Copy the URL (either select the text and copy it manually, or click on the clipboard button next to the URL), and we will clone the repository using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit clone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand in the terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003eclone\u003c/span\u003e https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe terminal will print some feedback that it has successfully cloned the repository. Go ahead and list the contents of the folder and see that we now have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nhello-world\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we navigate into\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit log\u003c/code\u003e, we can see that our previous commits are still part of this repository.\u003c/p\u003e\r\n\u003cp\u003eTake a look at the Git remotes for the repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cpp\"\u003e$ git remote -v\r\norigin    https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git (fetch)\u003c/span\u003e\r\norigin    https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git (push)\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eWe see that the remote repository is automatically linked, and by default, it has the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e. If we make changes to our local repository and want to push those to GitHub, we will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eremote nickname, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin master\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne more (important) thing about Git repositories. Make sure that you never create or clone a repository inside of an existing repository. This creates something called a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esubmodule\u003c/em\u003e, which has an icon like the one here for\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewild-beasts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon GitHub:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://moringaschool.instructure.com/courses/14/file_contents/viewer/files/MP-W1D1-06-submodule.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1$IMS-CC-FILEBASE$/MP-W1D1-06-submodule.png\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThere are cases when you would want to do this, but for our purposes, it will only interfere with our Git process.\u003c/p\u003e\r\n\u003cp\u003eAll right! We've just covered\u003cspan\u003e \u003c/span\u003e\u003cem\u003ea lot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof ground here! Don't worry about memorizing everything that we did here, and use the cheat sheet for reference when using Git in your daily workflow. It's okay if everything isn't making perfect sense right now - we will be using Git every day while at Moringa School, and like anything else, it will become more natural with practice.\u003c/p\u003e","exportId":"monday-text-editor-and-github"},{"id":40,"title":"Resource: Cheat Sheet: Git Commands","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eCheat Sheet\u003c/h2\u003e\r\n\u003ch3\u003eDaily Git Workflow\u003c/h3\u003e\r\n\u003ch4\u003eSet Name and Email\u003c/h4\u003e\r\n\u003ch5\u003ePair Programming\u003c/h5\u003e\r\n\u003cp\u003eAdd\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto home directory (changing name, initials and emails to your own):\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e.pairs\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-attribute\"\u003epairs\u003c/span\u003e:\r\n  \u003cspan class=\"hljs-attribute\"\u003egh\u003c/span\u003e: Grace Hopper\r\n  \u003cspan class=\"hljs-attribute\"\u003ejb\u003c/span\u003e: James Bond\r\n\u003cspan class=\"hljs-attribute\"\u003eemail\u003c/span\u003e:\r\n  \u003cspan class=\"hljs-attribute\"\u003egh\u003c/span\u003e: gracehopper\u003cspan class=\"hljs-property\"\u003e@gmail\u003c/span\u003e.com\r\n  \u003cspan class=\"hljs-attribute\"\u003ejb\u003c/span\u003e: bond\u003cspan class=\"hljs-property\"\u003e@jamesbond\u003c/span\u003e.com\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eThen after the Git repository has been initialized, use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit pair\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to set the pair:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit pair [initials \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] [initials \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUsing the initials from the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in the home directory in place of \"[initials 1]\" and \"[initials 2]\", this command sets the user names and emails of PAIRS on a project.\u003c/p\u003e\r\n\u003ch5\u003eSolo Programming\u003c/h5\u003e\r\n\u003cp\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit config\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to set your name and email for your local computer. This only needs to be done once.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ git config --\u003cspan class=\"hljs-built_in\"\u003eglobal\u003c/span\u003e user.name \u003cspan class=\"hljs-string\"\u003e\"Santa Claus\"\u003c/span\u003e\r\n  $ git config --\u003cspan class=\"hljs-built_in\"\u003eglobal\u003c/span\u003e user.email santa\u003cspan class=\"hljs-property\"\u003e@northpole\u003c/span\u003e.com\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003eTracking Changes\u003c/h4\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new project directory with Git repository\r\n\u003cp\u003eIn the terminal type these commands:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir project-name\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd project-name\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit init\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit pair gh jb\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote: for solo work, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit pair\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand is unnecessary. Replace\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejb\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit pair\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand above with your own initials.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAfter adding files or making changes, track the changes.\r\n\u003cp\u003eUse this command to add all changes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add .\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUse this command to add a specific file (replace\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efilename.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the name of the file to add):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add filename.html\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eCommit the changes.\r\n\u003cp\u003eIn terminal (pair programming):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add a short, descriptive present-tense message here describing the changes made\"\u003c/span\u003e\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote: when working solo, use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein place of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit-pair-commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the above command.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCreate repository for project on GitHub at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/new\"\u003ehttps://github.com/new\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAdd the remote to the project.\u003c/p\u003e\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit remote add [remote name] [remote \u003cspan class=\"hljs-constant\"\u003eURL\u003c/span\u003e]\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[remote name]\u003c/code\u003e: Name of the remote. When working in pairs, it's a good idea to use your initials. When working solo, use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[remote URL]\u003c/code\u003e: The URL of the remote on GitHub.\u003c/li\u003e\r\n\u003cli\u003eFor example, this command adds a remote named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the repository at\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehttps://github.com/moringaschool/hello-world\u003c/em\u003e:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cpp\"\u003e$ git remote add gh https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003ePush the changes to GitHub.\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e [remote name] [branch name]\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[remote name]\u003c/code\u003e: Name of the remote. In these lessons, either your initials when pair programming, or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen working solo.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[branch name]\u003c/code\u003e: Name of the branch you're working on.\u003c/li\u003e\r\n\u003cli\u003eFor example, this command pushes to the remote named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e gh master\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eClone repository from GitHub.\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ git \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003e [remote URL]\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor example, this command clones the repository at\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehttps://github.com/moringaschool/hello-world\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003eclone\u003c/span\u003e https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eGit Commands Overview\u003c/h3\u003e\r\n\u003cp\u003eIn this reference, examples in brackets [xxx], should be entirely replaced by what is indicated (do not leave brackets).\u003c/p\u003e\r\n\u003ch4\u003eProject Setup\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git init\u003c/code\u003e: Initializes new local Git repository in the current directory.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git about\u003c/code\u003e: Verifies the current pair assignment.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git pair [initials1] [initials2]\u003c/code\u003e: Sets the pair for a repository.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eTracking Files\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git add .\u003c/code\u003e: Adds ALL files with changes to be committed.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git add [file]\u003c/code\u003e: Adds the named file to be committed.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git-pair-commit -m \"[message]\"\u003c/code\u003e: FOR PAIRS records all of the added files/changes permanently to the version history; message should describe the changes finishing the phrase \"This commit will…\".\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git commit -m \"[message]\"\u003c/code\u003e: FOR SOLO WORK records all of the staged files permanently to the version history; message should describe the changes finishing the phrase \"This commit will…\".\r\n\u003cul\u003e\r\n\u003cli\u003eExample:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git commit -m \"add submit functionality for the form\"\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eRemote Repositories\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git remote add [remote name] [remote URL]\u003c/code\u003e: Adds a remote with the name specified for the repository to the remote URL provided.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git remote -v\u003c/code\u003e: Shows the names and URLs for all of the remote repositories that the project's Git repository has stored.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git push [remote name] [branch name]\u003c/code\u003e: Copies the code to the remote repository from the local Git repository.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git clone [remote URL]\u003c/code\u003e: Copies the code and commit history from a remote repository to a local repository.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eReviewing Git Info\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git log\u003c/code\u003e: Lists commit history for the current branch.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git log --oneline\u003c/code\u003e: Lists a condensed format of the commit history for the current branch.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git status\u003c/code\u003e: Lists the files where changes have been made to be committed.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git about\u003c/code\u003e: Lists the information about the currently assigned pair's names.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCommon error messages\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e/usr/\u003cspan class=\"hljs-built_in\"\u003elocal\u003c/span\u003e/lib/ruby/gems/\u003cspan class=\"hljs-number\"\u003e2.4\u003c/span\u003e.\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e/gems/pivotal_git_scripts-\u003cspan class=\"hljs-number\"\u003e1.4\u003c/span\u003e.\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e/lib/pivotal_git_scripts/git_pair.rb:\u003cspan class=\"hljs-number\"\u003e167\u003c/span\u003e:\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e `block \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eread\u003c/span\u003e_author_info_from_config\u003cspan class=\"hljs-string\"\u003e': undefined method `[]'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e nil:NilClass (NoMethodError)\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis means that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit-pairs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003escripts is unable to run. Check the spacing and indentation of your\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003efile.\u003c/p\u003e","exportId":"resource-cheat-sheet-git-commands"},{"id":41,"title":"Monday: HyperText Markup Language(HTML)","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eHyperText Markup Language (HTML)\u003c/h1\u003e\r\n\u003cp\u003eMany people think that creating a web page involves really complicated code that requires considerable studying to understand. This is not necessarily the case. In the next lesson we will make a simple web page together. But before we do that, let's quickly go over what the World Wide Web is.\u003c/p\u003e\r\n\u003cp\u003eThe web is made up of mostly text files - like the ones you created to write your papers in high school - as well as some other files like images or videos. These files are stored on computers that are connected over networks. When you put a web site's address into your browser, you are really just requesting to see a particular file, or combination of files.\u003c/p\u003e\r\n\u003cp\u003eWe've already seen a basic HTML file with our Hello World and Goodbye web pages. Now, we're going to focus on the basics of HyperText Markup Language, or HTML, that we previously just copy and pasted.\u003c/p\u003e\r\n\u003cp\u003eIt looked a bit like this in Atom:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026lt;h1\u0026gt;HTML Lesson\u0026lt;/h1\u0026gt;\r\n\u0026lt;h2\u0026gt;For Moringa School\u0026lt;/h2\u0026gt;\r\n\r\n\u0026lt;p\u0026gt;The goal \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e lesson \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e to illustrate how simple HTML \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e to read \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e write \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e showing some text written \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e HTML \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e what it looks like \u003cspan class=\"hljs-keyword\"\u003ewhen\u003c/span\u003e it \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e displayed \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a web browser.\u0026lt;/p\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we open this file in our browser, it looks like this:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-07-hello_world_webpage.png\"\u003e\u003cbr\u003e\r\n\u003cp\u003e\u003cstrong\u003eHyperText\u003c/strong\u003e, or the \"HT\" of HTML, is just a fancy word for text that links to something else. The \"ML\" of HTML stands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emarkup language\u003c/strong\u003e. As we can see in the example above, the text in the HTML file is normal text that is\u003cspan\u003e \u003c/span\u003e\u003cem\u003emarked up\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith instructions written inside of these angle brackets\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e, known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etags\u003c/strong\u003e. The actual language of HTML is the instructions that we wrap around the text to format it and as we'll see, instructions for many other things like images, links, videos and more.\u003c/p\u003e\r\n \r\n \r\n\u003ch1\u003eIndentation and Spacing\u003c/h1\u003e\r\n\u003cp\u003eBefore we start writing any HTML, it's important that we go over some rules to make sure that we're writing our code properly.\u003c/p\u003e\r\n\u003cp\u003eWhen writing HTML (or any other programming language), well-written code follows consistent indentation and spacing patterns. In some languages, indentation and spacing are required for the code to function properly. In HTML, inconsistent indentation and spacing will not impact the functionality of the web page, but will cause your code to be difficult to read and understand.\u003c/p\u003e\r\n\u003cp\u003eConsider this example of HTML with poor indentation and spacing:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e   \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e  Page Title\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHeader\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e  Page content   \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAt first glance, it's difficult to see where elements begin and end, and what elements are nested within each other.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNested\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis another way of saying that the start tag and end tags of one element are inside of the start and end tags of another element.\u003c/p\u003e\r\n\u003cp\u003eHere's the same code with proper indentation and spacing:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePage content\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMuch better!\u003c/p\u003e\r\n\u003cp\u003eIn HTML, start tags and end tags on different lines are always left-aligned with one another. For example, when I see the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, I can scan vertically down to see its closing tag. It's clear that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare nested within\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e. The same goes for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag alignment.\u003c/p\u003e\r\n\u003cp\u003eWhen an element is nested inside another element, it needs to be indented two spaces from the opening tag. You can see in the above example that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis indented two spaces from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis indented two spaces from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWith a text editor like Atom, you can use the tab key to indent quickly. If you use the tab option, make sure tabs are set to two spaces. Some defaults are set to other amounts, such as four spaces, which is too much white space for HTML and is not standard practice.\u003c/p\u003e\r\n\u003cp\u003eTo check your settings in Atom, go to the menu bar and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAtom\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePreferences\u003c/em\u003e, then choose the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEditor\u003c/em\u003emenu in the sidebar and scroll down to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTab Length\u003c/em\u003e.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-08-tab_length.jpeg\"\u003e\r\n\u003cp\u003eAlso, notice that there is no space between the text content of an element and its tags. For example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;Header\u0026lt;/h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas no spaces between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the word\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHeader\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eRegardless of the language you use to write code, learn its conventions for indentation and spacing. Getting in good habits now is much easier than breaking bad habits later. Practice consistency so that your code is easily understood by other developers, as well as yourself.\u003c/p\u003e\r\n \r\n \r\n\u003ch1\u003ePractice: Indentation and Spacing\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue developing good indentation and spacing habits while simultaneously exploring the anatomy of a basic website, and practice cloning Git repositories. These skills will be used nonstop during your time at Moringa School.\u003c/p\u003e","exportId":"monday-hypertext-markup-language-html"},{"id":42,"title":"Assignment: Cookie Recipe","type":"Assignment","indent":0,"locked":false,"submissionTypes":null,"graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eNow it's time to practice using Git clone and fixing indentation and spacing. There is a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/iantheninja/cookie-recipe/blob/master/cookie-recipe.html\"\u003ecookie repository\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon GitHub that contains an HTML file with terrible indentation, spacing and HTML tag placement. It really needs your help.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git clone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto clone the repository onto your desktop.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBe sure you have changed into your\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emoringa-school-projects\u003c/strong\u003e\u003cspan\u003e folder \u003c/span\u003eor the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDocuments\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edirectory before cloning the repository, so that \u003cstrong\u003e\u003cspan style=\"color: #ff0000;\"\u003eyou do not accidentally clone the cookie repository inside of an existing project folder\u003c/span\u003e\u003c/strong\u003e.\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eAsk a peer if you're not sure if you are cloning the repository into the correct place.\u003c/li\u003e\r\n\u003cli\u003eCreate a new remote repository on your own GitHub for this project and link it to your local project folder by creating a remote (using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand).\u003c/li\u003e\r\n\u003cli\u003eGo through the HTML file and fix every indentation error. Commit the changes. THEN..\u003c/li\u003e\r\n\u003cli\u003eGo through the HTML file and fix every spacing error. Commit the changes. THEN ...\u003c/li\u003e\r\n\u003cli\u003eGo through the HTML file and fix every tag placement error. Commit the changes.\u003c/li\u003e\r\n\u003cli\u003eHave a TM come by and check your file for any errors that you have missed.\u003c/li\u003e\r\n\u003cli\u003ePush your changes to the remote you created in your own GitHub account.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eToday (and always!), focus on making sure that\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof your code is properly indented and spaced and your HTML tags are properly placed around the content they contain.\u003c/p\u003e","exportId":"i310cba275dc3f4aa8a3306bbbe380979"},{"id":43,"title":"Monday: Web Page","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eCreating a Web Page\u003c/h1\u003e\r\n\u003cp\u003eNow that we have an understanding of what HTML is, let's write some! In this lesson, we will create our first webpage. It will look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-09-my_first_webpage.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's create a project directory and initialize a Git repository for a new project called\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eAs a review, here are the steps:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eOpen Terminal.\u003c/li\u003e\r\n\u003cli\u003eMake a project directory called my-first-website in your Desktop directory:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mkdir my-first-website\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate into the project directory you just created:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd my-first-website\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eIf you type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein Terminal now, you should see that you are in your project directory at /Users/Guest/Desktop/my-first-webpage.\u003c/li\u003e\r\n\u003cli\u003eWithin your project directory, initialize your Git repository:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git init\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eAdd the authors of the project (\u003ccode\u003e$ git pair ___ ___\u003c/code\u003e)\r\n\u003cul\u003e\r\n\u003cli\u003eSkip this if you are working solo\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eCreate an empty file:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch my-first-webpage.html\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eOpen the project directory in Atom:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom .\u003c/code\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eatom .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eopens the entire directory you are currently in because the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erefers to current directory. If you only want to open the single file, you could instead type:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom my-first-webpage.html\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA note here about the name of the file. When you open a file on your computer, it knows what program to use to open the program by checking its\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eextension\u003c/strong\u003e. This is the group of letters that come after the name of the file, and indicates its file format. So, for example,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eexample.mp3\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill open in a program that plays music, because the \".mp3\" extension indicates an audio file.\u003c/p\u003e\r\n\u003cp\u003eWe gave our HTML document the file extension \".html\", which tells our computer that it is an HTML file, and that it shouldopen the file in a web browser.\u003c/p\u003e\r\n\u003cp\u003eThe name of the file can consist of any combination of letters, numbers or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(underscore) and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(hyphen) characters. It is a good practice to start the file name with a letter and use lowercase letters to avoid capitalization errors.\u003c/p\u003e\r\n\u003cp\u003eNow, with\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eopen in Atom, let's start by typing the following code (no more copying and pasting!):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs apache\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese two tags are the standard start and end tags on any page. They need to be there. HTML elements can contain text and other HTML elements inside them, and these two tags will contain the rest of the HTML that makes up the page.\u003c/p\u003e\r\n\u003cp\u003eNow let's add the rest of the page structure. Modify the page so that it looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe've created our first web page - let's commit it!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add initial page structure\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSo, what's going on here?\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag at the top tells the browser that this document contains HTML, and specifically that it contains the newest version of HTML, HTML5. (An example of a doctype for an older version of HTML is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u0026gt;\u003c/code\u003e) Without the the doctype declaration, your HTML code will likely still work, as HTML5 is the current standard. In the future, however, a new standard will override HTML5. Future browsers may assume you're using a different, newer standard, in which case your document will be interpreted incorrectly. To make sure your document is forever interpreted correctly, always include at the very beginning of your HTML documents.\u003c/p\u003e\r\n\u003cp\u003eHTML pages are made up of two distinct parts - the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehead\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epart, and the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebody\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epart. The head contains things that won't appear on your page. Many of the elements that go in the head are advanced stuff to tell search engines and browsers about the page, so the only one you need to know for now is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e. We will see more in upcoming lessons.\u003c/p\u003e\r\n\u003cp\u003eThe text inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etitle\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement is the text that appears at the very top of your browser window when you view the page. We decided to call this page \"My first webpage!\", but you can type whatever you want.\u003c/p\u003e\r\n\u003cp\u003eThe body section is the main part of your page. Everything between those two tags will be visible on your page. Let's type something there now.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  Hello, world!\r\n  Welcome to my first webpage!\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThat's it - we've written our first web page!\u003c/p\u003e\r\n\u003cp\u003eNow let's see what that looks like in a web browser, such as Google Chrome or Internet Explorer. You may have seen some of these before:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-10-web_browser_logos.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eRemember in the last lesson how we said that when you put a web site's address into your browser, you are just requesting to see a particular file? As it turns out, we can use web browsers to display files on our computers as well.\u003c/p\u003e\r\n\u003cp\u003eOpen the file location in your file explorer and double-click the icon for\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e. The page should open in a web browser and look like the image at the beginning of this lesson:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-09-my_first_webpage.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eOkay, that's not very fancy - it's just some text in the corner of the screen. Over the next lessons, we will learn how to use HTML (and more) to format our pages.\u003c/p\u003e\r\n \r\n \r\n\u003ch1\u003ePractice: Creating a Web Page\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: familiarize yourself with the basic building blocks of a webpage by creating a basic website.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWork through the above lesson with your partner to create your first web page. Remember to document your process in Git!\u003c/li\u003e\r\n\u003cli\u003eCreate a second web page in the same project folder, and this one will be all about your favorite things. Name it\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e. We can't do too much with the page right now, but go through the process of creating the page and give it an appropriate title all the same. You will be practicing your skills and adding to this page in upcoming lessons.The folder structure of\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould look like this:\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-18-hello_world_folder_structure_initial.png\"\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n \r\n \r\n\u003ch1\u003eBlock Elements\u003c/h1\u003e\r\n\u003cp\u003eWe're going to start adding content to our page by working with\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eblock elements\u003c/strong\u003e. These are HTML elements that start on their own line when displayed, like a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eblock\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon the page. In this lesson, we will learn how to add paragraphs, headers, and lists to our pages.\u003c/p\u003e\r\n\u003cp\u003eOpen up\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand modify it so that it looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe formatting instructions around the text are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etags\u003c/strong\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ep tag\u003c/strong\u003e. It means that everything that follows is a paragraph, until\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis reached. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eclosing tag\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eend tag\u003c/strong\u003eand indicates the end of the paragraph. Closing tags always match the header but have a backslash in front.\u003c/p\u003e\r\n\u003cp\u003eWhen we viewed this page without the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags in the last lesson, all of the text appeared on the same line, despite being written on different lines. When we load up the page now, the lines appear as separate paragraphs.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-12-webpage_screenshot_paragraphs.png\"\u003e\u003cbr\u003e\u003cbr\u003e\r\n\u003cp\u003eWe've just made a change to our code. Time to commit!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n  \u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add paragraph block elements to the page\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's try some more tags:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy First Webpage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from Moringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've added a main\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eheader\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(\u003ccode\u003e\u0026lt;h1\u0026gt;My First Webpage\u0026lt;/h1\u0026gt;\u003c/code\u003e) and a subheader (\u003ccode\u003e\u0026lt;h2\u0026gt;Written with a little guidance from Moringa School\u0026lt;/h2\u0026gt;\u003c/code\u003e). Here's how it looks in the browser:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-13-webpage_screenshot_headers.png\"\u003e\u003cbr\u003e\u003cbr\u003e\r\n\u003cp\u003eThere are six different levels of headers you can add using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethrough\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e. Like the paragraph tags, we have an opening tag that indicates where the header begins (\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e) and a closing tag that indicates where it ends (\u003ccode\u003e\u0026lt;/h1\u0026gt;\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eHTML ignores empty spaces and blank lines, which is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewhitespace\u003c/strong\u003e. That's why the extra line we might add between our headers and paragraphs doesn't do anything when the HTML is displayed. We could take it out, or make it three spaces, and it would look exactly the same in the browser.\u003c/p\u003e\r\n\u003cp\u003eLet's commit again!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n  \u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add header block elements\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a little bit more:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy First Webpage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from Moringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some things I'm going to learn about coding:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eCSS\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJavaScript\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eAnd a lot more!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we've added an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eunordered list\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e) with four\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elist items\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e). Here's the page with the unordered list:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-14-webpage_screenshot_unordered_list.png\"\u003e\u003cbr\u003e\u003cbr\u003e\r\n\u003cp\u003eIf we wanted to make an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eordered list\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat uses numbers and letters instead of bullets, we would use an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eol\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eCSS\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJavaScript\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eAnd beyond!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eol\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's the list now:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-15-webpage_screenshot_ordered_list.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice in the code how I've indented the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003es within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003es. This makes it much easier to read which tags are nested, and makes it easy to see where the closing tag goes when it's not on the same line. It's a good idea to write your closing tag just after you write your opening tag, and then go back and fill in whatever comes in the middle. This way, you won't forget to close a tag after opening it.\u003c/p\u003e\r\n\u003cp\u003eLet's commit again!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add list elements\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe're done with this page for the moment. Now is a good time to push the project to GitHub. As a reminder, here are the steps (which should be done by both you and your pair, since you each want a copy of the repository on your GitHub):\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erepository on GitHub\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git remote add [remote nickname] [remote url]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing [remote nickname] with your initials or another good nickname and [remote url] with the URL to the GitHub repository you just created)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git push [remote nickname] master\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing [remote nickname] with the same nickname you used when you added the remote link)\u003c/li\u003e\r\n\u003cli\u003eCheck on GitHub that your code uploaded successfully\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch1\u003ePractice: Block Elements\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice creating web pages, and start using block elements. Continue to track your process in Git, and pay special attention to indentation and spacing.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFirst, follow along with the lesson and add the block elements to the page. Then, open up the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand add some block elements. Some to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtaining the page title\u003c/li\u003e\r\n\u003cli\u003eAdd an unordered list (\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e) of your best friends\u003c/li\u003e\r\n\u003cli\u003eAdd an ordered list (\u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e) ranking your favorite foods\u003c/li\u003e\r\n\u003cli\u003eAdd a paragraph (\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e) about some of your favorite things\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003ePet Website\u003c/h3\u003e\r\n\u003cp\u003eNow it's your turn to start creating!\u003c/p\u003e\r\n\u003cp\u003eMake a homepage for your pet or a blog for a fictional animal. Get creative here! Maybe include information about their favorite toys and their favorite activities.\u003c/p\u003e\r\n\u003cp\u003eDon't forget to make a new project folder, commit regularly, and push to a remote repository on GitHub. Continue to pay close attention to indentation and closing all tags you open.\u003c/p\u003e\r\n\u003cp\u003eOf course, you're more than welcome to make web pages about anything you want - these are just suggestions.\u003c/p\u003e\r\n\u003cp\u003eHave a TM check the indentation and spacing of this project before you move on.\u003c/p\u003e\r\n \r\n \r\n\u003ch1\u003eInline Elements\u003c/h1\u003e\r\n\u003cp\u003eAll of the tags we learned about in the previous lessons are block elements, meaning that each element is displayed on a new line. In this lesson, we are going to look at elements that do not appear on their own line but share a line with other elements. These are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einline elements\u003c/strong\u003e. We will see how to add text emphasis, links, and images to our pages. At the end of this lesson,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill look like this:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-17-my_first_webpage_inline_elements.png\"\u003e\u003cbr\u003e\u003cbr\u003e\r\n\u003cp\u003eOpen up\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e. We're going to modify it to include an inline element:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003efirst web page\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag indicates that something is important. By default, it will make the text inside it bold (although we'll learn how to customize this soon), like the text below:\u003c/p\u003e\r\n\u003cp\u003eWelcome to my\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efirst web page\u003c/strong\u003e!\u003c/p\u003e\r\n\u003cp\u003eIf we want to emphasize something, we'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, which will italicize it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eem\u003c/span\u003e\u0026gt;\u003c/span\u003eMoringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eem\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how the HTML should render in the browser:\u003c/p\u003e\r\n\u003cp\u003eWritten with a little guidance from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringa School\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eLinks\u003c/h3\u003e\r\n\u003cp\u003eAnd now let's learn about one of the most useful HTML tags. Add the following line to the end of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eCheck out \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://moringaschool.com/\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMoringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e. It's a great place to learn web development skills!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eanchor tag\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e, creates a link to the address at the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehref\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute, or\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehypertext reference\u003c/em\u003e. An attribute is something that further defines what a tag does - in this case, it tells the link where to go.\u003c/p\u003e\r\n\u003cp\u003eHere's how the link should render in the browser:\u003c/p\u003e\r\n\u003cp\u003eCheck out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaschool.com/\"\u003eMoringa School\u003c/a\u003e. It's a great place to learn web development skills!\u003c/p\u003e\r\n\u003cp\u003eWe can also use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag to link from one document to another. For example, if you've been following along with the exercises and have\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein your project directory, you can link to it from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere is a link to my \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"favorite-things.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003efavorite things\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this link, instead of supplying a full path, we've provided a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003erelative path\u003c/strong\u003e. In other words, if a link doesn't start with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://\u003c/code\u003e, or a few other specific protocols you may come across), your web browser will look in the same folder as the HTML document folder for the file in the link.\u003c/p\u003e\r\n\u003cp\u003eThis brings up a pitfall you should be careful to avoid: if you write a link like this:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a href=\"www.moringaschool.com\"\u0026gt;link\u0026lt;/a\u0026gt;\u003c/code\u003e, it will look for a file named \"www.moringaschool.com\" in the current directory. If you're linking to another website, remember to start it with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eImages\u003c/h3\u003e\r\n\u003cp\u003eLet's learn about one more inline tag, which will allow us to add images to the page. Find an image of an elephant online, save it in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder with the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelephant.jpg\u003c/code\u003e, and then display it on our page like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"elephant.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A photo of an elephant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag is a little different than the other tags that we've seen: it's\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eself-closing\u003c/strong\u003e, meaning that it does not need a closing tag - in other words, it doesn't need one of these:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/img\u0026gt;\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc\u003c/code\u003eattribute tells the tag where to find the image, and is required.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute is typically a description of the image, and is optional. However, it's a good idea to include for a few reasons. First, if the image fails to load, the user can hover the mouse over the image's area and read the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etext for a description of the image. Second, visually impaired users often browse the web with the aid of screen reading software. When you include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute, the screen reading software can read the image's description out loud to the user.\u003c/p\u003e\r\n\u003cp\u003eTypically, websites will store their images in a separate folder from the rest of the HTML. Create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the main project directory and move the image there.\u003c/p\u003e\r\n\u003cp\u003eThe project directory should look like this:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-16-hello_world_folder_structure.png\"\u003e\u003cbr\u003e\u003cbr\u003e\r\n\u003cp\u003eNow let's update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag so that knows where to find the image:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"images/elephant.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A photo of an elephant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eimages/elephant.jpg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells the browser to look in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder in the current directory and then look for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eelephant.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eRemember to commit and push to GitHub after updating!\u003c/p\u003e\r\n \r\n \r\n\u003ch1\u003ePractice: Inline Elements\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice using common inline elements in webpages, and get comfortable with some of the most common ones.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003e\u003c/h2\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eAdd some inline elements to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e. Some to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd some images to represent your favorite things\u003c/li\u003e\r\n\u003cli\u003eList your favorite websites and provide links to them\u003c/li\u003e\r\n\u003cli\u003eAdd some\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags at appropriate places\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNext, update your pet's website to include images, links,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estrong\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eem\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIn Moringa School exercises, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFurther Exploration\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esection contains additional activities and exercises to explore if all of the coursework for the day has been completed. Make sure that you and your partner have completed the day's exercises and understand them well with time to spare before proceeding.\u003c/p\u003e\r\n\u003ch4\u003ePet Website\u003c/h4\u003e\r\n\u003cp\u003eAdd additional pages to your pet website. This could include pages for other pets, a play date calendar, a biography or 'about me' page, a blog, a contact page, or anything else you can think up!\u003c/p\u003e\r\n\u003ch4\u003eOther HTML Website\u003c/h4\u003e\r\n\u003cp\u003eCreate an additional HTML website for any topic of your choosing. This could include your friend's local business, your favorite vacation spot, or something dedicated to a hobby you and your partner share. Create multiple pages for the site.\u003c/p\u003e","exportId":"monday-web-page"},{"id":44,"title":"Discussion: Indentation and Spacing","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cem\u003eDiscuss the following:\u003c/em\u003e\u003c/p\u003e\n\u003ch2\u003e\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eWhy is indentation and spacing important? What benefit is there to ensuring that it is consistent?\u003c/li\u003e\n\u003cli\u003eWhen do we indent?\u003c/li\u003e\n\u003cli\u003eHow many spaces should make up one indent?\u003c/li\u003e\n\u003cli\u003eIf we wanted to change the little icon that displays next to the page title, would that code go in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e?\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-11-favicon.png\"\u003e\n\u003c/li\u003e\n\u003cli\u003eWhat is an opening tag? What is a closing tag?\u003c/li\u003e\n\u003cli\u003eWhat does it mean when an element is nested within another? Can you give an example of when we would use nested elements?\u003c/li\u003e\n\u003cli\u003eWhat is the difference between a block element and an inline element?\u003c/li\u003e\n\u003cli\u003eWhat does it mean to provide a relative path?\u003c/li\u003e\n\u003cli\u003eWhat is an HTML attribute? Can you give some examples of ones that we have seen so far?\u003c/li\u003e\n\u003c/ol\u003e","exportId":"icf39d29fd7924bb6b2ede5bfa34403f7"},{"id":201,"title":"Monday: Practice Creating a Web Page","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003ePractice: Creating a Web Page\u003c/h1\u003e\r\n\u003cp\u003eGoal: familiarize yourself with the basic building blocks of a webpage by creating a basic website.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003cp\u003eDiscuss the following questions with your partner:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWhat are the sections that make up every web page?\u003c/li\u003e\r\n\u003cli\u003eIf we want something to show up on the page when we open it in the browser, where would it go?\u003c/li\u003e\r\n\u003cli\u003eIf we wanted to change the little icon that displays next to the page title, would that code go in the\u003cspan\u003e \u003c/span\u003e\u003ccode data-redactor-tag=\"code\"\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor the\u003cspan\u003e \u003c/span\u003e\u003ccode data-redactor-tag=\"code\"\u003e\u0026lt;body\u0026gt;\u003c/code\u003e?\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-11-favicon.png\" data-verified=\"redactor\"\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWork through the above lesson with your partner to create your first web page. Remember to document your process on Git!\u003c/li\u003e\r\n\u003cli\u003eCreate a second web page in the same project folder, and this one will be all about your favorite things. Name it\u003cspan\u003e \u003c/span\u003e\u003cem data-redactor-tag=\"em\"\u003emy-favorite-things.html\u003c/em\u003e. We can't do too much with the page right now but go through the process of creating the page and give it an appropriate title all the same. You will be practicing your skills and add to this page in upcoming lessons.The folder structure of\u003cspan\u003e \u003c/span\u003e\u003cem data-redactor-tag=\"em\"\u003emy-first-website\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould look like this:\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-18-hello_world_folder_structure_initial.png\" data-verified=\"redactor\"\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e","exportId":"monday-practice-creating-a-web-page"},{"id":202,"title":"Monday: Block Elements","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eBlock Elements\u003c/h1\u003e\r\n\u003cp\u003eWe're going to start adding content to our page by working with block elements. These are HTML elements that start on their own line when displayed, like a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eblock\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon the page. In this lesson, we will learn how to add paragraphs, headers, and lists to our pages.\u003c/p\u003e\r\n\u003cp\u003eOpen up\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand modify it so that it looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe formatting instructions around the text are called tags. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a p tag. It means that everything that follows is a paragraph until\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis reached. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a closing tag or end tag indicates the end of the paragraph. Closing tags always match the header but have a backslash in front.\u003c/p\u003e\r\n\u003cp\u003eWhen we viewed this page without the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags in the last lesson, all of the text appeared on the same line, despite being written on different lines. When we load up the page now, the lines appear as separate paragraphs.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-12-webpage_screenshot_paragraphs.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eWe've just made a change to our code. Time to commit!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n  \u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add paragraph block elements to the page\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's try some more tags:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy First Webpage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from Moringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've added the main header (\u003ccode\u003e\u0026lt;h1\u0026gt;My First Webpage\u0026lt;/h1\u0026gt;\u003c/code\u003e) and a subheader (\u003ccode\u003e\u0026lt;h2\u0026gt;Written with a little guidance from Moringa School\u0026lt;/h2\u0026gt;\u003c/code\u003e). Here's how it looks in the browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-13-webpage_screenshot_headers.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eThere are six different levels of headers you can add using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethrough\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e. Like the paragraph tags, we have an opening tag that indicates where the header begins (\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e) and a closing tag that indicates where it ends (\u003ccode\u003e\u0026lt;/h1\u0026gt;\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eHTML ignores empty spaces and blank lines, which is called whitespace. That's why the extra line we might add between our headers and paragraphs doesn't do anything when the HTML is displayed. We could take it out, or make it three spaces, and it would look exactly the same in the browser.\u003c/p\u003e\r\n\u003cp\u003eLet's commit again!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n  \u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add header block elements\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a little bit more:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy First Webpage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from Moringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some things I'm going to learn about coding:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eCSS\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJavaScript\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eAnd a lot more!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we've added an unordered list (\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e) with four list items (\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e). Here's the page with the unordered list:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-14-webpage_screenshot_unordered_list.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eIf we wanted to make an ordered list that uses numbers and letters instead of bullets, we would use an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eol\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eCSS\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJavaScript\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eAnd beyond!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eol\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's the list now:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-15-webpage_screenshot_ordered_list.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice in the code how I've indented the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003es within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003es. This makes it much easier to read which tags are nested and makes it easy to see where the closing tag goes when it's not on the same line. It's a good idea to write your closing tag just after you write your opening tag, and then go back and fill in whatever comes in the middle. This way, you won't forget to close a tag after opening it.\u003c/p\u003e\r\n\u003cp\u003eLet's commit again!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add list elements\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe're done with this page for the moment. Now is a good time to push the project to GitHub. As a reminder, here are the steps (which should be done by both you and your pair, since you each want a copy of the repository on your GitHub):\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erepository on GitHub\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git remote add [remote nickname] [remote url]\u003c/code\u003e(replacing [remote nickname] with your initials or another good nickname and [remote url] with the URL to the GitHub repository you just created)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git push [remote nickname] master\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing [remote nickname] with the same nickname you used when you added the remote link)\u003c/li\u003e\r\n\u003cli\u003eCheck on GitHub that your code uploaded successfully\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-block-elements"},{"id":203,"title":"Monday: Practice: Block Elements","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003ePractice: Block Elements\u003c/h1\u003e\r\n\u003cp\u003eGoal: Practice creating web pages, and start using block elements. Continue to track your process in Git, and pay special attention to indentation and spacing.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003cp\u003eDiscuss the following questions with your partner:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhy is indentation and spacing important?\u003c/li\u003e\r\n\u003cli\u003eWhat is an opening tag? What is a closing tag?\u003c/li\u003e\r\n\u003cli\u003eWhat does it mean when an element is nested within another? Can you give an example of when we would use nested elements?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFirst, follow along with the lesson and add the block elements to the page. Then, open up the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand add some block elements. Some to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtaining the page title\u003c/li\u003e\r\n\u003cli\u003eAdd an unordered list (\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e) of your best friends\u003c/li\u003e\r\n\u003cli\u003eAdd an ordered list (\u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e) ranking your favorite foods\u003c/li\u003e\r\n\u003cli\u003eAdd a paragraph (\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e) about some of your favorite things\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003ePet Website\u003c/h3\u003e\r\n\u003cp\u003eNow it's your turn to start creating!\u003c/p\u003e\r\n\u003cp\u003eMake a homepage for your pet or a blog for a fictional animal. Get creative here! Maybe include information about their favorite toys and their favorite activities.\u003c/p\u003e\r\n\u003cp\u003eDon't forget to make a new project folder, commit regularly, and push to a remote repository on GitHub. Continue to pay close attention to indentation and closing all tags you open.\u003c/p\u003e\r\n\u003cp\u003eOf course, you're more than welcome to make web pages about anything you want - these are just suggestions.\u003c/p\u003e\r\n\u003cp\u003eHave a TM check the indentation and spacing of this project before you move on.\u003c/p\u003e","exportId":"monday-practice-block-elements"},{"id":204,"title":"Monday: Inline Elements","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eInline Elements\u003c/h1\u003e\r\n\u003cp\u003eAll of the tags we learned about in the previous lessons are block elements, meaning that each element is displayed on a new line. In this lesson, we are going to look at elements that do not appear on their own line but share a line with other elements. These are called inline elements. We will see how to add text emphasis, links, and images to our pages. At the end of this lesson,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-17-my_first_webpage_inline_elements.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eOpen up\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e. We're going to modify it to include an inline element:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003efirst web page\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag indicates that something is important. By default, it will make the text inside it bold (although we'll learn how to customize this soon), like the text below:\u003c/p\u003e\r\n\u003cp\u003eWelcome to my first web page!\u003c/p\u003e\r\n\u003cp\u003eIf we want to emphasize something, we'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, which will italicize it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eem\u003c/span\u003e\u0026gt;\u003c/span\u003eMoringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eem\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how the HTML should render in the browser:\u003c/p\u003e\r\n\u003cp\u003eWritten with a little guidance from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringa School\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eLinks\u003c/h3\u003e\r\n\u003cp\u003eAnd now let's learn about one of the most useful HTML tags. Add the following line to the end of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003eelement:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eCheck out \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://moringaschool.com/\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMoringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e. It's a great place to learn web development skills!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe anchor tag,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e, creates a link to the address at the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehref\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute, or\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehypertext reference\u003c/em\u003e. An attribute is something that further defines what a tag does - in this case, it tells the link where to go.\u003c/p\u003e\r\n\u003cp\u003eHere's how the link should render in the browser:\u003c/p\u003e\r\n\u003cp\u003eCheck out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaschool.com/\"\u003eMoringa School\u003c/a\u003e. It's a great place to learn web development skills!\u003c/p\u003e\r\n\u003cp\u003eWe can also use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag to link from one document to another. For example, if you've been following along with the exercises and have\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein your project directory, you can link to it from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere is a link to my \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"favorite-things.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003efavorite things\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this link, instead of supplying a full path, we've provided a relative path. In other words, if a link doesn't start with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://\u003c/code\u003e, or a few other specific protocols you may come across), your web browser will look in the same folder as the HTML document folder for the file in the link.\u003c/p\u003e\r\n\u003cp\u003eThis brings up a pitfall you should be careful to avoid: if you write a link like this:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u003ca href=\"https://moringaschool.teachable.com/courses/moringa-prep/lectures/www.moringaschool.com\"\u003elink\u003c/a\u003e\u003c/code\u003e, it will look for a file named \"www.moringaschool.com\" in the current directory. If you're linking to another website, remember to start it with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eImages\u003c/h3\u003e\r\n\u003cp\u003eLet's learn about one more inline tag, which will allow us to add images to the page. Find an image of an elephant online, save it in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder with the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelephant.jpg\u003c/code\u003e, and then display it on our page like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"elephant.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A photo of an elephant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag is a little different than the other tags that we've seen: it's self-closing, meaning that it does not need a closing tag - in other words, it doesn't need one of these:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/img\u0026gt;\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc\u003c/code\u003eattribute tells the tag where to find the image, and is required.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute is typically a description of the image, and is optional. However, it's a good idea to include for a few reasons. First, if the image fails to load, the user can hover the mouse over the image's area and read the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003etext for a description of the image. Second, visually impaired users often browse the web with the aid of screen reading software. When you include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute, the screen reading software can read the image's description out loud to the user.\u003c/p\u003e\r\n\u003cp\u003eTypically, websites will store their images in a separate folder from the rest of the HTML. Create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the main project directory and move the image there.\u003c/p\u003e\r\n\u003cp\u003eThe project directory should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-16-hello_world_folder_structure.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eNow let's update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag so that knows where to find the image:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"images/elephant.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A photo of an elephant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eimages/elephant.jpg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells the browser to look in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder in the current directory and then look for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eelephant.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eRemember to commit and push to GitHub after updating!\u003c/p\u003e","exportId":"monday-inline-elements"},{"id":205,"title":"Monday: Practice: Inline Elements","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003ePractice: Inline Elements\u003c/h1\u003e\r\n\u003cp\u003eGoal: Practice using common inline elements in webpages, and get comfortable with some of the most common ones.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following questions with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a block element and an inline element?\u003c/li\u003e\r\n\u003cli\u003eWhat does it mean to provide a relative path?\u003c/li\u003e\r\n\u003cli\u003eWhat is an HTML attribute? Can you give some examples of ones that we have seen so far?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eAdd some inline elements to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e. Some to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd some images to represent your favorite things\u003c/li\u003e\r\n\u003cli\u003eList your favorite websites and provide links to them\u003c/li\u003e\r\n\u003cli\u003eAdd some\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags at appropriate places\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNext, update your pet's website to include images, links,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estrong\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eem\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIn Moringa School exercises, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFurther Exploration\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esection contains additional activities and exercises to explore if all of the coursework for the day has been completed. Make sure that you and your partner have completed the day's exercises and understand them well with time to spare before proceeding.\u003c/p\u003e\r\n\u003ch4\u003ePet Website\u003c/h4\u003e\r\n\u003cp\u003eAdd additional pages to your pet website. This could include pages for other pets, a play date calendar, a biography or 'about me' page, a blog, a contact page, or anything else you can think up!\u003c/p\u003e\r\n\u003ch4\u003eOther HTML Website\u003c/h4\u003e\r\n\u003cp\u003eCreate an additional HTML website for any topic of your choosing. This could include your friend's local business, your favorite vacation spot, or something dedicated to a hobby you and your partner share. Create multiple pages for the site.\u003c/p\u003e","exportId":"monday-practice-inline-elements"},{"id":45,"title":"Tuesday: README ","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eEvery GitHub repository should have a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREADME.md\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile. It's often the first thing someone new to your project sees and is frequently the only source of documentation. The READMEs we will write will have the extension,\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e.md\u003c/code\u003e which stands for Markdown. Like HTML, Markdown is a language that uses annotations to format the display of text.\u003c/p\u003e\r\n\u003cp\u003eThe README file should be located in the top level of the project directory. GitHub knows to look for a file named \"README\" and display the contents on the repo's viewing page.\u003c/p\u003e\r\n\u003cp\u003eIt's worth taking the time to make your README look presentable because it will be the first thing anyone will see in your repositories. You want to make a solid first impression - if people see that you have a messy or incomplete README, they will assume that your code is also messy or incomplete. You want to make it as easy as possible for your users (such as potential employers) to check out your code. Writing a strong README is a good way to practice - and showcase - your empathy as a developer.\u003c/p\u003e\r\n\u003cp\u003eCheck out the following examples of good READMEs:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://github.com/iharsh234/WebApp\"\u003eWebApp\u003c/a\u003e: description, live demo, screenshots, usage and collaboration instructions, technologies used, to do list, collaborators, license\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://github.com/sindresorhus/pageres\"\u003ePageRes\u003c/a\u003e: logo, description, installation instructions, usage instructions, API documentation, links to related repos, live demo, collaborators, license\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://github.com/IgorAntun/node-chat\"\u003eNode.JS Chat\u003c/a\u003e: description, screenshot, live demo, features, setup instructions, usage instructions, license\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAs you can see from these examples, READMEs vary widely from one repository to the next, depending on the project needs. This is why it's important that your README is well-organized and easy to read. Moringa School recommends including as a minimum the following sections:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eApplication name\u003c/li\u003e\r\n\u003cli\u003eNames of contributors\u003c/li\u003e\r\n\u003cli\u003eDescription of the project's purpose\u003c/li\u003e\r\n\u003cli\u003eComplete setup/installation instructions\u003c/li\u003e\r\n\u003cli\u003eLicense information with a copyright and date\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAdditional sections to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLive demo\u003c/li\u003e\r\n\u003cli\u003eInstructions on running tests\u003c/li\u003e\r\n\u003cli\u003eTechnologies used\u003c/li\u003e\r\n\u003cli\u003eFuture features or to do list\u003c/li\u003e\r\n\u003cli\u003eKnown bugs\u003c/li\u003e\r\n\u003cli\u003eContact information\u003c/li\u003e\r\n\u003cli\u003eSupport or contribution instructions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBelow is a README sample template written in Markdown. Feel free to copy and paste the text below into a new file and replace the relevant parts in curly brackets with information about your project. It includes sections from above, but you can modify this in any way to suit your project's needs or to make your README look the way you want.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e# {Application Name}\r\n#### {Brief description of application}, {Date of current version}\r\n#### By **{List of contributors}**\r\n## Description\r\n{This is a detailed description of your application, including its purpose and usage.  Give as much detail as needed to \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexplain\u003c/span\u003e what the application does, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e other information you want users \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e other developers \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e have. }\r\n## Setup/Installation Requirements\r\n* This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a great place\r\n* \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e list setup instructions\r\n* \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a simple\r\n* easy-\u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e-understand\r\n* \u003cspan class=\"hljs-keyword\"\u003eformat\u003c/span\u003e\r\n{Leave nothing \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e chance! You want it \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be easy \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e potential users, employers \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e collaborators \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e run your app. \u003cspan class=\"hljs-keyword\"\u003eDo\u003c/span\u003e I need \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e run a \u003cspan class=\"hljs-keyword\"\u003eserver\u003c/span\u003e? \u003cspan class=\"hljs-keyword\"\u003eDo\u003c/span\u003e I need \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e dependencies? How should I \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e up my \u003cspan class=\"hljs-keyword\"\u003edatabases\u003c/span\u003e? \u003cspan class=\"hljs-keyword\"\u003eIs\u003c/span\u003e there other code this app depends \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e?}\r\n## Known Bugs\r\n{\u003cspan class=\"hljs-keyword\"\u003eAre\u003c/span\u003e there issues that have \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e yet been resolved that you want \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e let users know you know? Outline \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e issues that would impact \u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e your application. \u003cspan class=\"hljs-keyword\"\u003eShare\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e workarounds that \u003cspan class=\"hljs-keyword\"\u003eare\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e place. }\r\n## Technologies Used\r\n{Tell me about the languages \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e tools you used \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecreate\u003c/span\u003e this app. Assume that I know you probably used HTML \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e CSS. \u003cspan class=\"hljs-keyword\"\u003eIf\u003c/span\u003e you did something really cool \u003cspan class=\"hljs-keyword\"\u003eusing\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eonly\u003c/span\u003e HTML, point that out.}\r\n## Support \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e contact details\r\n{Let people know what \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e they run \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e issues \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e have questions, ideas \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e concerns.  Encourage them \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e contact you \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e make a contribution \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e the code.}\r\n### License\r\n*{Determine the license under which this application can be used.  See below \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e more details \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e licensing.}*\r\nCopyright (c) {\u003cspan class=\"hljs-keyword\"\u003eyear\u003c/span\u003e} **{List \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econtributors\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e company name}**\r\n  \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eLicensing\u003c/h2\u003e\r\n\u003cp\u003eAn open source license details how others can use your code. Adding a license to your repository is a good practice because it is how you state your intent.\u003c/p\u003e\r\n\u003cp\u003eMIT and GPL are the most common licenses. An MIT license means your code is free to use by anyone and you are not liable (Rails and jQuery use an MIT license). GPL also indicates free usage of the code but when used, the resulting work MUST be open source (Linux, Git and Wordpress use GPL).\u003c/p\u003e\r\n\u003cp\u003eFor additional details on choosing a license for your code, visit GitHub's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://choosealicense.com/\"\u003eChoose a License site\u003c/a\u003e.\u003c/p\u003e","exportId":"tuesday-readme"},{"id":46,"title":"Tuesday: README practice","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Add some READMEs to your projects and understand what goes into them.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat are some features that make up a good README?\u003c/li\u003e\r\n\u003cli\u003eHow is Markdown similar to HTML? How is it different?\u003c/li\u003e\r\n\u003cli\u003eWhat is an open source license? Why is it a good idea to include one?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eAdd a README to one of each of you and your partner's projects.\u003c/p\u003e","exportId":"tuesday-readme-practice"},{"id":47,"title":"Tuesday: Introduction to CSS","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eIntroduction to CSS\u003c/h1\u003e\r\n\u003cp\u003eSo far, the sites we've made have not been very exciting. In this lesson, we're going learn how to change that with CSS, which stands for Cascading Style Sheets. CSS is a language that lets us add style to our webpages. It lets us separate the page content and structure from the style and appearance.The\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecascading\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the name refers to the way that styles are applied to an element - we'll get more into that later.\u003c/p\u003e\r\n\u003cp\u003eLet's go back to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eproject. Open up the project in Atom and add a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the main project directory. Create a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside of the folder. Your directory structure should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-01-folder_structure_css.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eFirst, we need to tell the HTML document to use this CSS. The reference typically goes in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003esection like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement links the HTML and CSS files together. It must be placed within the head of the HTML file. It is a self-closing tag and requires the following three attributes:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003ehref\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- like the anchor element, the value of this attribute must be the address, or path, to the CSS file.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003etype\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- this attribute describes the type of document that you are linking to (in this * case, a CSS file). The value of this attribute should be set to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etext/css\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003erel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- this attribute describes the relationship between the HTML file and the CSS file. Because you are linking to a stylesheet, the value should be set to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estylesheet\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow let's add some CSS to\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto see what this looks like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSave the file and refresh the page, and see that the header is now blue.\u003c/p\u003e\r\n\u003cp\u003eWhat we just wrote is known as a CSS rule. It is made of two parts: the selector and the declaration. In the above example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the selector, or the HTML tag to which the rule is applied. Everything inside of the curly braces is the declaration, which defines of the styles to be applied to the selector. The declaration is made of two parts: the property (\u003ccode\u003ecolor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this case) and the value (\u003ccode\u003eblue\u003c/code\u003e), and they are separated by a colon.\u003c/p\u003e\r\n\u003cp\u003eA declaration can contain more than one property. Each property is separated by a semicolon:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice the indentation and spacing here: properties are indented two spaces from the selector.\u003c/p\u003e\r\n\u003cp\u003eLet's add some more rules:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: green\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-family\u003c/span\u003e: sans-serif\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eline-height\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e40px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGo ahead and refresh the page and see the changes. All these rules are pretty straightforward.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, we've set the color to green, the font style to italic, and the text alignment to the center of the page.\u003c/li\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, we've set the font family to _sans serif), which is a type of font.\u003c/li\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eul\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, we've set the line height to 40 pixels -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epx\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis short for \"pixels\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIt's worth noting here that named colors, such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e, are not commonly used. More likely, you will see three- or six-digit hexadecimal codes to define color, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: \u003cspan class=\"hljs-hexcolor\"\u003e#00f\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eor this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n\u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: \u003cspan class=\"hljs-hexcolor\"\u003e#0000ff\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBoth of these are equivalent to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue\u003c/code\u003e. There are numerous tools online for picking colors and hex codes, such as\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://htmlcolorcodes.com/\"\u003ehtmlcolorcodes.com\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou may be wondering why we made\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eitalic using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-style\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty instead of using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003etags like we did in a previous lesson. There are a few reasons for this. First, we can modify the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag just like any other HTML tag.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eemphasize\u003c/em\u003e, and eventually, we may decide that we want to emphasize text by bolding it instead of italicizing it, which we may not want for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003es. Second, one of the advantages of CSS is that we can change style in many places at the same time. What happens when we add another\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e? We have to add\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003es again so that it has the same formatting. Say we want our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003es to be bold as well. Now we have to add\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003etags We end up repeating ourselves with many opportunities to miss something. By using CSS, we only need to change the style in one place, and every\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon every page that uses that CSS file will be updated.\u003c/p\u003e\r\n\u003cp\u003eLet's take a second to reflect on this last point. It's in the nature of websites that even after they're built, they are bound to change: there will be additions, deletions, overhauls, and more. CSS gives us some powerful tools to change what we've built. Remember: good code is code that is easy to change.\u003c/p\u003e\r\n\u003cp\u003eTo see the power of using CSS, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.csszengarden.com/\"\u003eCSS Zen Garden\u003c/a\u003e. Clicking one of the links on the right side of the page will apply a different stylesheet to the same HTML. The page is totally transformed without making any changes in the HTML. Your goal in writing CSS should be to allow to Zen Garden-like changes to your styles.\u003c/p\u003e","exportId":"tuesday-introduction-to-css"},{"id":206,"title":"Tuesday: Debugging HTML and CSS","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eLearning to debug your code is an essential skill as a developer. There are many debugging techniques out there, and I'm going to introduce you to a few techniques you will use all the time for HTML and CSS.\u003c/p\u003e\r\n\u003cp\u003eThese instructions are for Google Chrome. Both the JavaScript Console and Inspect panel discussed below are part of Chrome Developer Tools, or DevTools.\u003c/p\u003e\r\n\u003ch2\u003eJavaScript Console\u003c/h2\u003e\r\n\u003cp\u003eTo access DevTools, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMore Tools\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDeveloper Tools\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom Chrome's main menu (the three dots in the top right corner of the window). As a shortcut, you can also press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eShift\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJ\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Linux or Windows) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOption\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJ\u003c/em\u003e(Mac). You may also have to click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConsole\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the top of the window that pops open.\u003c/p\u003e\r\n\u003cp\u003eThis window is called the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJavaScript Console\u003c/em\u003e. Although we're not working with JavaScript, this is also where errors in the web page are logged. If you see something that looks like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFailed to load resource file:///Users/moringa/css/styles.css\u003c/code\u003e, Chrome is telling you that it was instructed to look for your CSS file at\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/moringa/css/styles.css\u003c/em\u003e, but the file wasn't there. In other words, you either gave the wrong path to the file, or you put the file in the wrong place.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-02-failed_to_load_resource.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eInspect Element\u003c/h2\u003e\r\n\u003cp\u003eAnother very useful tool in debugging web pages is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect Element\u003c/em\u003e. To access this tool, open any webpage and right-click a page element and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect\u003c/em\u003e. As a shortcut, you can also press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eShift\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eI\u003c/em\u003e(Linux or Windows) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOpt\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eI\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Mac). You may click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eElements\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the top of the DevTools window. A window will pop open revealing the source code for the page, with the selected element highlighted in blue.\u003c/p\u003e\r\n\u003cp\u003eWith an element selected, you can see CSS in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStyles\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab. This makes it easy to see what rules have been applied, including those that have been overridden due to specificity or order of other rules (these will be crossed out). Here is what the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStyles\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab looks like with overridden rules:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-04-overridden_rules.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eYou can also uncheck a rule to disable it, or double-click a rule to edit it and see the change live. You can even add new rules and see what they would do live.\u003c/p\u003e\r\n\u003cp\u003eYou won't have much space to work with\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect Element\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eat the bottom of your screen, so click the three vertical dots on the top right-hand side of the inspect element pane near the \"X\" (which you'd click to close the pane). Now, you'll see an option to move the pane to the right-hand side of your browser (dock to right), move the pane to the bottom of the browser window (dock to bottom) or to open the pane in a completely separate window (undock into separate window).\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-03-inspect_element_dock_options.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eInspecting a web page is a fantastic way to see for yourself what makes a website tick. Try inspecting elements on this page to see what CSS rules are being applied.\u003c/p\u003e","exportId":"tuesday-debugging-html-and-css"},{"id":207,"title":"Tuesday: Practice: CSS","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003ePractice: CSS\u003c/h1\u003e\r\n\u003cp\u003eGoal: Start getting familiar with CSS basics. Be able to use CSS styling on HTML elements.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow does HTML know about CSS we have added in a separate stylesheet?\u003c/li\u003e\r\n\u003cli\u003eHow do we add a style to an HTML element?\u003c/li\u003e\r\n\u003cli\u003eName four CSS rules.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eWork through the lesson to add CSS styling to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eThen, add a reference to\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e. Refresh the page and notice that the styles from\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eare applied to the page.\u003c/p\u003e\r\n\u003cp\u003eAdd more custom styles to the page. Use the following styles:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolor\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebackground-color\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-size\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-style\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-family\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eline-height\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdd a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag somewhere on the page and customize those with CSS so that using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003emakes text italic and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emakes text bold.\u003c/p\u003e\r\n\u003cp\u003eMake a new stylesheet with different styles and add it to both pages. Give it a different name than\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand make sure you can add it to your page correctly.\u003c/p\u003e","exportId":"tuesday-practice-css"},{"id":208,"title":"Tuesday: GitHub Pages","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eWe've made some web pages that we can view on our personal computers. Now let's learn how we can host our sites online. There are a number of ways to do this, and GitHub offers an option that is free and one of the easiest out there. GitHub Pages lets us turn a GitHub repository into a website with a URL that we can access from any browser. Pretty neat!\u003c/p\u003e\r\n\u003cp\u003eIn this lesson, we will walk through the steps to get a website from an existing repository hosted. I am going to use\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the previous lesson on Creating a Web Page to demonstrate. Feel free to use your version of this project, or a different project that you would like to see online. The directions will be the same, and GitHub does not limit the number of sites that you can host online.\u003c/p\u003e\r\n\u003cp\u003eBefore we get started, let's go over a typical project structure for any website. In previous lessons, we put our images and CSS stylesheets in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolders. It's pretty common to organize files in this way.\u003c/p\u003e\r\n\u003cp\u003eSo far, we have been giving our pages descriptive file names, such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e. Another convention is to name the HTML file for the main page for a website\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e. This naming convention is common practice in the industry. Additionally, many hosting services, including GitHub Pages, require this convention to display content. Let's change the name of\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enow. GitHub won't know to display it as the main page if we don't.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ mv \u003cspan class=\"hljs-keyword\"\u003emy\u003c/span\u003e-first-website.html \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e.html\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSince we have been using Git to track our project, let’s commit the change. Be sure to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit-pair-commit\u003c/code\u003ecommand if you are working with a partner in class, and use your remote name instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add .\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Change name of favorite-things.html file to index.html.\"\u003c/span\u003e\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit push origin master\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne of the most important features when using Git or any other version control system is the ability to create a branch. We will go more into detail about what exactly a branch is and how it works in an upcoming lesson, but for now, you can think of it like an exact copy of the code at the point when the branch is created. Each branch exists independent of each other, so once you create a branch, any changes you make to one branch won’t affect the code in another branch. GitHub Pages looks for content to display online in a branch called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e. Let's create that branch now. Run these commands in the Terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch gh-pages\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to create a new branch called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e. Again, we will go more into detail about branching in an upcoming lesson. For now, what matters is that we have a branch called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e, and it is a copy of the code in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch. Next, we push the code to GitHub:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin gh-pages\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAgain, use your own remote name in place of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e. Notice that the last argument in this command is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e, which means that we are pushing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003cp\u003eOnce the project is pushed to GitHub, you will be able to view it online at\u003cspan\u003e \u003c/span\u003e\u003cem\u003egithub-username.github.io/repository-name\u003c/em\u003e. For example, if our GitHub username was\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-student\u003c/em\u003e, and our repository was named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e, we would navigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-student.github.io/hello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the browser.\u003c/p\u003e\r\n\u003cp\u003eOne last thing to note here. For now, if you want to continue making changes to a project, you should edit the code in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch, not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e. Then, when you want to update the live site on\u003cspan\u003e \u003c/span\u003e\u003cem\u003egithub.io\u003c/em\u003e, delete the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch and then create it again using the steps above.\u003c/p\u003e\r\n\u003cp\u003eTo delete a branch, first click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBranches\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the top of the repository's main page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-05-github_branch_tab.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThis will take you to a page where all of the repository's branches are listed. Delete a branch by clicking on the red trash can symbol in the branch's row on the right side of the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-06-github_branch_delete.png\"\u003e\u003c/p\u003e","exportId":"tuesday-github-pages"},{"id":209,"title":"Tuesday:   Practice: GitHub Pages","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Walk through the process of creating and publishing to a GitHub pages page by publishing one of our previous projects.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following questions with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWe need to create something called a branch to publish our content on Github pages. We'll learn more about branches later, but for now, what is the specific name we must call the branch in order for Github pages to work correctly?\u003c/li\u003e\r\n\u003cli\u003eWhat is the easiest way to add new changes to a Github pages site after it's already been published?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003ePublish to GitHub Pages\u003c/h3\u003e\r\n\u003cp\u003eNow that you have learned how to host your web pages on GitHub Pages, go ahead and make your pet homepage display on GitHub Pages as well. Make sure that each project properly displays for you and your partner. If it isn't working, make sure you have confirmed your email address with GitHub.\u003c/p\u003e","exportId":"tuesday-practice-github-pages"},{"id":210,"title":"Tuesday: Git Branching","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eSo far we've learned what Git and GitHub are, how to set up a project, track changes, push code to GitHub, clone projects back down from GitHub into a local Git repository, and even publish websites on GitHub Pages.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll dive deeper into Git by exploring something called branching. We were introduced to branching briefly when we learned about GitHub pages. In this lesson, we'll learn more about what it is, how it works, what benefits it offers, and how to create and maintain branches in our own projects.\u003c/p\u003e\r\n\u003cp\u003eTo do this, we'll walk through creating an example project in the next two lessons. Together, we'll create and merge branches in this example project. Then, in an upcoming exercise you'll have the opportunity to work with branches on your own project with a partner.\u003c/p\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003cp\u003eIn Git, branching is the act of creating multiple copies of similar code in the same repository. There are many reasons developers do this. Here are a few of the most common:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMultiple branches allow a team of developers to work together without \"stepping on each others' feet\", so to speak. If a team was all working on the same files at the same time, things could get messy very quickly. Branches allow each developer their own copy of the project to work on. When part of the project is done, the team can merge multiple branches together into a completed final product.\u003c/li\u003e\r\n\u003cli\u003eBranching also allows us to experiment with changes without risking our final product. We can use branching to create a copy of our code separate from our final version to experiment with new features and code. If this new code causes any bugs, we can rest assured knowing our original code is still safe!\u003c/li\u003e\r\n\u003cli\u003eBranching allows us to pursue multiple options at once. Not sure which approach to a problem is preferable? With branching, you can always create multiple copies of your project, try implementing different code in each, and see which result is preferable.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eMaster Branch\u003c/h2\u003e\r\n\u003cp\u003eYou may be surprised to learn that you've been interacting with branches since the beginning of the course! At this point in the curriculum, you've most likely pushed several projects to GitHub already, and published at least one on GitHub Pages. Your current GitHub repositories should look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-07-github_repo_main.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice the dropdown menu on the left side labeled\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBranch\u003c/em\u003e. If we click this dropdown we see it contains one entry:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(if you've published a project to GitHub pages it will also contain a branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-08-github_branch_dropdown.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWhen you learned how to push a project to a remote GitHub repo yesterday, you pushed your local Git repositories to online GitHub repositories using a command like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e gh master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e(The initials\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the command above are just an example; your own initials would be placed here.)\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eportion of this command instructs Git to push the current master copy of your local repository to the remote repository under the nickname\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eal\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eBut what does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emean? Well, projects tracked in Git and GitHub may have multiple branches. The term master specifies that code should be pushed to the master branch on GitHub. Remember, we saw there was a branch named master in the dropdown menu on GitHub.\u003c/p\u003e\r\n\u003cp\u003eA branch is just another copy or version of the project's main code. Both Git and GitHub repositories may have multiple branches at once. There is always at least one branch in a project:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eMaster is the name of the default branch. If you don't create or navigate between branches in your project, you will have one branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, and you will be located in it by default. When you have multiple branches in a project, the master branch is like the \"final draft\".\u003c/p\u003e\r\n\u003cp\u003eBranches that are not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare often referred to as feature branches, because they allow developers to experiment with new features before integrating them into the \"final draft\"\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, you probably published a project to GitHub pages with a command like this in a previous lesson:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin gh-pages\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMuch like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis also a branch name. While master is responsible for containing the final product, gh-pages is responsible for publishing content to GitHub's special GitHub Pages tool.\u003c/p\u003e\r\n\u003ch2\u003eExample Project\u003c/h2\u003e\r\n\u003cp\u003eLet's walk through a basic example of branching together. We'll craft a small website. Then, we'll create multiple branches to experiment with different CSS styles. We'll compare the styles, choose which we like best, and integrate the favored styles into our \"final draft\" (that is, our master branch). You and your partner should begin following along at this time.\u003c/p\u003e\r\n\u003ch3\u003eProject Setup\u003c/h3\u003e\r\n\u003cp\u003eFirst, we'll set up our basic site. Everything in this section should be review from yesterday.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eFile This lesson assumes you have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile located in your home directory, as described in this lesson. As a reminder, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould look something like this:\u003c/p\u003e\r\n\u003cp\u003e.pairs\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-attribute\"\u003epairs\u003c/span\u003e:\r\n  \u003cspan class=\"hljs-attribute\"\u003egh\u003c/span\u003e: Grace Hopper\r\n  \u003cspan class=\"hljs-attribute\"\u003ejb\u003c/span\u003e: James Bond\r\n\u003cspan class=\"hljs-attribute\"\u003eemail\u003c/span\u003e:\r\n  \u003cspan class=\"hljs-attribute\"\u003egh\u003c/span\u003e: gracehopper\u003cspan class=\"hljs-property\"\u003e@gmail\u003c/span\u003e.com\r\n  \u003cspan class=\"hljs-attribute\"\u003ejb\u003c/span\u003e: bond\u003cspan class=\"hljs-property\"\u003e@jamesbond\u003c/span\u003e.com\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou should already have a .pairs file containing your and your partner's information. If you do not, create one at this time.\u003c/p\u003e\r\n\u003ch3\u003eProject Directory\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create a new project directory in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. Remember, whenever we start a new project we must create a new directory for it to reside in. First, we'll navigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e Documents\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll create a new directory called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-test-project\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-keyword\"\u003emkdir\u003c/span\u003e branching-test-project\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can see our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-test-project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory. Next, use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to navigate to the new project folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e branching-test-project\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRemember, if you're ever unsure of your location in the command line you can run the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand.\u003c/p\u003e\r\n\u003ch3\u003eGit Initialization\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll initialize our Git repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit init\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd configure it to use the information in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit pair gh jb\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the command above, replace\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejb\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith your and your partner's initials, as listed in your\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003eHTML File\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create an HTML file for our website's code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch branching-website.html\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll open our project directory in Atom:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003eatom .\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd add the following code to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cp\u003ebranching-website.html\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching Practice Site \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e A website to practice branching with Git. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e This page has been created in order to practice branching with Git and GitHub. By creating branches, we can work on different versions of the same code in the same repository simultaneously!  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eCommitting Changes\u003c/h3\u003e\r\n\u003cp\u003eOnce this code is in place, we can make our first commit. First, we'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto see there are new, uncommitted changes in our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git status\r\nOn branch master\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\nUntracked files:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e include \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e what will be committed)\r\n    branching-website.html\r\nnothing added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e but untracked files present (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e track)\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto add our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to Git so it will track this file's changes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add branching-website.html\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to see that our file is now being tracked, but has not yet been committed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git status\r\nOn branch master\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\nChanges \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be committed:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git rm --cached \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e unstage)\r\n    new file:   branching-website.html\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's save our new HTML to the permanent history of the project by committing it. Since we're working with a partner, we'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit-pair-commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to do this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Add initial HTML file with explanation of branching practice site.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run $ git log we can see a new commit has been added to the history of our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Ada Lovelace \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e Enrique de la Fuente \u0026lt;ada@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2016\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdding Styles with CSS\u003c/h2\u003e\r\n\u003cp\u003eGreat! Now, earlier today you learned about CSS. Before we begin branching, let's create a basic CSS stylesheet for our example project. We'll make a folder called css in our existing project directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-keyword\"\u003emkdir\u003c/span\u003e css\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll create a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewithin our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch css/styles.css\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur project structure should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-09-project_structure_branching.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNext, let's tell our HTML document to use this new file for its CSS. We will include a link to the new CSS file in the\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003etags of our \u003c/span\u003e\u003cem\u003ebranching-website.html file\u003c/em\u003e\u003cspan\u003e, like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003ebranching-website.html\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching Practice Site \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e A website to practice branching with Git. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e This page has been created in order to practice branching with Git and GitHub. By creating branches, we can work on different versions of the same code in the same repository simultaneously!  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add these new changes to our Git repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add .\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd commit them to the history of our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Create stylesheet, link in head of website.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll add a basic CSS rule to our stylesheet:\u003c/p\u003e\r\n\u003cp\u003estyles.css\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we open _branching-website.html_ file in our browser, we should see that the text in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003etags is blue:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-10-test_site_blue_headers.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's add and commit this new CSS rule to our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Add CSS rule to make H1 headers blue.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe will see we now have 3 commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that our basic website is set up, we can use it to learn about branching in the next section. Nice work!\u003c/p\u003e\r\n\u003ch3\u003eViewing a Project's Branches\u003c/h3\u003e\r\n\u003cp\u003eEverything we've done thus far should be review. Now, let's explore the new concept at hand: Branching. First we'll run the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand displays what branches are currently in our project. It also denotes which branch we're currently viewing with an asterisk\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*\u003c/code\u003e. After we execute this command, we should see this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-bullet\"\u003e* \u003c/span\u003emaster\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis informs us that there is only one branch:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. And, we know we're currently located in that branch because there is an asterisk next to it. Remember, master is the default branch. If we do not create any branches, or move between any branches, we will be on master.\u003c/p\u003e\r\n\u003ch3\u003eCreating a New Branch\u003c/h3\u003e\r\n\u003cp\u003eLet's pretend we're unsure how to style our site. We want to test a couple different stylistic approaches, and see which looks best. To do this, we'll create several versions of our project with branches. We'll implement different styles in each branch.\u003c/p\u003e\r\n\u003cp\u003eWe can create a new branch by running the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand and including the name of the new branch after it, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis creates a new branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e. Branch names should be short and meaningful, and describe the reason for the branch. In our case, this branch will contain styles that use the color blue throughout.\u003c/p\u003e\r\n\u003cp\u003e(Note that there are only two exceptions to these naming rules: The master branch will always be named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, and GitHub pages requires branches be named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein order to publish them using the GitHub pages tool.)\u003c/p\u003e\r\n\u003ch3\u003eNavigating Between Branches\u003c/h3\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain, we can see our project now contains two branches:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice the asterisk is still next to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. We created a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch, but we're still located on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. We can switch branches like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git checkout \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git checkout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand navigates to the specified branch. We can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to confirm we've successfully entered the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n* \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n  master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe asterisk is now next to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e, so we know we've successfully navigated to that branch. Now, let's look at our project in Atom. Despite being located in our new branch, everything should look the exact same.\u003c/p\u003e\r\n\u003cp\u003eWhen you create a branch, the new branch is \"branched off\" from the branch you are located in when the command to create a new branch is executed. This means the new branch will contain all code and commits from the branch it was branched off from. In our case, since we were located in master when we created\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtains all code and commits that master contained at the time of the new branch's creation.\u003c/p\u003e\r\n\u003cp\u003eWe can confirm this by running\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e. We should see our new branch contains the same commits we made on master:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eWorking on a Branch\u003c/h3\u003e\r\n\u003cp\u003eWe now have a separate, isolated version of our project to experiment with. We can safely test code in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithout risking the integrity of code in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. We can change, add, and commit whatever we'd like in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand master will remain completely unaffected. Let's add more CSS to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estylesheet:\u003c/p\u003e\r\n\u003cp\u003estyles.css\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: teal\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: gray\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: skyblue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we refresh our page in the browser, we can see these new styles:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-11-test_site_blue_theme.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs always, we'll add these changes to our Git repository and commit them:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Add styles to h1, h2, p, and body to fit blue theme.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eSeparation of Commits Between Branches\u003c/h3\u003e\r\n\u003cp\u003eLet's run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to see a summary of our commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e268363\u003c/span\u003eae7b81a7ee91540d93f82e3f9285c575dd\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e38\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit blue theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch now contains the commits it inherited from master, and the new commit we've just made. Before we continue, let's return to our master branch for a moment using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit checkout\u003c/code\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit checkout master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs always, we can double-check we're on master by running\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand confirming that master has an asterisk next to it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGreat. Now, let's look at the commits on our master branch again:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the new commit we just made on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not present in master! Our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003ebranch's most recent commit reads \"Add styles to h1, h2, p, and body to fit blue theme.\" Whereas master's most recent commit reads \"Add CSS rule to make H1 headers blue.\" And if we refresh our page in the browser again, we can see our blue styles are no longer present:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-12-no_blue_theme.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAlso, if you view the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estylesheet in Atom, you'll notice that the CSS rules we just added are gone! Don't worry; this is entirely normal. Because we switched branches, the version of the project we're seeing in Atom is different. The master branch does not have the same CSS rules as the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003cp\u003eRemember, when we create a branch the new branch will inherit all commits from the branch it is branched off from. That is, the branch we are located in when we create the new branch. However, when we make new commits on our new branch, they remain on that branch. The organization of our current commits between branches look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-13-flow_chart_1.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can see our first three commits on master. When we branched off of master to create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e, it inherited all of master's commits. However, when we made subsequent commits in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethey remained exclusive to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand were not shared with master.\u003c/p\u003e\r\n\u003ch3\u003eWorking with Multiple Branches\u003c/h3\u003e\r\n\u003cp\u003eLet's create another branch with a different set of CSS styles for our site. Remember, you may branch off from any existing branch. The new branch will contain all code and commits from whatever branch you were located within when the new branch was created.\u003c/p\u003e\r\n\u003ch3\u003eCreating a New Branch\u003c/h3\u003e\r\n\u003cp\u003eLet's branch from master again. We'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand confirm we're located in master:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll create another new branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to confirm our new branch has been created:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n  \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eNavigating Between Branches\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll switch to our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit checkout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit checkout red_theme\r\n\u003cspan class=\"hljs-constant\"\u003eSwitched\u003c/span\u003e to branch \u003cspan class=\"hljs-string\"\u003e'red_theme'\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto confirm we've successfully navigated into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n  master\r\n* \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, if we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can see\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas inherited all commits from master, as expected:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eWorking on a Branch\u003c/h3\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in Atom should currently look like this:\u003c/p\u003e\r\n\u003cp\u003estyles.css\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAgain, notice that it does not contain the CSS we just committed in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch. The new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003ebranch was branched off of master. Therefore, it contains all of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e's commits and code. It does not contain the code we committed on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch, only the master branch. Let's add styles to this branch's version of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile now:\u003c/p\u003e\r\n\u003cp\u003estyles.css\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: darkred\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: crimson\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: salmon\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we refresh our page in the browser, we can see our new CSS at work:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-14-test_site_red_theme.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe'll add these changes to our Git repository, and commit:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Add styles to h1, h2, p, and body to fit red theme.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs always, we can run $ git log to see a summary of our commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003ef2d9510cdc76736c7c5cf7e5d56264cd405fcd1\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit red theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ePerfect. We now have the commits that came along with the new branch when we branched from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, and the new commit we've just made on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch. Our organization of commits between branches currently looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-15-flow_chart_2.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNow, let's say we want to improve the styles in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eeven further by changing the site's text. We'll include the following additional CSS rules in\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003estyles.css\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: darkred\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: crimson\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: salmon\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-family\u003c/span\u003e: sans-serif\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we denote that everything located in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags should have sans-serif style font that is center-aligned. Because we're now styling everything in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags we can remove\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etext-align: center;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the existing h1 and h2 CSS rules. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags exist within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, so this rule will automatically apply to them too. We can save our changes and refresh the site to see our new styles:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-16-red_theme_sans_serif.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAgain, we'll add these changes to our Git repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd commit them with a descriptive message:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Make all font sans-serif style.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run $ git log. We can see that in addition to the 3 commits inherited from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003ebranch also has 2 of its own commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e d5bae6406669988e154608ce990e08fed51e9cb3\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e00\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    Make \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e font sans-serif style.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003ef2d9510cdc76736c7c5cf7e5d56264cd405fcd1\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit red theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe commits across all branches of the project currently look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-17-flow_chart_3.png\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eBenefits of Branching\u003c/h2\u003e\r\n\u003cp\u003eAre you beginning to see how branching can be beneficial? It allows us to experiment with code and ensure it works correctly before saving it to our \"final draft\" master branch. When developers integrate new features into projects, they commonly do so in a branch. This allows them to make a copy of the entire project, experiment with new code, and confirm it does what it is supposed to before saving it into the final version.\u003c/p\u003e\r\n\u003cp\u003eThis prevents bugs or issues from affecting the project. If the new code a developer adds or breaks anything, it won't cause issues on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, only on that isolated branch. This allows developers room to iron out any issues with code before integrating it into the final version of the project.\u003c/p\u003e\r\n\u003cp\u003eWhen code is fine-tuned and tested in the branch, and we know it works, we can add it into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. This process is called merging, and we'll explore it in detail in the next lesson as we continue to work with this example project.\u003c/p\u003e","exportId":"tuesday-git-branching"},{"id":211,"title":"Tuesday: Git Merging","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIn the last lesson we explored creating and managing multiple branches in a single Git repository. As we learned, branches allow us to create multiple copies of our code. These copies may be used to experiment with implementing new code, without putting the \"final version\" or master branch at risk of bugs or errors.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, branches can be used to simply try out different options before deciding which should end up in the final iteration of the project; like we did in the previous lesson with different sets of CSS styles.\u003c/p\u003e\r\n\u003cp\u003eHowever, once we confirm the code located in a feature branch works, and that we want to include it in the final version of our project, we need to integrate this code into the master branch that represents our final product. The act of incorporating code from multiple branches together is called **merging**. In this lesson, we'll walk through merging branches together in our example project.\u003c/p\u003e\r\n\u003ch2\u003eMerging Branches\u003c/h2\u003e\r\n\u003cp\u003eLet's say we've decided to use the CSS we wrote in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch in the final version of our project. Since the master branch represents the final product, we'll need to merge the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo merge two branches you must first navigate to the branch you'd like to introduce new code into. In our case, this is the master branch, because we'd like to integrate the CSS we created in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto see where we are currently located:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n  master\r\n* \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you followed along with the previous lesson exactly, you should still be located in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e. Let's navigate into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git checkout\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit checkout master\r\n\u003cspan class=\"hljs-constant\"\u003eSwitched\u003c/span\u003e to branch \u003cspan class=\"hljs-string\"\u003e'master'\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to confirm we've successfully navigated to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n  \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git merge\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to bring the contents and commits of an outside branch into our current branch. In our case, we'll bring the commits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch we are currently located in. We'll run the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git merge \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis should result in something that looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-title\"\u003eUpdating\u003c/span\u003e 982b0f2..d5bae64\r\nFast-forward\r\n css/styles.css | \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e ++++++++++++++++-\r\n \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e file changed, \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e insertions(+), \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e deletion(-)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto view our commit history:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e d5bae6406669988e154608ce990e08fed51e9cb3\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e00\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    Make \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e font sans-serif style.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003ef2d9510cdc76736c7c5cf7e5d56264cd405fcd1\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit red theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the two most recent commits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare now part of the commit history here in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. This is because we merged\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. This means all code and commits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehave been incorporated into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, too.\u003c/p\u003e\r\n\u003cp\u003eThe commit structure of our project across all branches currently looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-18-flow_chart_4.png\" width=\"820\" height=\"747\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice that merging\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas brought all commits previously exclusive to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehere in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. Also, notice that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommits don't instantly disappear when we merge them into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. They still exist in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003ch3\u003eDeleting Branches\u003c/h3\u003e\r\n\u003cp\u003eAfter successfully merging a branch (always confirm all of the branch's commits are present), you may delete it if you do not plan on using it further. This is safe to do because all commits\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eonce contained are now present in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. So, we don't risk losing any work.\u003c/p\u003e\r\n\u003cp\u003eWe can delete a branch using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch -D\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch -\u003cspan class=\"hljs-constant\"\u003eD\u003c/span\u003e red_theme\r\n\u003cspan class=\"hljs-constant\"\u003eDeleted\u003c/span\u003e branch red_theme (was d5bae64).\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand see\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas been removed from the repository entirely:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, since we opted to integrate the styles in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e, we no longer need the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch either. We'll delete it at this time, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch -\u003cspan class=\"hljs-constant\"\u003eD\u003c/span\u003e blue_theme\r\n\u003cspan class=\"hljs-constant\"\u003eDeleted\u003c/span\u003e branch blue_theme (was \u003cspan class=\"hljs-number\"\u003e268363\u003c/span\u003ea).\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eKnow that merging doesn't always go quite this smoothly, unfortunately. If multiple branches contain edits to the same lines of code, Git won't know which edit should supersede which, and requires the developer to manually intervene (this primarily occurs when branches are working on the same code simultaneously, and both attempt to merge with master). This is known as a merge conflict.\u003c/p\u003e\r\n\u003cp\u003eHowever, we shouldn't encounter any merge conflicts quite yet. For now, simply make sure you're familiar with the general concepts of branching and merging, and able to create branches for use with GitHub Pages. We'll explore merge conflicts, what they look like, and how to resolve them later on.\u003c/p\u003e\r\n\u003cp\u003eAs you can see, merging and branching in Git is a powerful, complex feature. However, don't feel overwhelmed if you don't yet have a handle on everything we've covered in these past two lessons. Feel free to refer back to this content whenever necessary. Soon enough, branching and merging will become second nature!\u003c/p\u003e","exportId":"tuesday-git-merging"},{"id":212,"title":"Tuesday: Practice: Branching and Merging","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Now that you have spent some time learning about branching and merging, let’s practice! The goal of this exercise is to work on branching and merging along with your new CSS skills.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the benefit of branching?\u003c/li\u003e\r\n\u003cli\u003eHow do we create a new branch of a project?\u003c/li\u003e\r\n\u003cli\u003eWhy would we want to merge back into master?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eResort Website\u003c/h3\u003e\r\n\u003cp\u003eYou are hired by an investor to create a website for a private island resort that they are building.\u003c/p\u003e\r\n\u003cp\u003eYour website should have:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA main home page\u003c/li\u003e\r\n\u003cli\u003ePages for:\r\n\u003cul\u003e\r\n\u003cli\u003eaccommodations\u003c/li\u003e\r\n\u003cli\u003eactivities\u003c/li\u003e\r\n\u003cli\u003etravel arrangements\u003c/li\u003e\r\n\u003cli\u003epictures, etc.\u003c/li\u003e\r\n\u003cli\u003econtact information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe investor doesn't know exactly what style they want for the website, so they have asked you to use your best judgement and provide them with at least two options for styling so they can make their decision later.\u003c/p\u003e\r\n\u003cp\u003eMake a branch for each style and when you are done, call a teacher over so that the \"investor\" can see their options and decide which style they would prefer. Once the \"investor\" (your TM) has made their selection, merge that branch into master.\u003c/p\u003e\r\n\u003cp\u003eMake sure you have been making commits throughout building this project and make a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003ebranch to display it on GitHub Pages. And don't forget your README!\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you and your partner finish all activities for the day with time to spare, make a website for your favorite restaurant. Include a page to display the menu, a page with contact information and hours, and a homepage describing the cuisine, or restaurant's history. Add styles using CSS, and publish the site on GitHub Pages.\u003c/p\u003e","exportId":"tuesday-practice-branching-and-merging"},{"id":213,"title":"Wednesday: Styling with classes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eYesterday, we learned how to style elements of the page. Unfortunately, we had no way of targeting specific parts of the page. So if we wanted one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto be green, all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelements on the page would need to be green. In this lesson, we will learn some HTML code that allows us to label HTML elements so that we can style specific parts of the page any way we'd like.\u003c/p\u003e\r\n\u003cp\u003eLet's create a new page with some paragraphs about my favorite animal, the giraffe. These will be regular paragraphs with an introductory summary at the top of the page.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eGiraffes!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eGiraffes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's time to learn about the mysterious giraffe!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis is an introduction. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eAt first glance, giraffes are pretty magical creatures. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003eAbout the Author\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's some information about the author. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs a note here, the text used to fill these paragraphs is known as lorem ipsum. It looks like Latin, but the words are jumbled and don't really have any meaning. Lorem ipsum text is often used as a placeholder for text when doing website design; you can search online for \"lorem ipsum\" and find many varieties and websites where you can copy the text.\u003c/p\u003e\r\n\u003cp\u003eThis page is nice, but let's the introductory paragraph to look more like an introduction - I want the text to be italicized.\u003c/p\u003e\r\n\u003cp\u003eTo label the introductory paragraph, first we add a class to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e    \u0026lt;p \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"intro\"\u003c/span\u003e\u0026gt;This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e an introduction. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e eiusmod tempor incididunt ut labore et dolore magna aliqua.\u0026lt;/p\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can add a rule to our stylesheet that targets this paragraph by using a class selector. Here's what that looks like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.intro\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we refresh the page, we see that the paragraph with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintro\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis italicized. In the rule the HTML element with a class of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintro\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas targeted with the class selector\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintro\u003c/code\u003e. All class selectors begin with a period:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can also apply a class to multiple tags. Let's say we want our info about the author to be red. Let's add some classes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"author\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAbout the author\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"author\"\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's some information about the author. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd here's the CSS rule:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe class selector targets all elements of a particular class. It's possible, however, for multiple elements on a web page to share a specific styling, but for one of those elements to differ slightly.\u003c/p\u003e\r\n\u003cp\u003eFor example, I want both the header and the paragraph with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto be red, but I want the paragraph text to be a smaller font than the rest of the paragraphs on the page. But what happens when I do this?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-size\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e12px\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe paragraph text size is smaller, but so is the header. Instead, we can target the paragraph with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-size\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e12px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis code uses a new selector:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.author\u003c/code\u003e. What's the difference between the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.author\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.author\u003c/code\u003eselectors?\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.author\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector targets\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall elements\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.author\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector targets only\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003eelements with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e. This type of selector allows you to be even more specific with your styling.\u003c/p\u003e","exportId":"wednesday-styling-with-classes"},{"id":48,"title":"Wednesday:Practice: Styling with Classes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Practice using classes to style large portions of our webpages, and applying classes to multiple HTML tags.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat's the difference between styling using classes and styling elements directly?\u003c/li\u003e\r\n\u003cli\u003eWhat does a class selector in the stylesheet look like?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to create the page about giraffes that uses classes to style various sections of the page.\u003c/p\u003e\r\n\u003ch3\u003eTravel Agency\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHappy Trails Travel Agency\u003c/em\u003e. The page should have text, images, and links. Feature various travel destinations and get creative!\u003c/p\u003e\r\n\u003cp\u003eAdd a class named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etropical\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor tropical destinations. Give the headers the color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#f7325e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the text the color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#7dc410\u003c/code\u003e. Use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efantasy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efont family.\u003c/p\u003e\r\n\u003cp\u003eAdd a class named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epopular\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the most popular destination. Add some styling to distinguish it from the other destination listings. What happens when a popular destination is also a tropical destination? How can you make sure that the styles you want to see on the page are displayed?\u003c/p\u003e\r\n\u003ch3\u003eNews Article\u003c/h3\u003e\r\n\u003cp\u003eCreate a new project folder containing\u003cspan\u003e \u003c/span\u003e\u003cem\u003enews-article.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtaining a fake news article. Use lorem ipsum text with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags to give you paragraphs. Add a few images to illustrate the news, as well as headers to divide the page into sections.\u003c/p\u003e\r\n\u003cp\u003eLet the first section on the page be the introduction. Give it a subheader (\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e), a paragraph or two, and an image. Each element in this section should have the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintroduction\u003c/code\u003e. Create styles for all of the elements in this section to set them apart from the rest of the content on the page. Use the selectors\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2.introduction\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.introduction\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimg.introduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the styles.\u003c/p\u003e\r\n\u003ch3\u003eFavorite Things: More Practice\u003c/h3\u003e\r\n\u003cp\u003eGet some more practice styling with classes by adding classes and class selectors for your CSS rules to your copy of\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e.\u003c/p\u003e","exportId":"wednesday-practice-styling-with-classes"},{"id":214,"title":"Wednesday:Class vs. ID","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eBefore we go on, let's talk about the difference between assigning a class to an HTML tag and assigning an id to an HTML tag. For the remainder of this section you can ignore IDs and continue using classes, but a brief explanation is in order, as you are likely to find references to IDs when reading resources online.\u003c/p\u003e\r\n\u003cp\u003eBoth classes and IDs can be targeted by CSS rules (classes with a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand IDs with a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esymbol). For example, both paragraph tags below are styled the same, though one is referenced by class and the other by ID.\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eindex.html\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eSome Exciting Red Text\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"line1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eThis text will appear red.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"line2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eThis text will also be red. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003estyles.css\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.line1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-id\"\u003e#line2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe important difference is that IDs are unique, while classes are not unique. We can use the same class on multiple elements, while IDs must be unique to a single element on the page. IDs may appear to work even when duplicated on the same page, but duplicate IDs can lead to inconsistent behavior and hard-to-find bugs.\u003c/p\u003e\r\n\u003cp\u003eIf in doubt, use a class.\u003c/p\u003e","exportId":"wednesday-class-vs-id"},{"id":215,"title":"Wednesday: Divs and Spans","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eClasses are useful for applying styles to parts of a page, but sometimes you have a style that you want to apply to an entire part of your page, and adding a class to every tag can be unwieldy. It can also result in an HTML file that is difficult to read. Here's a new page I made about wildcats.\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003ewildcats.html\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eI'm going to teach you all about wildcats. First, the important stuff:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTypes of wildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eThere are many types of wildcats. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some types of wildcats:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eTiger\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJaguar\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003euL\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMore important stuff\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eYou should also know this about wildcats. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eNow, for some less important stuff about wildcats.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats communicate with over a dozen different types of sound.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats make great dance partners\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's a little-known fact that wildcats are actually great dance partners. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSee all of the classes we had to add to make certain elements\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimportant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eunimportant\u003c/code\u003e? We can simplify this using the new tag,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003ewildcats.html\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eI'm going to teach you all about wildcats. First, the important stuff:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eTypes of wildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThere are many types of wildcats. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some types of wildcats:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eTiger\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJaguar\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eOther important stuff\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere is some other really important stuff about wildcats. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eNow, for some less important stuff about wildcats.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats communicate with over a dozen different types of sound.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats make great dance partners\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's a little-known fact that wildcats are actually great dance partners. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen we can style entire sections of the page using the selectors\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.important\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.unimportant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our CSS:\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003estyles.css\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.important\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.unimportant\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag does not actually do anything on its own - it simply defines a section of a page. It acts as a container to separate the content of a page, so that when used with CSS, styles can be applied to an entire section. Remember, good code is code that is easy to change: When we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es and want to change a class name, we only need to change one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of all of the elements inside of it.\u003c/p\u003e\r\n\u003cp\u003eThere is a similar tag for inline elements called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003ewildcats.html\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;Wildcats are versatile creatures that can live \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"important\"\u003c/span\u003e\u0026gt;many different climates\u0026lt;/span\u0026gt;. They can live \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cat-climate\"\u003c/span\u003e\u0026gt;the jungle\u0026lt;/span\u0026gt;, \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cat-climate\"\u003c/span\u003e\u0026gt;the mountains\u0026lt;/span\u0026gt;, and even \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cat-climate\"\u003c/span\u003e\u0026gt;the desert\u0026lt;/span\u0026gt;. Look carefully, and you may find one \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"important\"\u003c/span\u003e\u0026gt;your own backyard\u0026lt;/span\u0026gt;!\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow let's add some style for our new class,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.cat-climate\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003estyles.css\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.important\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.unimportant\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.cat-climate\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellow\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe same class can be used to apply the same styles to both spans and divs, as we did with `.important`.\u003c/p\u003e","exportId":"wednesday-divs-and-spans"},{"id":216,"title":"Wednesday: Practice: Divs and Spans","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Practice adding divs and spans to pages.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between divs and spans?\u003c/li\u003e\r\n\u003cli\u003eIf I wanted to highlight a specific phrase in a paragraph, would it be better to use a div or a span?\u003c/li\u003e\r\n\u003cli\u003eIf I wanted to highlight a group of paragraphs, would it be better to use a div or a span?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to create the webpage about wildcats, dividing the page into important and unimportant sections. Then, choose one (or several) of the following to practice using divs and spans to style the page.\u003c/p\u003e\r\n\u003ch3\u003eTravel Agency\u003c/h3\u003e\r\n\u003cp\u003ePull up the page you made for Happy Trails Travel Agency and rewrite it to remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etropical\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epopular\u003c/code\u003eclasses from the elements themselves, and use divs instead.\u003c/p\u003e\r\n\u003ch3\u003eNews Article\u003c/h3\u003e\r\n\u003cp\u003eRewrite the news article webpage by removing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintroduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass from the elements themselves and create a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintroduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to hold the elements.\u003c/p\u003e\r\n\u003ch3\u003eResume\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage to display your resume. Use divs and spans to style sections of the page to list your work experience, skills, education, contact info, and any other sections you'd like your resume to have.\u003c/p\u003e","exportId":"wednesday-practice-divs-and-spans"},{"id":217,"title":"Wednesday: Floats","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eAll the pages we've made so far have been laid out pretty simply - top to bottom for block elements, and left to right for inline elements. But often we will want our pages to have more complexity, with columns or a sidebar, or text wrapping around an image. We can use floats to design these kinds of layouts.\u003c/p\u003e\r\n\u003cp\u003eLet's see what this looks like. Here's an example of text wrapping around an image:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/mango.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"An image of a ripe mango.\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes are one of the world's favorite fruits. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd here's the CSS rule:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we pull up the page, we can see that the image \"floats\" to the left, and the text wraps to the right of it. You can resize your browser window to see that when the area for the text exceeds the image size, the text flows underneath the image. If you'd like, you can also make the text float to the right by using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efloat: right;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead.\u003c/p\u003e\r\n\u003cp\u003eLet's see how we can use floats to create a sidebar:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eAll about mangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"sidebar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eEating mangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes are delicious! Here are some ways to enjoy them:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eBy themselves\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eSmoothies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eFruit salad\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eWith coconut rice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"main\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes are one of the world's favorite fruits. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's the CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.sidebar\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e30%\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: right\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellow\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and now we have a yellow sidebar on the right of the page. Let's see one more example of floats and make some columns on the page:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eColumns\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's see some columns!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith the CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.column\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e350px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left\u003c/span\u003e;\r\n  }\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we have columns! As you can see, floats are a useful way to lay out web pages.\u003c/p\u003e","exportId":"wednesday-floats"},{"id":218,"title":"Wednesday: Practice: Floats","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Practice using floats to organize webpage layouts. Use concepts from the lesson on floats, such as wrapping text around an image, creating sidebars, and creating pages with multiple columns.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat are some of the options available to us for using floats?\u003c/li\u003e\r\n\u003cli\u003eWhat are we able to accomplish using floats?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson and create the page about mangoes and pay attention to how floats are used to change the layout of the page.\u003c/p\u003e\r\n\u003ch3\u003eBand Website\u003c/h3\u003e\r\n\u003cp\u003eCreate a website for your favorite band. Give the page a sidebar for upcoming shows. Create an \"About the band\" section and a section for images, and use floats to set the layout of the page.\u003c/p\u003e\r\n\u003ch3\u003ePhotographer Portfolio\u003c/h3\u003e\r\n\u003cp\u003eCreate a website for a photographer. Divide the page into columns that feature different categories of photography: For example, one for portraits, one for nature, and one for weddings.\u003c/p\u003e\r\n\u003ch3\u003eResume\u003c/h3\u003e\r\n\u003cp\u003ePull up your resume from the divs and spans practice, and use floats to divide the different sections into columns and rows. For example, the skills section can be broken into columns to save vertical space.\u003c/p\u003e","exportId":"wednesday-practice-floats"},{"id":219,"title":"Wednesday: Box Model","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eThere's one more essential piece of HTML and CSS we need to cover: the box model. You can think of every element on a web page as a rectangular box that takes up space, and it's made of four parts: content, padding, border, and margin. This is easiest to see in a diagram:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D3-01-box_model.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eWhen you see height and width used in CSS, those values apply to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtent\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's use some CSS to demonstrate the box model on a web page. Start with some unstyled text contained in a div:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBox model\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"test-box\"\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a border using CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can actually give each side a different value if we'd like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-right\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e4px\u003c/span\u003e solid blue\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-top\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e solid orange\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-bottom\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8px\u003c/span\u003e solid black\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor the sake of space, I'll keep the border uniform for the rest of these examples.\u003c/p\u003e\r\n\u003cp\u003eNow let's increase the space between the text and the border:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFinally, let's make some room between the border and the elements around it (which are, in this simple case, just the edges of the page):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e20px\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's see what happens when we give the div a background color:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e20px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellow\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe color applies to the box\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003cem\u003epadding\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can see the box model for an element in the DevTools\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epanel. For this example, it looks something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D3-02-box_model_inspect.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eYou'll run into the box model a lot when building web pages, so spend some time getting familiar with it.\u003c/p\u003e","exportId":"wednesday-box-model"},{"id":220,"title":"Wednesday: Practice: Box Model","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Implement the box model in our code to organize and layout the page content.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between margin and padding?\u003c/li\u003e\r\n\u003cli\u003eWhat are some benefits to using the box model?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson on the box model and understand how its various properties affect the layout of elements on the page. After you have gone through the lesson, here are some exercises for you to practice using margins, borders, and padding. Choose one project to start - you are not expected to complete all of the exercises, but to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunderstand\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe box model.\u003c/p\u003e\r\n\u003ch3\u003eBand Website\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor the sidebar to your band's webpage, add a border and a bit of padding and margin. Give the sidebar a background color, if you haven't already.\u003c/li\u003e\r\n\u003cli\u003eAdd some padding around the images on your band's webpage.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eResume\u003c/h3\u003e\r\n\u003cp\u003eUse the box model to further format sections of your resume. For example, give each section a border to separate different sections from each other.\u003c/p\u003e\r\n\u003ch3\u003ePhotography Portfolio\u003c/h3\u003e\r\n\u003cp\u003eUse the box model to lay out the presentation of your photography portfolio from the Floats exercise. Give each photo a border, and give each column a different background color.\u003c/p\u003e","exportId":"wednesday-practice-box-model"},{"id":221,"title":"Wednesday: Cascading and Inheritance","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e \u003c/h1\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eYou may have noticed that, in earlier lessons, we defined a style for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, and it was applied to the text that was inside of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags. This is called inheritance: since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags are nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003etags, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags inherit the styles given to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003es.\u003c/p\u003e\r\n\u003cp\u003eOn the other hand, when we applied a style to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags on the same page as a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, it was not applied to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare not nested within another, so their styles are applied independently.\u003c/p\u003e\r\n\u003cp\u003eWe can use inheritance to change the font for the entire web page like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-family\u003c/span\u003e: sans-serif\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSince all of the other elements in the web page are nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, all of the text for the page will be Sans Serif.\u003c/p\u003e\r\n\u003cp\u003eLet's see how we can use cascading to target specific child elements. For example, take this HTML:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eCats vs Dogs\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eCats vs Dogs: the Definitive Guide\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to the ultimate showdown between cats and dogs. May the best one win!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cats\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's why cats are great. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eFind out more about cats \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://www.example.com/cats.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003ehere\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"dogs\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's why dogs are great. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eFind out more about dogs \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://www.example.com/dogs.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003ehere\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWho will win? You will be the judge.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSay we want to color-code each paragraph so that we can tell which paragraphs are about cats and which ones are about dogs. Here is how we can style the paragraphs in each div differently:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.cats\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: coral\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.dogs\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: steelblue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese rules tell the page that all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecats\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass need the background color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecoral\u003c/code\u003e, and all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edogs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass need the background color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esteelblue\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou can nest even further down:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.cats\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e: bold\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.dogs\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can actually nest as far down as you like. A word of caution, however: anything more than 3 or 4 levels deep is usually a sign that you should re-evaluate what you are trying to accomplish with your CSS. Chances are, there's a much more efficient way to accomplish what you're attempting to do.\u003c/p\u003e\r\n\u003cp\u003eNow, consider the following rules:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.dogs\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e: bold\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e: normal\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen it comes to CSS rules, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emore specific\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erule is applied. In this example, a link in a paragraph in an element with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edogs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass will be bold, because the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.dogs p a\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector is more specific than the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ea\u003c/code\u003eselector. This is called specificity.\u003c/p\u003e\r\n\u003cp\u003eThere's one more thing I'd like to cover about cascading: if two rules have the same specificity, the last one wins - in other words, the one that's the farthest down in the CSS file takes precedence. When more than one CSS file is linked in the page head, then again, the furthest one down takes precedence.\u003c/p\u003e\r\n\u003cp\u003eOccasionally, you'll run into HTML that looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003estyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"float: left\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cute-kitten.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the style is embedded in the HTML using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyle\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyle=\"float: left\"\u003c/code\u003e. This is called an inline style, and it should be avoided at all costs! It defeats the purpose of CSS when you do this, because it means that now you can't reuse your styles and keep them in one place. This is not a common practice, but you still may run into it every once in awhile. The main takeaway here is that if you see an inline style, it takes precedence over what's defined in your CSS.\u003c/p\u003e\r\n\u003cp\u003eThere are some additional rules about which style takes precedence in more complicated situations, but that's beyond the scope of what we're learning here.\u003c/p\u003e","exportId":"wednesday-cascading-and-inheritance"},{"id":222,"title":"Wednesday:Practice: Cascading and Inheritance","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003eDiscuss the following questions with your partner:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhy is it a bad idea to use inline styling?\u003c/li\u003e\r\n\u003cli\u003eWhat is meant by specificity? How is it related to cascading?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCSS Diner\u003c/h3\u003e\r\n\u003cp\u003e\u003ca href=\"http://flukeout.github.io/\"\u003eCSS Diner\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis a game that will let you hone your chops at using CSS selectors. Click the link and proceed through the game with your partner, switching places each level.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eAnimal Shelter\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage for an animal shelter that features the animals available for adoption on the home page. Use divs and floats to give each animal its own profile section. Change the styles of the elements on the page using cascading.\u003c/p\u003e\r\n\u003ch3\u003ePast Projects\u003c/h3\u003e\r\n\u003cp\u003eTake a look at some of your past projects and try to find places where you could rewrite the page using cascading.\u003c/p\u003e","exportId":"wednesday-practice-cascading-and-inheritance"},{"id":223,"title":"Wednesday: Responsive Design and Media Queries","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eYou may have noticed that some websites look a little different on your phone than they do in a browser window on your computer screen. Altering the appearance of a website depending on the device used to view it is an important feature of CSS that ensures a quality user experience on any device. It's essential to building modern websites. In this lesson, we'll learn about adapting a site for different screen sizes using media queries.\u003c/p\u003e\r\n\u003cp\u003eBuilding a site to change its appearance in response to the size of screen on which it is being viewed is known as responsive web design. The screen being used to view a site is often called a viewport. Before we begin, let's take a look at some examples of websites that use responsive design. Check out the following two websites to view some examples of responsive design. Each site contains the layouts of several different websites, and how their styles appear differently depending on the user's screen size.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://responsivedesign.is/examples/\"\u003eResponsive Design\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://mediaqueri.es/\"\u003emediaqueri.es\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBut how do we make our own sites responsive? How does it know when to use styles meant for smaller viewports, and when to apply styles meant for larger ones?\u003c/p\u003e\r\n\u003cp\u003eIn human terms, responsive design sounds something like,\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"I want my website to have a white background when viewed on a phone, but a green background when viewed from a computer monitor\"\u003c/em\u003e. To accomplish this, you need to give the computer instructions such as,\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"If the viewport size is larger than 768 pixels, use green for the background color. Otherwise, use white for the background color.\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eTo accomplish this, we can use CSS media queries. A media query is a block of CSS that is applied only when certain conditions about the user's viewport are true.\u003c/p\u003e\r\n\u003cp\u003eLet's walk through creating media queries together. This will allow us to both understand their construction, and see what they look like in action.\u003c/p\u003e\r\n\u003cp\u003eCreate a project directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emedia-query-practice\u003c/em\u003e. Inside, create an HTML file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emedia-query-site.html\u003c/em\u003e, and another directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e. In the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory create a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo start, let's add some HTML to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emedia-query-site.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMedia Queries\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMedia Queries\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc tincidunt vestibulum sollicitudin. Aliquam sit amet ultrices purus, quis pulvinar massa. Sed quis ligula dapibus, gravida lectus sit amet, euismod quam. Integer id nisi sem. Phasellus ac purus et nunc dignissim ultricies quis sed ligula. Proin efficitur nunc eget egestas iaculis. Proin posuere, enim in venenatis gravida, erat metus hendrerit tellus, sit amet sollicitudin magna mauris sit amet ex. In hac habitasse platea dictumst. Fusce porta suscipit felis vitae ornare. Duis fringilla, nunc vitae aliquam lacinia, metus urna tincidunt erat, ut laoreet leo mi ac nibh. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eIn pretium eu sem quis dignissim. In commodo velit eu elit volutpat bibendum. Proin a orci pharetra, pharetra mauris et, tempor odio. Nullam semper magna sit amet augue pretium molestie. Quisque ullamcorper turpis a nisi consectetur, vel consectetur purus lobortis. Pellentesque tristique justo id faucibus rutrum. Donec mi lacus, molestie et posuere eget, lacinia sed turpis. Aenean id sem ligula. Cras venenatis commodo felis a tempor. Duis nec leo facilisis, condimentum odio dictum, rutrum lectus. Nullam vehicula elementum imperdiet.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eNullam sit amet ante porttitor, vestibulum quam nec, tincidunt sem. Nulla ac diam in risus porta sollicitudin. Nam pellentesque diam nec arcu vehicula varius. Praesent id ornare magna. Aliquam congue nisl enim, id vulputate lacus faucibus non. Sed ac dignissim dui, quis porttitor augue. Donec velit erat, hendrerit ut tincidunt vel, placerat sit amet risus.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, the fun part: let's add some media queries!\u003c/p\u003e\r\n\u003cp\u003eMedia queries are located in CSS stylesheets. Because of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecascading\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein CSS, they should be located at the bottom of the file, to prevent other style rules from overriding them.\u003c/p\u003e\r\n\u003cp\u003eThe basic skeleton of a media query looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e () \u003c/span\u003e{\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere are three parts to this block of code:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e@media\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells the browser that this is a media query\u003c/li\u003e\r\n\u003cli\u003eThe parentheses will contain the conditions of when to apply CSS\u003c/li\u003e\r\n\u003cli\u003eThe curly braces will contain the CSS rule to be applied when the conditions contained in the parenthesis are true\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eMedia Type\u003c/h2\u003e\r\n\u003cp\u003eMedia queries will often include something called a media type, which refers to the type of device the user is viewing a site with. We have the following options to choose from:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eall\u003c/code\u003e: Suitable for all devices.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eprint\u003c/code\u003e: Intended for viewing a site in \"print preview\" mode. For instance, if we had a website with a dark-colored background that users may want to print, we could use a print media query that removes the dark-colored background for print media types. This would both make our website's information more legible in a printed format, and save our users printer ink.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003escreen\u003c/code\u003e: Intended primarily for color computer screens.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003espeech\u003c/code\u003e: Intended for screen readers that assist users with impaired vision.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf you do not explicitly specify a type, the media query will default to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eall\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eHere's how to add the media type to a query:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen () \u003c/span\u003e{\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBy specifying the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escreen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia type, we're instructing our site to only apply any CSS in this media query to the site if a user is viewing it through a screen.\u003c/p\u003e\r\n\u003ch2\u003eMedia Features\u003c/h2\u003e\r\n\u003cp\u003eTo tell a media query the conditions of when to apply CSS, we include something called a media feature. Media features are specific properties and details about the manner the user is viewing content. The most commonly-used media features are:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eheight\u003c/code\u003e: Describes the height of the viewport, in pixels. This media feature can also have a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix added onto it. That is, we can say\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax-height\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto specify the maximum height to which a media query's CSS should apply. Or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-height\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto define a minimum height.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003ewidth\u003c/code\u003e: Describes the width of the viewport, in pixels. Like height, it may also have a min or max prefix added onto it.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eorientation\u003c/code\u003e: Indicates whether the viewport is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elandscape\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(wider than it is tall) or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eportrait\u003c/code\u003e(taller than it is wide).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWhile not required for this course, you can learn about the additional, less common features in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Media_features\"\u003eMDN Documentation on Media Queries\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewidth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia feature in our media query. We'll also include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix, in order to specify a minimum width:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-property\"\u003e@media\u003c/span\u003e screen \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e (min-\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e480\u003c/span\u003epx) {\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe've done a few things here:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFirst, we specified that this CSS rule will apply to the screen media type.\u003c/li\u003e\r\n\u003cli\u003eThen we added the word\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebetween our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escreen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia type, and the parenthesis containing our new media feature. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword is used for combining media features with media types, as well as combining multiple media features together.\u003c/li\u003e\r\n\u003cli\u003eThen, we included\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-width: 480px\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the parenthesis.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003ewidth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis our media feature.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix specifies that the CSS we will eventually include in this media query should only be applied to viewports with a minimum width of 480 pixels.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e480px\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply refers to size (in pixels) we'd like to define as the maximum. When defining pixel sizes in CSS, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epx\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esuffix is required.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eBreakpoints\u003c/h3\u003e\r\n\u003cp\u003eThis rule means the CSS we will eventually include in this media query will only be applied when the user's viewport is wider than the minimum width of 480 pixels. This is known as a breakpoint.\u003c/p\u003e\r\n\u003cp\u003eA breakpoint is the point at which a media query's condition becomes true. For instance, because our media query has a min-width of 480px, it will apply its styles only when the viewport is 480 pixels wide or greater. 480px is therefore the breakpoint, because it is the point at which the query will be \"activated\".\u003c/p\u003e\r\n\u003cp\u003eFor some standard device breakpoints, check out this reference at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://css-tricks.com/snippets/css/media-queries-for-standard-devices/\"\u003eCSS Tricks\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eMobile-First Design\u003c/h2\u003e\r\n\u003cp\u003eLet's focus on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix for a bit here. What's the difference? Why does it matter which one we use?\u003c/p\u003e\r\n\u003cp\u003eWhen we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-width\u003c/code\u003e, then the design changes when the width is larger than 480 pixels. Using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax-width\u003c/code\u003emeans that the design changes when the width gets smaller than 480 pixels.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-width\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill make the page display faster on smaller devices, and is a good idea because smaller devices usually have less power to display a website. This approach to designing a website is called mobile first design, because it means designing for mobile screens before designing for desktop or other devices. When in doubt, take the mobile first approach.\u003c/p\u003e\r\n\u003ch2\u003eCSS Rules\u003c/h2\u003e\r\n\u003cp\u003eAll right, we have our setup ready to make some media queries. Let's start writing some CSS! We will include CSS within the curly braces, and the CSS is exactly like the CSS we've been using so far. The only difference is that the CSS rule will only be applied when the media query conditions are met.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe're saying that when the user is viewing our page from a screen, and the page width is larger than 480 pixels, then the background color will be black and the text color will be white. Any smaller than that, and only the default styles will be applied. Try it out!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D3-04-resize_window_responsive.gif\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can add multiple media queries to address a variety of viewport sizes and media types. Let's add another media query to our site:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellowgreen\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you refresh the page, you can see that if the width is between 480 and 767 pixels, the background color is black, when the width is 768 pixels or larger, the background color changes to yellow-green. Notice that the text color remains white after the background turns yellow-green, even though we don't specify text color in the second CSS rule. This is because he viewport is still greater than 480 pixels wide, and we didn't say anything about text color in the second CSS rule. Unless we override the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty with a new rule, it will remain white.\u003c/p\u003e\r\n\u003ch2\u003eViewport Ranges\u003c/h2\u003e\r\n\u003cp\u003eWe can also specify both minimum and maximum values for a media query. This can be useful if we don't want to worry about certain styles applying to multiple media queries.\u003c/p\u003e\r\n\u003cp\u003eWe could add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax-width\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our media query like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) and (max-width: \u003cspan class=\"hljs-number\"\u003e767px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellowgreen\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo specify the viewport range, we added a second\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebetween the two sets of parentheses. Now when we refresh the page, we see that the text color is white only for the first media query, and changes back to black when the screen width is greater than 767 pixels.\u003c/p\u003e\r\n\u003ch2\u003eMore CSS in Media Queries\u003c/h2\u003e\r\n\u003cp\u003eLet's look at another example of how we can use media queries to change our webpage's display. Often, sites will display text in a single column for easy reading on mobile phones or smaller devices, but display the text in columns on larger devices (see\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://mediaqueri.es/dbp/\"\u003ethis example from mediaqueri.es\u003c/a\u003e).\u003c/p\u003e\r\n\u003cp\u003eWe've styled text into columns in a previous lesson on floats. Where do you think we need to put the CSS for displaying our text as columns at only larger screen sizes?\u003c/p\u003e\r\n\u003cp\u003eHere's the CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) and (max-width: \u003cspan class=\"hljs-number\"\u003e767px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellowgreen\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n  \u003cspan class=\"hljs-class\"\u003e.column\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e220px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur new rule will float any element with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolumn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the left, and make its width 220 pixels, but only for screens larger than 768 pixels. Check it out! Our text is displayed in a single column by default:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D3-05-single_column.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBut at larger screen sizes, we have columns:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D3-06-multiple_column.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you can see, media queries are a powerful tool in web design! We have the ability to tailor our user's experience of the webpage depending on how they view it. As more individuals are accessing web content through handheld devices and tablets, it's a good idea to be aware of responsive design and how we can use it to give the user the highest quality experience.\u003c/p\u003e\r\n\u003cp\u003eAs you create websites and applications throughout this course, begin implementing media queries to ensure your content looks great on all devices.\u003c/p\u003e","exportId":"wednesday-responsive-design-and-media-queries"},{"id":224,"title":"Wednesday: Practice: Responsive Design and Media Queries","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Practice implementing responsive design into your projects to make them easily readable on multiple screen sizes.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following questions with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is meant by mobile first design?\u003c/li\u003e\r\n\u003cli\u003eWhat is a breakpoint?\u003c/li\u003e\r\n\u003cli\u003eWhy do media queries need to be placed after the traditional CSS rules?\u003c/li\u003e\r\n\u003cli\u003eWhat are some of the benefits to using responsive design?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eGo back to a past project and add some media queries to the styles to make the sites responsive. Feel free to use the viewport ranges from this lesson, or see the ones listed in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://css-tricks.com/snippets/css/media-queries-for-standard-devices/\"\u003eCSS Tricks\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ereference.\u003c/p\u003e","exportId":"wednesday-practice-responsive-design-and-media-queries"},{"id":246,"title":"Thursday: Introduction To Bootstrap","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIf making websites look pretty is not your idea of a good time, don't worry: this isn't a design course. Still, there may come a time that you will need to understand enough CSS to be able to integrate a designer's CSS with your code. You may also be responsible for a project that requires you to make small changes to the CSS every now and then. Running into CSS is unavoidable as a web developer, and this is why it's so important for both web developers and designers to have some understanding of CSS basics.\u003c/p\u003e\r\n\u003cp\u003eFurthermore, you may want to build an app or website that looks nice, without spending a lot of time or effort on the user interface. In that case, front-end frameworks are immensely useful. We will spend this lesson learning what a front-end framework is, and getting familiar with one of the most popular front-end frameworks, Bootstrap.\u003c/p\u003e\r\n\u003ch2\u003eFront-end Frameworks\u003c/h2\u003e\r\n\u003cp\u003eWhen we use the term front-end in web development, we are talking about the parts of the website with which the user interacts: things like menus, buttons, images, navigation bars, and so on. The term framework refers to a package made of a structure of files and folders with pre-written code that can be used to get a project up and running more easily than building it from the ground up. Thus, a front-end framework is a set of code that helps us set up the front end of our websites. That is, the CSS, designs, layouts, and user interactions.\u003c/p\u003e\r\n\u003ch2\u003eBootstrap\u003c/h2\u003e\r\n\u003cp\u003eBootstrap is one of the most popular front-end frameworks. It allows developers to create clean, responsive, professional-looking websites relatively quickly and easily. Originally developed by Twitter as an internal tool to encourage consistency, Bootstrap was later released to the public as a free and open-source framework.\u003c/p\u003e\r\n\u003cp\u003eBootstrap is essentially a set of pre-built code that contains global CSS settings for various front-end elements in the form of fonts, colors, buttons, menus, table, a very useful grid system for page layout, and much more. One of the major advantages of using Bootstrap is that it is responsive, meaning that it has breakpoints and media queries built in, so any Bootstrap elements will automatically reformat according to the user's viewport size.\u003c/p\u003e\r\n\u003cp\u003eFeel free to visit Bootstrap's website\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/\" target=\"_blank\"\u003ehere\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand read more about it.\u003c/p\u003e\r\n\u003cp\u003eIf you're curious to see what Bootstrap can do, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://expo.getbootstrap.com/\" target=\"_blank\"\u003eSites Built With Bootstrap\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto see some of the possibilities.\u003c/p\u003e\r\n\u003cp\u003eOver the next few lessons, we will learn how to implement Bootstrap into our own web pages so that we can quickly create polished, professional sites with less effort than it would take to produce the same results on our own.\u003c/p\u003e","exportId":"thursday-introduction-to-bootstrap"},{"id":247,"title":"Thursday: Installing Bootstrap","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we've seen some of the benefits to using a front-end framework such as Bootstrap, let's walk through how to download it and use it in one of our own projects.\u003c/p\u003e\r\n\u003cp\u003eThere are several ways to go about using Bootstrap in our own projects. In this lesson, we will cover two of the simplest options.\u003c/p\u003e\r\n\u003cp\u003eFirst, navigate to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/\" target=\"_blank\"\u003eBootstrap's website\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDownload Bootstrap\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton on the front page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-01-download_bootstrap.jpg\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThis will take you to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDownloads\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epage, which gives you three options to get started, each one suited for different skill levels and use cases:\u003c/p\u003e\r\n\u003cp\u003eClick on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDownload Bootstrap\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton in the first option. This will start a download of a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-3.3.7-dist.zip\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(the version number at the time of this writing was 3.3.7, but your download may have a different number - that's perfectly fine). The extension of the download is\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.zip\u003c/em\u003e, which is a file format that compresses files to reduce their size, making downloads faster. In order to access the files it contains, we need to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunzip\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe folder, which is as simple as double-clicking the downloaded folder.\u003c/p\u003e\r\n\u003ch2\u003eBootstrap Contents\u003c/h2\u003e\r\n\u003cp\u003eThe downloaded folder should contain folders named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e, each containing several files. The file structure looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-02-bootstrap_filestructure.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eHere's a rundown of what each of these folders contain:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains the Bootstrap stylesheet in a variety of formats.\r\n\u003cul\u003e\r\n\u003cli\u003eThere are several files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap\u003c/em\u003e. They are all different formats of the same stylesheet that we will be using in our projects.\u003c/li\u003e\r\n\u003cli\u003eThere are also several files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-theme\u003c/em\u003e. They are also different formats of the same stylesheet. This one is optional, and provides a visually-enhanced Bootstrap theme. It contains additional styles that work with animations and visual effects. For now, we will only focus on using the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.min\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eextension indicates a minified file. Minified means that characters not necessary for computers to understand the code have been removed (such as whitespace). The functionality stays the same, but the file is much smaller and faster to use.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.map\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles are used with development tools called CSS preprocessors, which extend the functionality of CSS. We will not be using CSS preprocessors in this course, so we will not use\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.map\u003c/em\u003efiles either.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains a variety of useful icons, called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eglyphicons\u003c/em\u003e, in different formats. See the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/\" target=\"_blank\"\u003eBootstrap documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor the available icons. We will learn how to use these in an upcoming lesson.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains JavaScript code for animations and visual effects. You can see more information\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/javascript/\" target=\"_blank\"\u003ehere\u003c/a\u003e. We will not be using JavaScript until later in the course, so for now, we will be getting familiar with the contents of the css folder. Adding Bootstrap to a Project In our projects, we will be using either\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.min.css\u003c/em\u003e. These files both contain the same CSS, but the second one is a minified version.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThese files are CSS stylesheets just like the CSS we've been writing, and we include them in our projects in exactly the same way. To use either of these CSS files in a project, we simply need to add the file to the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cp\u003eNow that the stylesheet is in the project's css folder, we need to link it in in the website's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esection:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e =\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eExample Page Title\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can actually link your own stylesheet along with Bootstrap's stylesheet. HTML allows you to link as many stylesheets as you want! Because of cascading, the order of the stylesheets matters, and your own custom stylesheets must be linked after the Bootstrap stylesheet. We'll learn more about using custom CSS alongside Bootstrap in an upcoming lesson.\u003c/p\u003e\r\n\u003ch2\u003eBootstrap CDN\u003c/h2\u003e\r\n\u003cp\u003eAnother option for linking Bootstrap in your project is to link to the CDN, which stands for content delivery network. We'll cover what this means in a second, but first, let's see how to include it. On the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003ca href=\"http://getbootstrap.com/getting-started/#download\" target=\"_blank\"\u003eDownloads\u003c/a\u003e\u003c/em\u003epage (the same one we visited above) underneath the links to download the Bootstrap files, there is a list of CDN links:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-03-bootstrap_cdn_links.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eA CDN is a network of servers that store content and deliver it to users. In other words, the Bootstrap stylesheets are hosted online at the addresses above, and we can link to the online address instead of including the actual files in our project and linking to our local copies of the files.\u003c/p\u003e\r\n\u003cp\u003eNotice how the links from the Bootstrap website look similar to how we include stylesheets in our projects? We'll actually include them in the same way. Just copy and paste a CDN link into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof your webpage:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eintegrity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ecrossorigin\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"anonymous\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eExample Page Title\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor now, just use the first CDN link provided, because it does not include any JavaScript.\u003c/p\u003e\r\n\u003cp\u003eDepending on the size of the files, linking to the CDN can really cut down on the resources and time required to load a website. The downside of using the CDN is that you need an internet connection to use it, because the project needs to access the stylesheet from the online location for the CSS to load.\u003c/p\u003e","exportId":"thursday-installing-bootstrap"},{"id":248,"title":"Thursday: Practice: Implementing Bootstrap","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Begin exploring Bootstrap by creating an HTML page that integrates multiple Bootstrap elements into its styles.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat setup needs to occur in order to use Bootstrap elements in a project?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eResort Website\u003c/h3\u003e\r\n\u003cp\u003eRefactor your Resort website that you did to practice branching, adding Bootstrap to it. Do not forget to make regular commits and push to your pair's remote repo on GitHub.\u003c/p\u003e","exportId":"thursday-practice-implementing-bootstrap"},{"id":249,"title":"Thursday: Bootstrap: The Basics","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we've gone over what Bootstrap does, why we would want to use it, and how to add it to a project, let's create a new project and start using some of its features.\u003c/p\u003e\r\n\u003cp\u003eLet's create a webpage to practice using Bootstrap. Create a new project named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-practice\u003c/em\u003e, and inside, create an HTML file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdd some basic starter code to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003eindex.html\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's preview this site in our browser before adding Bootstrap. Load up\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein your browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-04-bootstrap_test_no_styling.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you may have anticipated, we have some headers, lists, and paragraphs, but nothing terribly exciting. Now let's add some Bootstrap! As we covered in the previous lesson on Installing Bootstrap lesson, first we need to download the Bootstrap package from the website, and move the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile into this project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cp\u003eThen, add the link to the stylesheet in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esection of index.html:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we refresh the page, we can see that some styling has already been applied, without even needing to make any other changes:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-05-bootstrap_test_plusbootstrap.png\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eContainer\u003c/h2\u003e\r\n\u003cp\u003eLet's start adding some Bootstrap styles to our page. One of the most commonly used Bootstrap elements is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e. As the name suggests, it provides a container for content that sets the margins and padding according to the size of the user's viewport.\u003c/p\u003e\r\n\u003cp\u003eHere is how we add a container to our page:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      ...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe have added a div inside of the page body with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e, and placed all of the page content inside of that div.\u003c/p\u003e\r\n\u003cp\u003eGo ahead and refresh the page, and you should see that some space has been added around the page content.\u003c/p\u003e\r\n\u003cp\u003eRemember,\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis just a really big stylesheet. Do you recall how we added classes to HTML elements to style our pages? We add Bootstrap styles to our page in a similar way. The only difference is that instead of defining the styles for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass in our own stylesheet, they have already been written for us. All we need to do is include\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein our project, and we can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003eclass in the same way.\u003c/p\u003e\r\n\u003cp\u003eSee for yourself! Open up\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand search for the word \"container\". You can open the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSearch\u003c/em\u003epanel in Atom by typing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eF\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(the \"F\" here is for \"find\"). Alternatively, in the Atom menu, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFind\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFind in Buffer\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-05-find_container.gif\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou should see the following code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n\u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding-right\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin-right\u003c/span\u003e: auto\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: auto\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e750px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e992px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e970px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e1200px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1170px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSee? There's nothing very special here! Just some predefined values for padding, margins, and width. Bootstrap is simply CSS that has already been written for us to serve a specific purpose.\u003c/p\u003e\r\n\u003cp\u003eAlso, notice that if we resize the browser window, the space around the content responds to the change in window size. As you can see in the Bootstrap code sample above, media queries are built right in! This means that when we use Bootstrap elements in our pages, they are already responsive.\u003c/p\u003e\r\n\u003ch2\u003eJumbotron\u003c/h2\u003e\r\n\u003cp\u003eAnother common Bootstrap element is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/#jumbotron\"\u003eJumbotron\u003c/a\u003e. Jumbotrons come in handy when you want to feature a portion of the page. They are often placed at the top of the page to act as the page header.\u003c/p\u003e\r\n\u003cp\u003eCan you guess how we add a Jumbotron section to our page? Much like the container, we simply add a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejumbotron\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass wherever we'd like it to appear on the page. Let's add one around the page header content for our page now:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    ...\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and now we have a jumbotron at the top of our page.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-06-jumbotron.png\"\u003e\u003cspan\u003eResize the browser window and notice that the Jumbotron is also responsive: the margins and font size change in response to the viewport size.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eWells\u003c/h2\u003e\r\n\u003cp\u003eAnother useful Bootstrap component for organizing your webpages is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/#wells\"\u003ewell\u003c/a\u003e. It makes the content of a div appear inset on the page. As with other Bootstrap effects, we add it to an element with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewell\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's what it looks like in our browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-07-well.png\"\u003e\u003c/p\u003e\r\n\u003ch2\u003ePanels\u003c/h2\u003e\r\n\u003cp\u003eAnother similar organization element is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/#panels\"\u003epanel\u003c/a\u003e. The panel wraps the contents of a div in a box, and also provides a section for a heading with a title and a footer.\u003c/p\u003e\r\n\u003cp\u003eFirst, we create the panel like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-default\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSimilarly to other Bootstrap elements, we added the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the div. We also added a second class,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-default\u003c/code\u003e. By itself, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass describes the element, but does not actually have any features that appear on the screen. The second class,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-default\u003c/code\u003e, is called a helper class, which we will cover later in this lesson. It simply adds a border. You can add multiple Bootstrap classes to an element just like we did with our custom CSS classes.\u003c/p\u003e\r\n\u003cp\u003eWe can add heading and footer sections to a panel and format the body like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-default\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and now the panel looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-08-panel.png\"\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWe added a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-heading\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to format the area containing the heading.\u003c/li\u003e\r\n\u003cli\u003eWe added the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-title\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e, which adds a pre-styled heading. Note that the font size of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas overridden by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-title\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/li\u003e\r\n\u003cli\u003eWe added a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-body\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to format the area containing the panel's content.\u003c/li\u003e\r\n\u003cli\u003eWe added a div with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-footer\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto format an area for the panel's footer.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eGo ahead and resize the viewport and notice that all of these elements are responsive as well.\u003c/p\u003e\r\n\u003ch2\u003eHelper Classes\u003c/h2\u003e\r\n\u003cp\u003eAnother feature of Bootstrap is the wide variety of\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#helper-classes\"\u003ehelper classes\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eavailable to add to almost any element. As the name implies, these classes help us out by adding additional styles to the elements on a page.\u003c/p\u003e\r\n\u003cp\u003eLet's highlight a few list items on the page to remind us to come back to them later. We can do this by adding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebg-danger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to various\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags on the page, which will add a red background to the elements.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the class name stands for \"background\", and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edanger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name Bootstrap uses for this particular shade of red.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's what this looks like in the browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-09-helper_bg_danger.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBootstrap comes with a number of preset color values for its elements that can come in handy:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprimary\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuccess\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einfo\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewarning\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edanger\u003c/code\u003e. Let's add some color to the header of the same section, and use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebg-success\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to turn it green:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMany Bootstrap elements have helper classes built in. For example, we can add some color to our panel by adding the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-info\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ePreviously, we used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-default\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, which only gave the div a border. We replaced that with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-info\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, and we can see the change when we refresh the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-10-panel_info.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe panel is now blue!\u003c/p\u003e\r\n\u003cp\u003eAs we've seen in this lesson, Bootstrap is a useful tool to have in our arsenal as developers. We were able to quickly transform the layout and style of our pages - and make them responsive - simply by adding a few extra classes. Over the next few lessons, we will learn how to work with Bootstrap on a deeper level to make it work for us!\u003c/p\u003e\r\n\u003cp\u003eAs we move forward and build more websites, start using Bootstrap to quickly create polished, professional pages.\u003c/p\u003e","exportId":"thursday-bootstrap-the-basics"},{"id":250,"title":"Thursday: Practice: Bootstrap Basics","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Start exploring Bootstrap by creating a web page that uses Bootstrap components.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eHow do we add Bootstrap to a project?\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a CDN?\u003c/li\u003e\r\n\u003cli\u003eWhat are some benefits of using Bootstrap?\u003c/li\u003e\r\n\u003cli\u003eHow do we add Bootstrap features to our own projects?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eYour friend has a catering company and needs a website to get some more business. Design a website using Bootstrap. Pay attention to how the page is responsive right out of the box.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse a container to house the page content.\u003c/li\u003e\r\n\u003cli\u003eInclude a jumbotron to display the company's name and slogan.\u003c/li\u003e\r\n\u003cli\u003eUse panels to hold the meals offered by the company.\u003c/li\u003e\r\n\u003cli\u003eUse helper classes to highlight and emphasize various parts of the page.\u003c/li\u003e\r\n\u003cli\u003eBonus: see the notes on Bootstrap\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#type-blockquotes\" target=\"_blank\"\u003eblockquotes\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand see if you can figure out how to add some to the page to display customer testimonials.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"thursday-practice-bootstrap-basics"},{"id":251,"title":"Thursday: Bootstrap Grid System","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eLining up a page exactly the way we want using only HTML and CSS can prove to be a challenging task. And then, making the layout responsive adds another level of complexity. For this reason, one of the most commonly-used features of Bootstrap is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#grid\" target=\"_blank\"\u003eGrid System\u003c/a\u003e. The grid system allows us to set up our page layout with an invisible grid to space and line up page content. As with other Bootstrap elements, the grid system is also responsive!\u003c/p\u003e\r\n\u003cp\u003eIn this lesson, we will learn how to implement this powerful feature in our own pages.\u003c/p\u003e\r\n\u003cp\u003eThe grid system consists of two parts: rows and columns. As with other Bootstrap features, they are simply div tags with either a row or column class.\u003c/p\u003e\r\n\u003ch2\u003eRows\u003c/h2\u003e\r\n\u003cp\u003eTo create a row in your page layout, add a div with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    ...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSome important points to note about rows:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRows\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe placed inside of a container. The margins of the Bootstrap\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass are set in such a way that they do not work properly outside of a Bootstrap container.\u003c/li\u003e\r\n\u003cli\u003eRows act as wrappers for columns, and columns\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe be located inside of a row. Much like the relationship between the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, the padding of the Bootstrap\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolumn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass do not work properly when placed outside of a Bootstrap row. We will see how to use columns in the next section.\u003c/li\u003e\r\n\u003cli\u003eAny page content must be placed in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecolumns\u003c/em\u003e, not directly in rows.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eColumns\u003c/h2\u003e\r\n\u003cp\u003eWhen using the Bootstrap grid system, any content on the page needs to reside inside of a column. Columns can display any valid HTML, including images, headers, panels, wells, and other divs.\u003c/p\u003e\r\n\u003cp\u003eColumns are customizable and give us flexibility with page layout, so they require some explanation.\u003c/p\u003e\r\n\u003cp\u003eThe pattern followed for column class names looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003ecol-\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emedia\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003equery\u003c/span\u003e\u0026gt;\u003c/span\u003e-\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ewidth\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe class always starts with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol\u003c/code\u003e, which stands for \"column\".\u003c/p\u003e\r\n\u003cp\u003eThe other two sections are placeholders:\u003c/p\u003e\r\n\u003ch3\u003eMedia Query\u003c/h3\u003e\r\n\u003cp\u003eThe media query portion of the class name has several options:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003exs\u003c/code\u003e: \"extra small\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003esm\u003c/code\u003e: \"small\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003emd\u003c/code\u003e: \"medium\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003elg\u003c/code\u003e: \"large\"\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThese refer to built-in Bootstrap media query values that can be applied to columns, which we will cover in more detail shortly.\u003c/p\u003e\r\n\u003ch3\u003eWidth\u003c/h3\u003e\r\n\u003cp\u003eBootstrap's grid system allows up to 12 columns across the page. Accordingly, the width portion of the class name may be any number from 1 to 12. The number represents the number of units that column takes up, out of a total 12 units. So for example, a row could fit 12 columns with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1\u003c/code\u003e, 6 columns with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e2\u003c/code\u003e, 4 columns with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3\u003c/code\u003e, and so on.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eLet's start with a column that spans the full width of a row. Since it will be the only column in its row, it needs to be 12 units wide, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\r\n  \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\u0026gt;\r\n     \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-12\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n  \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow let's look at an example on the opposite end, with 12 columns each with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\r\n   \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n   \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis HTML look appear something like this on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-09-html_grid.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf you do not want to use all 12 columns individually, you can group the columns together to create wider columns. For example, one row could contain a column with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e7\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand a column with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e, since 7 + 5 = 12. Here's some sample HTML to create these columns:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\r\n   \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-7\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-5\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n   \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how that HTML would appear on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-10-html_grid_02.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eKeep in mind that the width values should add up to a total of 12 for a single row. If they add up to more than 12, then the columns will stack no matter the viewport size.\u003c/p\u003e\r\n\u003ch2\u003eAdding a grid to an existing page\u003c/h2\u003e\r\n\u003cp\u003eLet's get some practice using Bootstrap's grid system in a webpage. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epage from our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-practice\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eproject from the previous lesson contains five sections that lend themselves well to the grid system. Let's organize those now, into two rows: the first one with 2 columns, and the second one with 3 columns.\u003c/p\u003e\r\n\u003cp\u003eIn this case, we want our columns to be equal.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor our first row, we want 2 columns. The full width of a Bootstrap grid row is 12 units, so we can divide 12 by 2 to give us 6. This means that each column should be 6 units wide.\u003c/li\u003e\r\n\u003cli\u003eFor our second row, we want 3 columns. Again, divide the total width of 12 by 3, which gives us 4. Each column should be 4 units wide.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFirst, we need to add two divs with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to give us our two rows. The first one will include the first two sections, and the second one will include the last three. Here's what that looks like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that when we refresh the page, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass by itself doesn't actually change the layout of our page. We still need to add columns. Let's format the first row:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we refresh the page, the first two sections should be next to each other in a row, each the width of half the page. The last three sections are still stacked on top of each other, so let's put those in columns. The entire page should now look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow our content is spaced neatly into two rows!\u003c/p\u003e\r\n\u003cp\u003eBecause we're experimenting, let's see what happens when we try to fill a row with columns that exceed 12 units. Looking at the second row, let's change the width of the last column to 6 instead of 4:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we refresh the page, we see that the last column has created another row.\u003c/p\u003e\r\n\u003cp\u003eWhat happens when the column widths total less than 12? Let's try it out! I will change the widths to 2, 2, and 4:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, the columns in the row do not span the width of the entire page, and are condensed to the left side of the page. This takes some degree of control away from our page layout, which is one of the great advantages of using the grid system in the first place. As you use the grid system in your own projects, try experimenting with the layout of the page by using different column sizes.\u003c/p\u003e\r\n\u003cp\u003eLet's revisit those media queries in the class name. How do we know which one we want to use?\u003c/p\u003e\r\n\u003cp\u003eBootstrap has four options for media queries, each corresponding to a standard size of device:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003exs\u003c/code\u003e: phones\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003esm\u003c/code\u003e: tablets\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003emd\u003c/code\u003e: desktops\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003elg\u003c/code\u003e: large desktops\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThese sizes instruct how narrow the page can be before the columns stack on top of one another. They refer to built-in breakpoints that are common for the viewport sizes listed above.\u003c/p\u003e\r\n\u003cp\u003eWhat does this look like? Remember how we used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia query for the columns in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e? The columns are side by side when the page is full size.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-10-responsive_grid_01.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eHowever, start decreasing the width of your browser window. Once the page width is less than 992 pixels (the built-in value for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia query), the columns stack on top of each other, like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-11-responsive_grid_02.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eSee the Bootstrap Grid documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#grid-media-queries\"\u003eMedia Queries\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor the specifics of how media queries are applied.\u003c/p\u003e","exportId":"thursday-bootstrap-grid-system"},{"id":252,"title":"Thursday: Customizing Bootstrap Styles","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we've been working with Bootstrap for the past few lessons, hopefully you can see the benefits for a front-end framework in getting a website up and running quickly. However, you may have noticed that because Bootstrap applies the same styles across the board, all of your webpages look pretty similar. You probably want some way to customize Bootstrap styles to make your site more your own.\u003c/p\u003e\r\n\u003cp\u003eIt's common to start with a framework like Bootstrap and then add your own styles to customize it. You could go into bootstrap.css and add your custom styles there. But it's a huge file with a lot of CSS to dig through, and often styles come from more than one location. Additionally, if Bootstrap came out with a new version, you would have to remember all the changes you made, and add them to the new stylesheet.\u003c/p\u003e\r\n\u003cp\u003eA better option is to leave the original file as it is, and create your own stylesheet to override Bootstrap's styles.\u003c/p\u003e\r\n\u003cp\u003eLet's try it out. Here's an example of how we could override Bootstrap's default styles to make our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003etags red and italicized:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello Bootstrap!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd our custom stylesheet:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe important thing to remember when adding styles is that your custom stylesheet needs to be linked below the Bootstrap stylesheet. Remember from our discussion on cascading, how when multiple styles apply to an element, the one that's the farthest down in the CSS file takes precedence? This applies when we're linking stylesheets in the head as well.\u003c/p\u003e\r\n\u003cp\u003eThis is because stylesheets load in the order they appear on the page. So the Bootstrap stylesheet loads and instructs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelements to look a certain way. Then the second stylesheet loads and also instructs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelements to look a certain way. The rules from the second stylesheet override Bootstrap's rules simply because it loads last.\u003c/p\u003e\r\n\u003cp\u003eWhat do you think will happen if we reverse the order of the stylesheets? Try it out:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello Bootstrap!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis black again, but the font style is still italic. Our custom styles are still loading, but Bootstrap's styles load last, so those are the styles that appear on the page. Bootstrap includes a rule for font color, but not for font style, which is why the font style remains but not the color.\u003c/p\u003e\r\n\u003cp\u003eThis is why we always link our custom stylesheets after Bootstrap!\u003c/p\u003e","exportId":"thursday-customizing-bootstrap-styles"},{"id":253,"title":"Thursday: Practice: Customizing Bootstrap","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Implement the Bootstrap grid in a project and understand how it works.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat are some of the benefits of using the Bootstrap grid system?\u003c/li\u003e\r\n\u003cli\u003eHow are rows used in the grid system?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-md-4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-md-12\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-md-4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-xs-4\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eHow many columns can fit in a row?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eContinue working on your friend's catering website.\u003c/p\u003e\r\n\u003cp\u003eFor the meals offered, include the following information: meal name, price, ingredients, allergens, and picture. Organize this information in a grid.\u003c/p\u003e\r\n\u003cp\u003eAdd your own stylesheet to customize the appearance of the site.\u003c/p\u003e","exportId":"thursday-practice-customizing-bootstrap"},{"id":254,"title":"Thursday: Navigating Bootstrap Documentation","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eAll right, we've gone over some of the basics of Bootstrap. But Bootstrap is a huge framework - the unminified CSS file alone has more than 6700 lines of code! It simply would not be feasible for us to cover every single feature.\u003c/p\u003e\r\n\u003cp\u003eInstead, we are going to spend some time in this lesson going over how to navigate and use the Bootstrap documentation. That way, you will be able to take advantage of any of the features provided by Bootstrap whenever you need to!\u003c/p\u003e\r\n\u003cp\u003eBeyond the scope of Bootstrap, the ability to efficiently navigate and reference documentation is one of the most important skills to build as a web developer. Even developers with years of experience don't just sit down and start coding everything from memory - often they have an idea of what they would like to accomplish, and getting there is a continual process of referencing documentation and experimenting with code until something works.\u003c/p\u003e\r\n\u003cp\u003eYou will undoubtedly need to navigate documentation both throughout your journey as a student at Moringa and as you start work as a developer. The documentation for Bootstrap is well-organized and contains clear explanations and examples. It's a great resource to start learning more about Bootstrap, but it's also a great way to start familiarizing yourself with the process of navigating documentation.\u003c/p\u003e\r\n\u003cp\u003eWe've actually already been navigating the Bootstrap documentation as we've been getting familiar with the framework over the past few lessons. We have referenced the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/getting-started/\" target=\"_blank\"\u003eGetting Started\u003c/a\u003e\u003cspan\u003e \u003c/span\u003epage, the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/\" target=\"_blank\"\u003eCSS\u003c/a\u003e\u003cspan\u003e \u003c/span\u003epage, and the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/\" target=\"_blank\"\u003eComponents\u003c/a\u003e\u003cspan\u003e \u003c/span\u003epage. Generally, the sections we will reference the most are the CSS and Components pages. The navigation bar at the top of the page includes links to each of these sections:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-11-navigation_links.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eCSS\u003c/h2\u003e\r\n\u003cp\u003eBootstrap's CSS section contains information on Bootstrap's extensions on standard HTML elements, such as headers, tables, buttons, images, the grid system, and so on.\u003c/p\u003e\r\n\u003ch2\u003eComponents\u003c/h2\u003e\r\n\u003cp\u003eThe components section includes resources on Bootstrap elements that exist on their own, and are not simply re-styled HTML elements. Many custom components have been created, including jumbotrons, panels, wells, navigation bars, icons, and more.\u003c/p\u003e\r\n\u003ch2\u003eNavigation Sidebar\u003c/h2\u003e\r\n\u003cp\u003eEach page of the Bootstrap documentation has a handy sidebar on the right of the page for easy navigation. You can see what features are available at a glance. Clicking on any item navigates to the documentation for that element.\u003c/p\u003e\r\n\u003ch3\u003eCSS\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-12-css_nav_sidebar.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003eComponents\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-13-components_nav_sidebar.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eSelect\u003cspan\u003e \u003c/span\u003e\u003cem\u003eProgress bars\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eunder\u003cspan\u003e \u003c/span\u003e\u003cem\u003eComponents\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eso that we can walk through some of the features of the documentation together.\u003c/p\u003e\r\n\u003cp\u003eEvery entry in the Bootstrap documentation will contain a description of the element, sections with headings for each of the ways that you can customize the element, examples of what it looks like on the page, and code samples.\u003c/p\u003e\r\n\u003cp\u003eFor example, in the progress bars entry, we see that we have several options. The first two are\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBasic example\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eWith label\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-14-progress_bars_example.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eBoth examples show us what the component looks like on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-15-progress_bars_example_02.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eUnderneath, some sample code is provided for you to use the element in your own page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-16-progress_bars_example_code.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eGo ahead and explore the documentation for yourself! You're not going to understand everything in the documentation at this point, and that's okay. Again, navigating documentation is a skill, and the only way to get better is to practice. As you start using Bootstrap in your own projects, explore the documentation and implement features beyond the ones we've covered over the past few lessons.\u003c/p\u003e\r\n\u003ch2\u003eJavaScript Documentation\u003c/h2\u003e\r\n\u003cp\u003eIt's worth noting that there are several Bootstrap elements that have visual effects or animations (such as dropdown menus, modal windows, etc.) - but these require JavaScript. We won't begin exploring JavaScript until next week, nor are you required to begin implementing any Bootstrap elements with visual effects.\u003c/p\u003e\r\n\u003cp\u003eHowever, if you'd like to optionally explore these effects and elements in your own projects, you're welcome to. Just note that any Bootstrap elements that have animations will not work unless Bootstrap's own JavaScript files are also linked.\u003c/p\u003e\r\n\u003cp\u003eFor now, the easiest way to do this is to include the CDN link to Bootstrap's JavaScript file in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003etags of your HTML document:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-17-bootstrap_js_cdn.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you will soon experience, the web is constantly growing and evolving, and the best way to keep up is to be able to adapt to these changes. More likely than not, you will eventually be asked to use a language or technology you've never seen before. Practice navigating unfamiliar documentation now, and you'll be better prepared when the situation arises again.\u003c/p\u003e","exportId":"thursday-navigating-bootstrap-documentation"},{"id":255,"title":"Thursday: Recreate a Website","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Recreate an existing website using Bootstrap components, along with everything we have learned so far. Navigate the Bootstrap documentation to use new and unfamiliar components.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we ensure our stylesheet takes precedence over Bootstrap's? Where does this occur?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eRecreate the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://en.wikipedia.orgwiki/Main_Page\"\u003eWikipedia Main Page\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eusing Bootstrap. The important thing to focus on here is the the layout, not the functionality. Use divs, spans, classes, and floats along with the Bootstrap grid system to accomplish this. Add your own custom stylesheet as well.\u003c/p\u003e\r\n\u003cp\u003eFeel free to use dummy text and images for content. You can create a dummy link by using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehref\u003c/code\u003evalue like this:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a href=\"#\"\u0026gt;\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eIf you make it this far, great! The goal for the day is to get practice using Bootstrap and practice navigating the documentation. If you feel confident in your abilities, go ahead and move on to the next section.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInclude a detailed README with author names, project name, a description, setup instructions, and copyright information.\u003c/li\u003e\r\n\u003cli\u003eIf you finish early, go back to projects you worked on previously this week and add in Bootstrap.\u003c/li\u003e\r\n\u003cli\u003eBegin exploring the Bootstrap documentation. Try implementing elements we haven't explicitly covered here in our curriculum; whether in this site, or site from earlier this week.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"thursday-recreate-a-website"},{"id":265,"title":"Friday: Independent Project - Portfolio Landing Page ","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":17.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch2\u003ePortfolio Landing Page\u003c/h2\u003e\r\n\u003cp\u003eCongratulations on beginning your journey toward becoming a developer! As a developer, you need a web portfolio to showcase your work. Today, you will be creating the landing page for your programming portfolio.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eRequirements\u003c/h3\u003e\r\n\u003cp\u003eHere are the requirements for your page:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eYour name\u003c/li\u003e\r\n\u003cli\u003eAn image of you or something that represents who you are\u003c/li\u003e\r\n\u003cli\u003eA list of projects you have created with active links to them (either on GitHub or GitHub pages)\r\n\u003cul\u003e\r\n\u003cli\u003eFor each, include a brief description of the project and what languages it uses\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAn \"About Me\" section including:\r\n\u003cul\u003e\r\n\u003cli\u003eYour background (for example, your education, job experience, a paragraph on why you decided to take a class on programming, etc.)\u003c/li\u003e\r\n\u003cli\u003eYour current interests/hobbies/skills\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eDeploy your site onto GitHub pages so that a live site can be viewed at\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour-username.github.io/portfolio\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(for example)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eObjectives\u003c/h3\u003e\r\n\u003cp\u003eIn addition to these requirements, your portfolio will be evaluated on the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSome of the most common HTML tags are incorporated, including:\r\n\u003cul\u003e\r\n\u003cli\u003ep, h, ul, ol, li, em, strong, a, img, div, span\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"i3e972ae6b1ab43e61f968faf81ddabc2"},{"id":1126,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","exportId":"i4380361521db3e98b94c2b244835cb40"}]},{"id":24,"name":"Week 2","status":"completed","unlockDate":null,"prereqs":[23],"requirement":"all","sequential":true,"exportId":"ib53b622e1cbb3c1a6ab124c596cf6661","items":[{"id":85,"title":"Monday: Introduction to Javascript","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003ch1\u003eJavascript and Jquery\u003c/h1\u003e\r\n\u003cp\u003eWelcome to JavaScript and jQuery!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIn the next few weeks, your web pages are going to go from static to dynamic thanks to JavaScript and the JavaScript library, jQuery.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eJavascript\u003c/h2\u003e\r\n\u003cp\u003eBack in 1995, a developer at Netscape named Brendan Eich introduced JavaScript to the world. Despite Java and JavaScript both containing \"Java\" in their names, they're two distinct languages that have nothing to do with one another. The official name of JavaScript is ECMAScript which gets its name from the international organization that maintains it,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.ecma-international.org/\" target=\"_blank\"\u003eECMA (European Computer Manufacturer's Association)\u003c/a\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eJavaScript is a programming language used to make web pages interactive. Like HTML and CSS, you do not need to install anything to begin writing JavaScript or see it run on your users' computers. All modern browsers support JavaScript which means JavaScript that you write for your web pages will automatically run when your visitors load your web page in their browsers. In fact, JavaScript is the only scripting language that all browsers support so if you want a page to have dynamic content, learning JavaScript is a must.\u003c/p\u003e\r\n\u003ch2\u003ejQuery\u003c/h2\u003e\r\n\u003cp\u003e\u003ca href=\"https://jquery.com/\" target=\"_blank\"\u003ejQuery\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis a JavaScript library that makes it easier to incorporate JavaScript on your web pages. When we say it is a\u003cspan\u003e \u003c/span\u003e\u003cem\u003elibrary\u003c/em\u003e, we mean that many common tasks that would take many, many lines of JavaScript code to execute have been packaged into methods that you'll be able to use with a single line of code. These methods are always available and ready to use the same way you might check out a book at a library. The goal of jQuery is to allow its users to \"write less, do more\". It's also one of the primary ways we can add interactivity to our sites.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003eDocumentation and Resources\u003c/h2\u003e\r\n\u003cp\u003eJavaScript has been around for many years and there are many places for documentation and help online. Be wary of the resources you find online. There is a lot of bad information out there, especially on JavaScript. There are also many conflicting opinions about ways to accomplish the same task.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere are the primary sources we suggest for documentation and reference. If they seem overwhelming at first, don't be deterred. As your knowledge and ability grow, so too will your ability to navigate the documentation and resources.\u003c/p\u003e\r\n\u003ch2\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\"\u003eMozilla Developer Network (MDN)\u003c/a\u003e\u003c/h2\u003e\r\n\u003cp\u003eMDN is one of the best sources of documentation on JavaScript. The site includes guides, tutorials, reference, tools and resources for developers using JavaScript.\u003c/p\u003e\r\n\u003ch2\u003e\u003ca href=\"https://jquery.com/\" target=\"_blank\"\u003ejQuery Official Site\u003c/a\u003e\u003c/h2\u003e\r\n\u003cp\u003eThe official jQuery site has great documentation on all of the methods and tools that are available when you use the jQuery library.\u003c/p\u003e\r\n\u003ch2\u003e\u003ca href=\"http://stackoverflow.com/\" target=\"_blank\"\u003eStack Overflow\u003c/a\u003e\u003c/h2\u003e\r\n\u003cp\u003eStack Overflow is a good resource for finding answers to specific challenges that you are facing. It's a site for asking and answering questions about programming. You do need to be careful about what you find there, as there is plenty of bad information to go along with the good. Make sure to search to see if somebody has already answered your question before posting. Also, give back by answering questions for other people!\u003c/p\u003e\r\n\u003ch2\u003eSearch Engine\u003c/h2\u003e\r\n\u003cp\u003eFinally, if you're stuck on something, chances are, somebody has gotten stuck on it, too - try a search engine. To make sure you get up-to-date results, may find it helpful to limit your results to the past year (in Google, click Search tools in the bar above your search results, and then change All time to Past year). It's helpful when searching to add the language to your search so you don't find yourself weeding through results for other languages (e.g. \"adding an element to an array JavaScript\" or \"jQuery clicking a button\").\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003eJavaScript \u0026amp; jQuery Objectives\u003c/h2\u003e\r\n\u003cp\u003eIn this section, we will be learning the basics of JavaScript, the programming language of the web, and jQuery, an extensive JavaScript library to help make our webpages interactive. We'll start our exploration with the basic building blocks of JavaScript:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eData types\u003c/li\u003e\r\n\u003cli\u003eOperators\u003c/li\u003e\r\n\u003cli\u003eVariables\u003c/li\u003e\r\n\u003cli\u003eMethods\u003c/li\u003e\r\n\u003cli\u003eFunctions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAs you'll see when you explore other languages, these foundational elements are standard components throughout programming.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThen we will move on to the basics of jQuery:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLearn key jQuery concepts like callbacks and event handlers.\u003c/li\u003e\r\n\u003cli\u003eShow, hide and toggle HTML elements.\u003c/li\u003e\r\n\u003cli\u003eUnderstand the Document Object Model (DOM) and how JavaScript changes the displayed page, not the HTML.\u003c/li\u003e\r\n\u003cli\u003eTraverse and manipulate the DOM.\u003c/li\u003e\r\n\u003cli\u003eCreate forms to gather input from the user.\u003c/li\u003e\r\n\u003cli\u003eManipulate the attributes of HTML elements.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFinally, we will move into more advanced JavaScript:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eImplement branching which allows JavaScript to perform different actions based on different conditions that we create\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003eAt the end of this section, you'll have an opportunity to complete an independent project, which will be reviewed for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAll previous standards (last review's objectives) are in place\u003c/li\u003e\r\n\u003cli\u003eSite uses branching to return destination\u003c/li\u003e\r\n\u003cli\u003ejQuery is used to show and hide destination after questions are answered and submitted\u003c/li\u003e\r\n\u003cli\u003eForm gathers input from the user\u003c/li\u003e\r\n\u003cli\u003eVariable names are descriptive of what they represent\u003c/li\u003e\r\n\u003cli\u003eWeb page is styled using Bootstrap and custom CSS\u003c/li\u003e\r\n\u003cli\u003eYou are able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-introduction-to-javascript"},{"id":49,"title":"Monday: Arithmetic","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eArithmetic\u003c/h2\u003e\r\n\u003cp\u003eNow that you have the basics of HTML and CSS under your belt, we're going to start learning our first programming language: JavaScript. Remember, web browsers can only do three things: display content with HTML, style it with CSS, and change what's displayed with JavaScript. Because all browsers support JavaScript, it's the de facto programming language of the web.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWe're going to take a detour away from the aesthetically pleasing and obviously useful world of web pages, so that we can learn some programming fundamentals. But don't worry! We'll be back in no time.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLike earlier, I'm going to assume you're using Google Chrome for these lessons. Chrome includes a nice little console that lets you type in JavaScript code. To access it, click on the ☰ button, go to the More Tools menu, and click Developer Tools. Go to the Console tab on the window that pops up at the bottom of the screen. As a shortcut, you can also press Cmd + Option + J on a Mac or Ctrl + Shift + I on a PC.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere at the \u0026gt; prompt, you can type JavaScript and see what it does. Try typing 1 + 2; and pressing Enter.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eCongratulations! You just ran your first JavaScript code.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eYou should see something like:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\nDon't you dare copy \u0026amp; paste!\u003ccode\u003e\u0026gt; 1 + 2;\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e3\u003c/code\u003e\r\n\u003cp\u003eJavaScript took your code -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1 + 2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- evaluated it, and returned the result - 3.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThe semicolon at the end of the line tells JavaScript to run everything before it. You'd think JavaScript would know on its own, wouldn't you?\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eNow try these:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e4 - 3;\u003c/li\u003e\r\n\u003cli\u003e5 * 6;\u003c/li\u003e\r\n\u003cli\u003e10 / 2;\u003c/li\u003e\r\n\u003cli\u003e9 / 2;\u003c/li\u003e\r\n\u003cli\u003e7 + 8 * 9;\u003c/li\u003e\r\n\u003cli\u003e(7 + 8) * 9;\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTry some other arithmetic yourself. Play around with the % operator, called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emodulo\u003c/strong\u003e. It will give you the remainder of dividing two numbers. Don't be fooled into thinking it has something to do with percentages!\u003cem\u003e+, -, *, /,\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003e%\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eare called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eoperators\u003c/strong\u003e. An operator is a special character (or characters) that indicates an action to be performed. Try dividing 0 by 0. The result,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e, stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot a number\u003c/em\u003e. In JavaScript,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis actually considered a type of number (bizarre as that may seem). Try dividing any other number by 0. The result,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eInfinity\u003c/code\u003e, is also a number in JavaScript.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Arithmetic\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eFrom the above section, we have learnt:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to access the JavaScript Console\u003c/li\u003e\r\n\u003cli\u003eAddition, subtraction, multiplication, and division using JavaScript\u003c/li\u003e\r\n\u003cli\u003eHow to use the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e%\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoperator\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans not a number but is actually considered a type of number\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBegin getting comfortable with these concepts by completing the practice exercises listed below. Soon enough, they'll be second nature!\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eMake sure you understand the following before moving on:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e%\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoperator? How is the action it performs different than simply dividing?\u003c/li\u003e\r\n\u003cli\u003eHow can we access the JavaScript console?\u003c/li\u003e\r\n\u003cli\u003eWhen might we see\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eComplete the following exercises to practice arithmetic in JavaScript:\u003c/p\u003e\r\n\u003ch3\u003eAdd:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e77 to 99\u003c/li\u003e\r\n\u003cli\u003e34 to 1233\u003c/li\u003e\r\n\u003cli\u003e-53 to 99\u003c/li\u003e\r\n\u003cli\u003e9,092 to -12312\u003c/li\u003e\r\n\u003cli\u003e943,456,575 to 39,087,092,348,570\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eSubtract:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e99 from 665\u003c/li\u003e\r\n\u003cli\u003e34 to 1233\u003c/li\u003e\r\n\u003cli\u003e555 from 23\u003c/li\u003e\r\n\u003cli\u003e7,912 from 88888\u003c/li\u003e\r\n\u003cli\u003e6,348,709,234 from 87,023,984,709,871,234.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eMultiply:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e89 and 54\u003c/li\u003e\r\n\u003cli\u003e932 and 1,900\u003c/li\u003e\r\n\u003cli\u003e-34 and 8\u003c/li\u003e\r\n\u003cli\u003e25 and 700\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eDivide:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e1008 by 7\u003c/li\u003e\r\n\u003cli\u003e23423 by 75\u003c/li\u003e\r\n\u003cli\u003e90 by 3\u003c/li\u003e\r\n\u003cli\u003e9,870,834,205,987 by 324\u003c/li\u003e\r\n\u003cli\u003eA number by 0.\u003c/li\u003e\r\n\u003cli\u003e0 by 0.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFind the remainder of dividing the following numbers:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e1008 by 7\u003c/li\u003e\r\n\u003cli\u003e23423 by 75\u003c/li\u003e\r\n\u003cli\u003e90 by 3\u003c/li\u003e\r\n\u003cli\u003e9,870,834,205,987 by 324\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-arithmetic"},{"id":87,"title":"Monday: Variables","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eAdditional tips\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efor naming JavaScript variables:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eVariables should begin with a letter.\u003c/li\u003e\r\n\u003cli\u003eVariables are case sensitive (myNumber is a\u003cspan\u003e \u003c/span\u003e\u003cem\u003edifferent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003evariable than myNUMBER).\u003c/li\u003e\r\n\u003cli\u003eUse clear names that describe the value being stored like myNumber.\u003c/li\u003e\r\n\u003cli\u003eAlways name your variables in a manner\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ethat will be easy for other developers to understand\u003c/strong\u003e. Avoid vague letters or initials. (For example: var x = 45 doesn't tell us what the value is. Is 45 an age, a distance, size, a time?...)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTry this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e45\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n    \u0026gt; myNumber;\r\n    \u003cspan class=\"hljs-number\"\u003e45\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003emyNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003evariable\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat we set equal to 45. On the second line, when we type myNumber and press Enter, JavaScript returns the value of the variable. In JavaScript, it's conventional to give variables names that start with a lowercase letter, and if they are more than one word, to capitalize the first letter of subsequent words. This is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elower camel case\u003c/strong\u003e, because the capitalized letters look like a camel's humps... or something. Sometimes you'll see a variable initially set without the var keyword, like this:\u003c/p\u003e\r\n\u003ccode class=\"javascript\"\u003emyNumber = 45;\u003c/code\u003e\r\n\u003cp\u003eThis works... most of the time, but it can cause\u003cspan\u003e \u003c/span\u003e\u003cem\u003ereally\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebad bugs down the road. Get in the habit of using the var keyword whenever you create a new variable, and you'll save yourself some massive headaches later. You can change the value of a variable:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e45\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; myNumber = \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e\r\n      \u0026gt; myNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can do arithmetic with your variables:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteNumber = \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; favoriteNumber * \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-number\"\u003e52\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDoes the variable change when you perform arithmetic on it?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteNumber = \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; favoriteNumber + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNope. But what if we do:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteNumber = \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt;favoriteNumber = favoriteNumber + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere’s a shortcut:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efavoriteNumber += 1\u003c/code\u003e. You can use more than one variable at a time, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num1 = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num2 = \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num3 = num1 + num2;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; num3\r\n      \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDon't worry for the moment about that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturn value. Technically speaking, it says\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause declaration of a variable first creates a variable without a value - hence\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e- before assigning it the value that comes to the right of the equals (\u003ccode\u003e=\u003c/code\u003e) sign.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Variables\u003c/h2\u003e\r\n\u003cp\u003eGoal: So far we have learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eVariables, in JavaScript, are written in lower camelcase\u003c/li\u003e\r\n\u003cli\u003eVariables are set using the var keyword\u003c/li\u003e\r\n\u003cli\u003eVariables can be used in arithmetic\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice creating and utilizing variables by completing the exercises listed below. Variables are a fundamental building block of programming; so begin getting comfortable with them now!\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eused? What does it mean?\u003c/li\u003e\r\n\u003cli\u003eHow can we use a variable after we've defined it?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eVariables Practice\u003c/h3\u003e\r\n\u003cp\u003eHere are a few exercises for you to practice using variables:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eequal to your name. Put your name in quotation marks.\u003c/li\u003e\r\n\u003cli\u003eDisplay the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the console.\u003c/li\u003e\r\n\u003cli\u003eChange the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeName\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eSet a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efavoriteNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eequal to your favorite number.\u003c/li\u003e\r\n\u003cli\u003eCalculate what your favorite number divided by 2 is.\u003c/li\u003e\r\n\u003cli\u003eSet another variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emichaelsFavorite\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eequal to 13.\u003c/li\u003e\r\n\u003cli\u003eChange the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emichaelsFavorite\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto 7.\u003c/li\u003e\r\n\u003cli\u003eSubtract your favorite number from mine.\u003c/li\u003e\r\n\u003cli\u003eChange the value of my favorite number to be 26 times its current value.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-variables"},{"id":88,"title":"Monday: Strings","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eWe've done a lot with numbers, but there's more to this world than just math. Let's look at words.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"Hello world!\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"Hello world!\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe stuff inside the quotes is called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003estring\u003c/strong\u003e. Strings can include letters, punctuation, and even numbers.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"5674\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"5674\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"!?\u0026amp;\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"!?\u0026amp;\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"Strings are crazy! ;)\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"Strings are crazy! ;)\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhat happens if we don't surround our string with quotes?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; hello;\r\n      x Uncaught \u003cspan class=\"hljs-built_in\"\u003eReferenceError\u003c/span\u003e: hello is not defined (...)\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis doesn't work because JavaScript doesn't know what\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emeans when it's not a string. It looks to see if it's a variable or something similar, and then doesn't find it defined anywhere.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWe can set variables equal to strings:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myString = \u003cspan class=\"hljs-string\"\u003e\"Strings can contain characters like @, $, and %.\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you want to put a quote inside a string, you have two options. Here's the first:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"Quoth the raven, \\\"Nevermore.\\\"\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"Quoth the raven, \"\u003c/span\u003eNevermore.\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe '\\' is called an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eescape\u003c/strong\u003e. It tells JavaScript that the \" that comes right after it is not the end of the string, but just a character inside the string.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eYou can also use single quotes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-string\"\u003e'\"Programming is fun!\", she exclaimed.'\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003eProgramming is fun!\u003cspan class=\"hljs-string\"\u003e\", she exclaimed.\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJavaScript generally doesn't care if you use single or double quotes to indicate a string. If you have a lot of double quotes within the string, using single quotes to indicate the string saves you from having to escape all of the double quotes inside.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Strings\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Strings lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eStrings can include letters, punctuation and numbers\u003c/li\u003e\r\n\u003cli\u003eStrings are surrounded with quotation marks\u003c/li\u003e\r\n\u003cli\u003eVariables can be set equal to strings\u003c/li\u003e\r\n\u003cli\u003eTo escape characters use the \\ character\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice using this fundamental building block of programming by completing the exercises below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we declare a String?\u003c/li\u003e\r\n\u003cli\u003eDo Strings require single or double quotes?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eStrings Practice\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eType a greeting to your best friend.\u003c/li\u003e\r\n\u003cli\u003eSet a variable equal to a string and then display the variable's contents\u003c/li\u003e\r\n\u003cli\u003eMake sure you're clear on the difference between \"9\" with quotes and 9 without.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eMethods\u003c/h2\u003e\r\n\u003cp\u003eNow that you've learned the basics of numbers and strings, let's learn how to manipulate them a bit. First, let's change a number into exponential notation.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eExponential notation is essentially just a way of shortening really long numbers, or really small numbers by removing their zeros. If you're not familiar with exponential notation, here's how it works. Take the number 78.5. In exponential notation, we write it 7.85 * 10. Or take 356.97; in exponential notation, that's 3.5697 * 10\u003csup\u003e2\u003c/sup\u003e. You can also write it as 3.5697e+2.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eExponential notation makes it easy to write very large or very small numbers. For example, 1,000,000,000 becomes 1e+9, and 0.00000002 becomes 2e-8.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWe can use JavaScript to easily change numbers into exponential notation:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-number\"\u003e48432.78\u003c/span\u003e.toExponential();\r\n      \u003cspan class=\"hljs-string\"\u003e\"4.843278e+4\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003etoExponential()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emethod\u003c/strong\u003e. You can think of a method as an action that a number can perform or have taken on it. This method is called on a number to change it to exponential form. JavaScript gives a response to this method's call. The response is \"4.843278e+4\" which is known as the method's\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ereturn value\u003c/strong\u003e. In the example above, we call the\u003cspan\u003e \u003c/span\u003e\u003cem\u003etoExponential()\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethod on the number 48432.78, and the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ereturn value\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the string \"4.843278e+4\".\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eYou can also go in the other direction, and convert out of exponential notation:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-number\"\u003e4.587e2\u003c/span\u003e.toFixed();\r\n      \u003cspan class=\"hljs-string\"\u003e\"459\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoFixed()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will round to the nearest whole number. Here's how we can tell it how many decimal places to use:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-number\"\u003e46.1\u003c/span\u003e.toFixed(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"46.10\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the parentheses is an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eargument\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoFixed()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Arguments provide a bit more information to methods to help them know what they're supposed to do. In this case, the argument is optional. When a method doesn't take an argument, or when the argument is optional and you aren't using it, you still need the parentheses on the end - so you have write\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1.05e3.toFixed()\u003c/code\u003e, not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1.05e3.toFixed\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere's another method that takes an argument:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-number\"\u003e8.12345\u003c/span\u003e.toPrecision(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"8.123\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can also call a method on a variable, since the variable is just standing in for the number it represents:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e8.12345\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; myNumber.toPrecision(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"8.123\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Methods\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Methods section, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to manipulate numbers with methods\u003c/li\u003e\r\n\u003cli\u003eExponential notation\u003c/li\u003e\r\n\u003cli\u003eThe argument to the method is located within the parentheses\u003c/li\u003e\r\n\u003cli\u003eMethods, in JavaScript, are always followed by parentheses\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBegin to practice using methods by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a return value? What does it represent?\u003c/li\u003e\r\n\u003cli\u003eWhat is an argument? How do you provide one to a method in JavaScript?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eMethods Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice using the methods you've learned about:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eConvert the following to exponential notation:\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e9238.479\u003c/li\u003e\r\n\u003cli\u003e98370923874.32\u003c/li\u003e\r\n\u003cli\u003e324.64322\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli\u003eSpecify the number of decimal places each number should have.\u003c/li\u003e\r\n\u003cli\u003eRepeat all of these using a variable set equal to any number you choose.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eString Methods\u003c/h2\u003e\r\n\u003cp\u003eYou can call methods on strings, just like you can with numbers:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"supercalifragilisticexpialidocious\"\u003c/span\u003e.toUpperCase();\r\n      \u003cspan class=\"hljs-string\"\u003e\"SUPERCALIFRAGILISTICEXPIALIDOCIOUS\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOr even call the method on a variable assigned to a string:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e word = \u003cspan class=\"hljs-string\"\u003e\"foo\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; word.concat(\u003cspan class=\"hljs-string\"\u003e\"bar\"\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"foobar\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMethods can be\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003echained\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"foo\"\u003c/span\u003e.concat(\u003cspan class=\"hljs-string\"\u003e\"bar\"\u003c/span\u003e).toUpperCase();\r\n      \u003cspan class=\"hljs-string\"\u003e\"FOOBAR\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcat()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod (which\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003econcatenates\u003c/strong\u003e, or combines, two strings) returns a string, which then has\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoUpperCase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecalled on it. Then,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoUpperCase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the final result.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBy the way, here's a nice shortcut for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcat()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"I love\"\u003c/span\u003e + \u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e + \u003cspan class=\"hljs-string\"\u003e\"Moringa School\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"I love Moringa School\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOr with variables:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sentiment = \u003cspan class=\"hljs-string\"\u003e\"I love \"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animal1 = \u003cspan class=\"hljs-string\"\u003e\"cats\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animal2 = \u003cspan class=\"hljs-string\"\u003e\"dogs;\"\u003c/span\u003e\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; sentiment + animal1;\r\n      \u003cspan class=\"hljs-string\"\u003e\"I love cats\"\u003c/span\u003e\r\n      \u0026gt; sentiment + animal2;\r\n      \u003cspan class=\"hljs-string\"\u003e\"I love dogs\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBack to arguments. String methods can take numbers as arguments, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"caterpillar\"\u003c/span\u003e.charAt(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDid you notice something funny about this example? What's the fifth character of the word \"caterpillar\"? Well, with the way we normally count, \"c\" is the first letter, and \"r\" is the fifth. But JavaScript says that the character at the 5th position is \"p\". That's because computers start counting at zero. So \"c\" is the zeroth letter, and \"r\" is the fourth.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: String Methods\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the string methods lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMethods can be called on strings\u003c/li\u003e\r\n\u003cli\u003eMethods can be chained\u003c/li\u003e\r\n\u003cli\u003eYou can use the + operator on strings in place of the concat() method\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow that we've covered both methods and strings independently, practice common methods meant specifically for strings by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat does 'chaining' a method mean? What does that look like?\u003c/li\u003e\r\n\u003cli\u003eName two string methods.\u003c/li\u003e\r\n\u003cli\u003eName two ways to combine multiple strings together.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eMethods Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice calling methods on strings:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet a variable equal to a string\u003c/li\u003e\r\n\u003cli\u003eCall a method on that variable.\u003c/li\u003e\r\n\u003cli\u003eSet another variable with a string in all uppercase.\u003c/li\u003e\r\n\u003cli\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcat\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod with your two variables.\u003c/li\u003e\r\n\u003cli\u003eNow concatenate them with the shortcut.\u003c/li\u003e\r\n\u003cli\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoUpperCase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on your first variable.\u003c/li\u003e\r\n\u003cli\u003eNow use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoLowerCase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on your second variable.\u003c/li\u003e\r\n\u003cli\u003eFind the character at the 3rd position of either of your variables.\u003c/li\u003e\r\n\u003cli\u003eCheck out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#Methods\"\u003eMDN's documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eof string methods and try out at least five new methods for yourself. If some of them don't make sense, don't worry about it - just try the ones that do. (Stick to the section labelled Methods unrelated to HTML. Click on the method itself to see how to use it in your code.)\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-strings"},{"id":89,"title":"Monday: Operators","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eAssignment and Comparison Operators\u003c/h2\u003e\r\n\u003ch2\u003eAssignment Operators\u003c/h2\u003e\r\n\u003cp\u003eWe've already seen how we can use the = operator to set a variable equal to a value.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteNumber = \u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e;\r\n      \u0026gt; favoriteNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eassignment operator\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ebecause it assigns the value on the right of the operator to the variable on the left. In the above example,\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavoriteNumber\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis assigned the value 42. Another\u003cspan\u003e \u003c/span\u003e\u003cem\u003eassignment operator\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator, because it too assigns a new value to the variable on the left based on the value to the right.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u0026gt; myNumber += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\r\n      \u0026gt; myNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere is an assignment operator for each of the mathematical functions: addition, subtraction, multiplication and division.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      +=\r\n      -=\r\n      *=\r\n      \u003cspan class=\"hljs-regexp\"\u003e/=\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen you use any of these assignment operators, the value of the variable on the left side is changed by the math operation and value on the right. Let's do one of each:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt;\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e testNumber = \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u0026gt;testNumber += \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u0026gt;testNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e\r\n      \u0026gt; testNumber -= \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e;\r\n      \u0026gt;testNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e\r\n      \u0026gt;testNumber *= \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\r\n      \u0026gt;testNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e\r\n      \u0026gt;testNumber /= \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e\r\n      \u0026gt;testNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eComparison Operators\u003c/h2\u003e\r\n\u003cp\u003eAssignment operators change the value of the variable on the left of the operator. Comparison operators do not change any values, but return\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e(Boolean) depending on whether the statement evaluates as true or false.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u0026gt; myNumber \u0026lt; \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n      \u0026gt; myNumber \u0026gt; \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n      \u0026gt; myNumber === \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n      \u0026gt; myNumber === \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice the triple equals operator. When we're asking whether something is equal, we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(3 equal signs). When we're setting a variable equal to something, we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(single equal sign). Mixing these up is one of the easiest syntax errors to make. Kindly be careful.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eJavaScript also has an operator with 2 equal signs, but it is almost never used, and you should generally avoid it. It does things like return true for \"2\" == 2, but many of its rules are confusing, inconsistent, and hard to remember. You should have seen that the comparison operators return one of two values:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e. Notice that there are no quotes around these values.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earen't strings - they're called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebooleans\u003c/strong\u003e. They simply represent being true or false. Comparison operators work for strings as well.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e greeting = \u003cspan class=\"hljs-string\"\u003e\"hello world\"\u003c/span\u003e;\r\n      \u0026gt; greeting === \u003cspan class=\"hljs-string\"\u003e\"hello world\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n      \u0026gt; greeting === \u003cspan class=\"hljs-string\"\u003e\"goodbye\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that if you type greeting after this, you will see that the variable\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003egreeting\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003estill contains the string \"hello world\". Comparison operators do not change the value of the variable. Let's look at another example to illustrate that important difference between assignment operators and comparison operators.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u0026gt; myNumber === \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n      \u0026gt; myNumber === \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n      \u0026gt; myNumber = \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u0026gt; myNumber === \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n      \u0026gt; myNumber === \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eCommon comparison operators(Very important!):\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e===\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans \"equal-to\".\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5 === 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"cat\" === \"cat\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluate to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, but\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 === 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"cat\" === \"dog\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluate to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e!==\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans \"not-equal-to\". It is the opposite of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e, so\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"cat\" !== \"dog\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, but\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5 !== 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e, because saying that 5 is not equal to 5 is not true.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans \"greater-than (and not equal to)\".\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026gt; 4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e;\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026gt; 3\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ealso evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e, because 3 is equal to 3 and not greater; and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026gt; 2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the same as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e, except it evaluates to true if the two sides are equal.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026gt;= 3\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to true, and so does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026gt;= 2\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the opposite of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e. It means \"less-than (and not equal to)\".\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026lt; 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026lt; 3\u003c/code\u003eevaluates to false because they are equal.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the opposite of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e. It means \"less-than-or-equal-to\".\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026lt;= 3\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to true because 3 is equal to 3.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026lt;= 1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to false, but\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026lt;= 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Assignment and Comparison Operators\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Assignment and Comparison Operators lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eassignment operator\u003c/li\u003e\r\n\u003cli\u003eComparison operators, including\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTake time to practice using each of these operators by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a comparison operator and an assignment operator?\u003c/li\u003e\r\n\u003cli\u003eWhat is a boolean? What does it represent?\u003c/li\u003e\r\n\u003cli\u003eHow is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator different than the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eMethods Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice assigning and comparing:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet two variables equal to two different numbers. Use a comparison operator to compare these two variables. Change one of their values by using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-=\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*=\u003c/code\u003e, or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator. Then, compare their values again.\u003c/li\u003e\r\n\u003cli\u003eTry out the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperators.\u003c/li\u003e\r\n\u003cli\u003eTry to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e!==\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-operators"},{"id":90,"title":"Tuesday: Data Types","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eData Types\u003c/h1\u003e\r\n \r\n\u003cp\u003eYou've already seen\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enumbers\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003estrings\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebooleans\u003c/strong\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eundefined\u003c/strong\u003e. These are 4 of the 5 basic data types, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eprimitives\u003c/strong\u003e, in JavaScript. The other is\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enull\u003c/strong\u003e, which represents nothingness. Don't worry about\u003cspan\u003e \u003c/span\u003e\u003cem\u003enull\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efor now - we'll learn more about it down the road.\u003c/p\u003e\r\n\u003ch2\u003eData Types\u003c/h2\u003e\r\n\u003ch3\u003eNumber\u003c/h3\u003e\r\n\u003cp\u003eUnsurprisingly, the number type represents numbers.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003e42\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e3.14\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e-10\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(Stands for Not a Number, but is considered a number)\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eInfinity\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e-Infinity\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003evar favouriteNumber = 42;\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou can use certain methods on Numbers:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-number\"\u003e3.14159\u003c/span\u003e.toFixed(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"3.14\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eString\u003c/h3\u003e\r\n\u003cp\u003eAs you've seen, the string type represents text.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003e\"hello, world!\"\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003evar greeting = \"hello, world!\";\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou can use certain methods on strings:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.toUpperCase();\r\n      \u003cspan class=\"hljs-string\"\u003e\"HELLO\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.charAt(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"l\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.toUpperCase().charAt(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"L\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eBoolean\u003c/h3\u003e\r\n\u003cp\u003eBooleans can only hold 2 possible values -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e \u0026gt; \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e \u0026gt; \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.charAt(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e) === \u003cspan class=\"hljs-string\"\u003e\"e\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e enrolledAtEpicodus = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou'll discover soon just how important booleans are to programming.\u003c/p\u003e\r\n\u003ch3\u003eUndefined\u003c/h3\u003e\r\n\u003cp\u003eThe undefined data type has only one possible value -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWhen declaring a variable without giving it a value (\u003ccode\u003evar myNumber;\u003c/code\u003e), JavaScript creates the variable without a value, hence\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eundefined\u003c/strong\u003e. Even when declaring a variable and assigning it a value at the same time (\u003ccode\u003evar favoriteNumber = 42;\u003c/code\u003e), JavaScript actually creates the variable initially without a value, temporarily giving it a value of\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eundefined\u003c/strong\u003e, before then assigning it the value to the right of the equals sign. This is kind of a subtle point, so don't worry too much about it at the moment.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAdditionally, there are some functions and methods that do not return any value, in which case the return value is actually\u003cspan\u003e \u003c/span\u003e\u003cem\u003eundefined\u003c/em\u003e. (You'll learn more about this when we learn how to write our own methods and functions.)\u003c/p\u003e\r\n\u003ch2\u003eData Type Detection\u003c/h2\u003e\r\n\u003cp\u003eIt's important to understand the difference between the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the string \"5\". To the computer, they are two entirely different things, as illustrated by this example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myOtherNumber = \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myText = \u003cspan class=\"hljs-string\"\u003e\"5\"\u003c/span\u003e;\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myOtherText = \u003cspan class=\"hljs-string\"\u003e\"10\"\u003c/span\u003e;\r\n      \u0026gt; myNumber + myOtherNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e\r\n      \u0026gt; myText + myOtherText;\r\n      \u003cspan class=\"hljs-string\"\u003e\"510\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we added\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e10\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe got\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e15\u003c/code\u003e, but when we added\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"10\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"5\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eit concatenated the two strings together.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLikewise, the boolean\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not the same as the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"true\"\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIn the example above, somewhat confusingly, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator works on both numbers and strings - just differently. Usually methods will only work on a specific data type. For example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e48432.78.toExponential();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eworks just fine, but trying to do\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"48432.78\".toExponential();\u003c/code\u003eresults in an error because there is no\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoExponential()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that works on a string. Likewise,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"hello\".charAt(2);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eworks, but\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e314159.charAt(2);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edoes not.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWe can check the data type of a variable or value as follows:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"number\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"5\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"boolean\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e greeting = \u003cspan class=\"hljs-string\"\u003e\"hello world\"\u003c/span\u003e;\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e greeting;\r\n      \u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eData Type Conversion\u003c/h2\u003e\r\n\u003cp\u003eOften input from a web browser will come in as a string and we will need to convert it to a number before working with it.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWe can convert a string to a number by passing a string to the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eparseInt()\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efunction (more on functions soon):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedAge = \u003cspan class=\"hljs-string\"\u003e\"45\"\u003c/span\u003e;\r\n      \u0026gt; inputtedAge;\r\n      \u003cspan class=\"hljs-string\"\u003e\"45\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e inputtedAge;\r\n      \u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myAge = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(inputtedAge);\r\n      \u0026gt; myAge;\r\n      \u003cspan class=\"hljs-number\"\u003e45\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e myAge;\r\n      \u003cspan class=\"hljs-string\"\u003e\"number\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote that if you try to use parseInt() to convert a string not actually containing a number, the result is the \"number\"\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e name = \u003cspan class=\"hljs-string\"\u003e\"Andrea\"\u003c/span\u003e;\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nonsense = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(name);\r\n      \u0026gt; nonsense;\r\n      \u003cspan class=\"hljs-literal\"\u003eNaN\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you need to go the other way around, you can convert a number to a string by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoString()\u003c/code\u003emethod on the number:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e;\r\n      \u0026gt; myNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e myNumber;\r\n      \u003cspan class=\"hljs-string\"\u003e\"number\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e convertedNumber = myNumber.toString();\r\n      \u0026gt; convertedNumber;\r\n      \u003cspan class=\"hljs-string\"\u003e\"42\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e convertedNumber;\r\n      \u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Data Types\u003c/h2\u003e\r\n\u003cp\u003eGoal: In the Data Types lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e5 data types - number, string, boolean, undefined, null\u003c/li\u003e\r\n\u003cli\u003eMethods are generally specific to a data type\u003c/li\u003e\r\n\u003cli\u003eHow to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etypeof\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto check data type\u003c/li\u003e\r\n\u003cli\u003eHow to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.toString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto convert between numbers and strings\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eExplore these different data types and their corresponding methods by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat data type is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e? What about\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eInfinity\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eHow do we tell what data type something is?\u003c/li\u003e\r\n\u003cli\u003eName one way to convert something of one data type into another data type.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eData Types Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice checking and converting data types by doing the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet a variable equal to your favorite number and check the data type.\u003c/li\u003e\r\n\u003cli\u003eThen, create a new variable converting the previous variable to a string. Check the data type again.\u003c/li\u003e\r\n\u003cli\u003eNext, create a third variable, converting this string variable back to a number. Check the data type one more time.\u003c/li\u003e\r\n\u003cli\u003eCompare the first and third variables using === to confirm that they are equal.\u003c/li\u003e\r\n\u003cli\u003eCompare the first and second variables or second and third variables to confirm that they are NOT equal.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"tuesday-data-types"},{"id":91,"title":"Tuesday: Functions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eFunctions\u003c/h2\u003e\r\n\u003cp\u003eSo far, none of the JavaScript we've learned has let us do anything with a web page. Let's try something a little more interesting:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; alert(\u003cspan class=\"hljs-string\"\u003e\"Hello world!\"\u003c/span\u003e);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWow! When you press enter, the page pops open a dialog box that says \"Hello world!\". Exciting stuff!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efunction\u003c/strong\u003e. A function is something that performs an action. Just like a method, a function can take an argument. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction pops up a dialog box with the string that you pass in as an argument.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere's another JavaScript function that takes a string as an argument:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; prompt(\u003cspan class=\"hljs-string\"\u003e\"What is the air-speed velocity of an unladen swallow?\"\u003c/span\u003e);  \u003cspan class=\"hljs-comment\"\u003e// I'm going to type \"African or European?\"\u003c/span\u003e\r\n      \u003cspan class=\"hljs-string\"\u003e\"African or European?\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn JavaScript, everything after the // is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecomment\u003c/strong\u003e, and is ignored. Comments are a convenient way to leave notes in your code for yourself or other programmers. This dialog box lets you type in a response, and then that response is\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ereturned\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. One cool thing we can do here is a set a variable equal to the response, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteColor = prompt(\u003cspan class=\"hljs-string\"\u003e\"What is your favorite color?\"\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e// I'm going to type \"green\"\u003c/span\u003e\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; favoriteColor;\r\n      \u003cspan class=\"hljs-string\"\u003e\"green\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we created a variable named favoriteColor and assigned it to hold the string inputted by the user.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eJust like we could chain methods to each other, we can also chain methods to a function:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; prompt(\u003cspan class=\"hljs-string\"\u003e\"Type something in lowercase:\"\u003c/span\u003e).toUpperCase(); \u003cspan class=\"hljs-comment\"\u003e// I'm going to type \"lowercase\"\u003c/span\u003e\r\n      \u003cspan class=\"hljs-string\"\u003e\"LOWERCASE\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnother built-in function that allows us to interact with the webpage user is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. This too takes a string as an argument.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; confirm(\u003cspan class=\"hljs-string\"\u003e\"Are you sure?\"\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e// I'm going to press the OK button\u003c/span\u003e\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTry it out for yourself in the JavaScript console. You should have seen that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns one of two values:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e. Notice that there are no quotes around these values. That is because these are\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebooleans\u003c/strong\u003e, not strings. They simply represent being true or false. You saw them before when you worked with comparison operators. And on that note, you might have noticed that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturned\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e, also without quotes.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply represents that nothing has been returned from the function, or, as you saw earlier, that a variable hasn't been assigned a value.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIt is good to be conscious of what arguments a function takes, and what data type it returns. Here is a table showing that information for the three built-in functions introduced in this lesson:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/function-arguments-returns.png\" alt=\"function argument returns\"\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction does not return anything useful, which is fine because you would just use it to display some information to the user - it is a way of outputting information, not of collecting information. On the other hand, you would want to somehow collect the user's response to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eprompt()\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003econfirm()\u003c/em\u003efunctions - likely by assigning the returned value to a variable as demonstrated above with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar favoriteColor = prompt(\"What is your favorite color?\");\u003c/code\u003e. That way you can actually do something with the inputted information rather than just ignoring it.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Functions\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Functions video, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFunctions perform actions in the browser\u003c/li\u003e\r\n\u003cli\u003eExamples of JavaScript functions are\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eMethods can be chained onto functions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFunctions are an incredibly important part of programming, and you'll be using them constantly. Begin to get the hang of calling some common JavaScript functions by completing the practice exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow can we comment out code?\u003c/li\u003e\r\n\u003cli\u003eWhat happens when we run code that is commented out?\u003c/li\u003e\r\n\u003cli\u003eWhat are the differences between the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunctions in JavaScript?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eFunctions Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice using JavaScript functions:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto pop up a dialog box with a warning for the user.\u003c/li\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ask a yes or no question.\u003c/li\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ask a question.\u003c/li\u003e\r\n\u003cli\u003eSave the response to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a variable. All responses entered by a user in to a prompt input filed are saved as strings (even if the user enters 10, the value is saved as the string, \"10\"). Run at least 3 string methods of your choice on the string variable that you create from the prompt.\u003c/li\u003e\r\n\u003cli\u003eAsk a new question and save the response as a new variable and run 3 different string methods on it.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eParsing Integers\u003c/h2\u003e\r\n\u003cp\u003eThe most common error beginning JavaScript students experience is attempting to call functions meant for numbers on strings. This happens especially frequently because\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall values returned from a prompt are saved as strings\u003c/strong\u003e. Even if the user enters a number into a prompt without quotation marks! Unfortunately, this is simply how JavaScript works. If we wanted to collect a value from a user with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e, and perform arithmetic with this value, we would need to convert it into a number with JavaScript's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. If not, we would receive some very unexpected output.\u003c/p\u003e\r\n\u003ch2\u003eCommon Data Type Errors\u003c/h2\u003e\r\n\u003cp\u003eHere's what can happen if you\u003cspan\u003e \u003c/span\u003e\u003cem\u003edon't\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eparse integers correctly. In the example below, we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ask the user how old they are. The user enters 35. We then attempt to perform some arithmetic on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter your age: \"\u003c/span\u003e);\r\n      \u0026gt; age + age;\r\n      \u003cspan class=\"hljs-number\"\u003e3535\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRemember,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall values returned from a prompt are strings!\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eSo, even though the user entered a number,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis actually equal to the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"35\"\u003c/code\u003e. Since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator can be used to concatenate strings age\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003eage actually returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"3535\"\u003c/code\u003e, instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e70\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eUsing parseInt() to Avoid Data Type Errors\u003c/h2\u003e\r\n\u003cp\u003eTo make a string a number, we parse it using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"5\"\u003c/span\u003e);\r\n      \u0026gt; number;\r\n      \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSo, to change our age from the example above into an integer, we do the following:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedAge = prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter your age: \"\u003c/span\u003e);\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(inputtedAge);\r\n      \u0026gt; age + age;\r\n      \u003cspan class=\"hljs-number\"\u003e70\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAlternatively, the code does the exact same thing on a single line. Here we immediately pass the string returned by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction as the argument to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter your age: \"\u003c/span\u003e));\r\n      \u0026gt; age + age;\r\n      \u003cspan class=\"hljs-number\"\u003e70\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cp\u003eNote: The\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInt\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epart of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis short for integer, which means it's a whole number. If we wanted to convert something into a number with a decimal, we'd use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseFloat()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e pi = \u003cspan class=\"hljs-string\"\u003e\"3.14\"\u003c/span\u003e;\r\n      \u0026gt; \u003cspan class=\"hljs-built_in\"\u003eparseFloat\u003c/span\u003e(pi);\r\n      \u003cspan class=\"hljs-number\"\u003e3.14\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eFloating point\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003enumbers are simply numbers with decimals. If you're parsing a whole number, use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e, if you're parsing a number containing a decimal point, use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseFloat()\u003c/code\u003e.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003eFunctions\u003c/h2\u003e\r\n\u003cp\u003eIn the previous lesson we saw how to use a few built-in JavaScript functions. Now let's write some custom functions. We're going to write a very simple function to start. We'll give it the name\u003cspan\u003e \u003c/span\u003e\u003cem\u003esayHi\u003c/em\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sayHi = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{ alert(\u003cspan class=\"hljs-string\"\u003e'Hello from Moringa School!'\u003c/span\u003e); };\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; sayHi();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eEvery time we run the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esayHi()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction it executes all JavaScript code between the opening and closing braces -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e{\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e}\u003c/code\u003e. In this case it simply pops up a dialog box with the text\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHello from Moringa School!\u003c/em\u003e. This isn't terribly useful, so let's write a slightly more interesting function, which we'll call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e saySomething = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ewhatToSay\u003c/span\u003e) \u003c/span\u003e{ alert(whatToSay); };\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; saySomething(\u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you know, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"hello!\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ean\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eargument\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto the function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e. In the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, that argument is assigned to the variable whatToSay - we call that variable a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eparameter\u003c/strong\u003e. If you're confused about the difference between arguments and parameters, just remember that\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethe argument is the information you pass in, and the parameter is the variable that receives the argument.\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eIn this case,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"hello!\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the argument, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the parameter. The parameter can then be used just like any other variable. If this is unclear, reread it and play around with writing your own functions. Be sure you understand how to write a function that uses an argument passed in. Okay, on to another, slightly more complex function:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{ \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2; };\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; add(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword tells JavaScript to give us the result from that line of code. Without a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e, JavaScript will return\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the function, which is JavaScript's way of saying something does not have a value. Let's step through exactly what happens if we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd(3, 5)\u003c/code\u003e:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWe call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction with the arguments\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e(3, 5)\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction is run. The parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis set equal to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3\u003c/code\u003e, and the parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis set equal to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e3 + 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis run.\u003c/li\u003e\r\n\u003cli\u003eThe result of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 + 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis returned.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction ends.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eNotice our variables names:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber2\u003c/code\u003e. We could have called them\u003cspan\u003e \u003c/span\u003e\u003ccode\u003en1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003en2\u003c/code\u003e, and it would have taken less typing. But the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003every clearly expresses what the variable is for, whereas\u003cspan\u003e \u003c/span\u003e\u003ccode\u003en1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill require another programmer (or your future self, when you come back to your code in a few months and don't remember exactly how it works) to figure it out from context. In this example, it would be pretty obvious what\u003cspan\u003e \u003c/span\u003e\u003ccode\u003en1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis for. But if you practice choosing descriptive names now and resisting the temptation to abbreviate, you will be in the habit of doing it when you're writing more complex code where it matters more.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003eJSFiddle\u003c/h2\u003e\r\n\u003cp\u003eIn the writing functions lesson we wrote all of our functions in the JavaScript console. This works for very simple functions that can be written on a single line, but it quickly becomes unwieldy as we want to write longer functions. There are a few solutions. You can write your functions in Atom and then copy \u0026amp; paste into the JavaScript console. Or you can try out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e, a useful tool for experimenting with JavaScript. With JSFIddle, you can write code in the JavaScript box and then execute it by clicking the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton on the menu bar at the top of the JSFiddle page.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/jsfiddle-screenshot.png\" alt=\"JS fiddle screenshot\"\u003e\r\n\u003cp\u003eType this out in the JavaScript box at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e saySomething = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ewhatToSay\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(whatToSay);\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWriting out your functions on multiple lines is clearer even with these simple functions; it will be essential when you begin writing more complex functions. Hit the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRun\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebutton and... nothing happens. This is because we have simply defined two functions and made them available for future use. We have not yet\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecalled\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe functions, so the code inside of them has not yet been executed. Now add this line after the other lines:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      saySomething(\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHit the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRun\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebutton again and you should see an alert pop up.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eNow add another line:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      add(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHit\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRun\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand you should still see your alert popup, but the new line you added doesn't appear to do anything. This is because our add() method\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ereturns\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethe result, but we don't do anything with that return value. When we were running this code directly in the JavaScript console, the console automatically displays any return value. But in \"real life\" programming if you want to display something, you have to tell the computer to do that. We have a variety of options available to us. We could, for instance, assign the return value to a variable and then display it by calling the built-in JavaScript\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealert()\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efunction.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = add(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);\r\n      alert(result);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we hit Run we should get an alert with our result, 8. If you aren't seeing the alert, make sure that you didn't delete your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction definition code. Let's update our little program to make use of both functions:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e saySomething = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ewhatToSay\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(whatToSay);\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = add(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e outputText = \u003cspan class=\"hljs-string\"\u003e\"The sum is \"\u003c/span\u003e + result + \u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e;\r\n      saySomething(outputText);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar result = add(3, 5);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eline calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, passing it 2 arguments - the number 3 and the number 5. Our add() function at this point assigns the first argument (\u003ccode\u003e3\u003c/code\u003e) to the parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the second argument (\u003ccode\u003e5\u003c/code\u003e) to the parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber2\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction then returns the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(in this case), which our code assigns to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresult\u003c/code\u003e. Hence the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is now the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThe next line -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar outputText = \"The sum is \" + result + \".\";\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- concatenates three things together into a new string, which it then assigns to a new variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutputText\u003c/code\u003e. Note that result above is not in quotes. If you wrote\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar outputText = \"The sum is \" + \"result\" + \".\";\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethen outputText would be the string The sum is result. But because we did not put result in quotes, the computer understands the result variable's value (\u003ccode\u003e8\u003c/code\u003e) should be substituted here. Hence the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutputText\u003c/code\u003evariable is assigned the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is 8.\"\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThe last line -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething(outputText);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- calls our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, passing it the value that the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutputText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis standing in for - the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is 8.\"\u003c/code\u003e. Our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction assigns that string passed in to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e. It then calls the built-in JavaScript function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein order to pop up a dialog box with that string.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIf desired, you could refactor those last three lines into one line:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e saySomething = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ewhatToSay\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(whatToSay);\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      saySomething(\u003cspan class=\"hljs-string\"\u003e\"The sum is \"\u003c/span\u003e + add(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e) + \u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThat refactored line calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and passes it a string, which is concatenated together from 3 parts. The first part is just the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is \"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the last part is just the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\".\"\u003c/code\u003e. The second part is the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause that is the return value of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction when passed the arguments\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e. Hence the concatenated string:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is 8.\"\u003c/code\u003e\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Writing Functions\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the previous lessons, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eArguments to functions can be assigned to variables called parameters\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword tells JavaScript to return the result from the line of code\u003c/li\u003e\r\n\u003cli\u003eDon't abbreviate variable names because it can get confusing after time has passed\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBegin familiarizing yourself with writing custom functions in JSFiddle by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we call a function?\u003c/li\u003e\r\n\u003cli\u003eWhat is a parameter, and how do we provide one to a function?\u003c/li\u003e\r\n\u003cli\u003eWhen do we need to parse integers?\u003c/li\u003e\r\n\u003cli\u003eWhat is a return value? How do we tell our functions what value to return?\u003c/li\u003e\r\n\u003cli\u003eWhat method is responsible for parsing integers?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eWriting Custom Functions\u003c/h3\u003e\r\n\u003cp\u003eWrite custom function for each of the following prompts. Then, call the function providing the necessary parameters to see if your function successfully returns the correct value. And don't forget to parse integers when necessary!\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTake somebody's name and say a greeting to them;\u003c/li\u003e\r\n\u003cli\u003eWrite a function to subtract two numbers;\u003c/li\u003e\r\n\u003cli\u003eNow one to multiply two numbers. Then create a new function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethreeTimes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto multiply three numbers together.\u003c/li\u003e\r\n\u003cli\u003eNow write one to divide two numbers. Then write a new function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eremainder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto find the remainder of two numbers.\u003c/li\u003e\r\n\u003cli\u003ePrompt the user to enter their age, another prompt to enter their name and another prompt to enter their favorite food. Pass these as arguments to a function that returns a sentence combining all of this information. Then display the returned string with an alert.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eBusiness and User Interface Logic\u003c/h2\u003e\r\n\u003cp\u003eWell-organized code is easier to debug, it appears more professional, and is easier to revisit later. Writing organized code is a highly-valued skill in the programming field. When working on a team, you'll often collaborate with other developers. Clean code is easier for others to understand and contribute to. Before we begin writing more complex JavaScript, let's make sure we understand how to organize our code using best, most professional practices from the very beginning.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOne of the most important organizational rules to follow is keeping what is known as your user interface and business logic separate. We haven't written any user interface logic\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyet\u003c/em\u003e, but we will in upcoming lessons. In this lesson we'll explore what user interface and business logics are, and what each handles.\u003c/p\u003e\r\n\u003ch3\u003eUser Interface and Business Logics\u003c/h3\u003e\r\n\u003cp\u003eConsider a basic calculator application. Its code falls into two categories: Code that performs calculations, or code responsible for interacting with the user.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThe code that handles arithmetic is the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eback-end\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness logic\u003c/strong\u003e. It's the 'inner workings' of the application that performs calculations and returns a value. It's what takes the numbers\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e, adds them together, and arrives at\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e9\u003c/code\u003e. The functions we've explored so far are all back-end logic.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThe code that handles interacting with user is the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efront-end\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003elogic. It retrieves information from the user and provides it to the business logic to calculate. While buttons on a calculator may be\u003cspan\u003e \u003c/span\u003e\u003cem\u003elabeled\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith numbers, they're just visual buttons. User interface logic is what translates clicking on this area of the page:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/button-on-calculator.png\" alt=\"calculator image\"\u003e\r\n\u003cp\u003e... into the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e. After all, we cannot perform addition on\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuttons\u003c/em\u003e, but you can perform addition on\u003cspan\u003e \u003c/span\u003e\u003cem\u003enumbers\u003c/em\u003e. The user interface logic registers that the user has pushed the button labelled \"4\". It then provides the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the back-end logic where we may perform calculations with it.\u003c/p\u003e\r\n\u003cp\u003eLet's say we also press the buttons labelled \"+\" and \"5\". The user interface logic also translates these interactions into the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand recognizes it will need a method for addition. The back-end logic then adds the numbers\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etogether, and returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e9\u003c/code\u003e. The front-end/user interface logic can then display this result to the user:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/result-displayed-from-calculator.png\" alt=\"calculator image with result\"\u003e\r\n\u003cp\u003eUser interface/front-end logic handles interacting with the user; including displaying or gathering information. The business/back-end logic handles calculating or manipulation information 'behind the scenes'.\u003c/p\u003e\r\n\u003ch3\u003eSeparation of Logic\u003c/h3\u003e\r\n\u003cp\u003eRemember, we want to write clean, well-organized code.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBecause user interface and business logics have separate purposes, their code should always be separate\u003c/strong\u003e. So far, we've only written business logic, so we don't have much to worry about. But keep this rule in mind as we begin to explore user interface logic with jQuery in the coming lessons.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAlso, it's okay if everything we discussed isn't entirely clear right now. Just understand the basic differences between these two logics, and know they should be separate. Throughout the week we will see what this actually looks like in practice. By keeping this basic information in mind before we write more complex JavaScript, you'll learn the most professional practices from the very beginning!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eYou may checkout\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://blog.teamtreehouse.com/i-dont-speak-your-language-frontend-vs-backend\" target=\"_blank\"\u003ethis blog by treehouse\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information on frontend vs backend in the context of web development.\u003c/p\u003e","exportId":"tuesday-functions"},{"id":92,"title":"Tuesday: Calculator","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eCalculator: Business Logic\u003c/h2\u003e\r\n\u003cp\u003eNow that we can write custom JavaScript functions, let's create a simple calculator application! We'll begin with the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eback-end\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness logic\u003c/strong\u003e, and focus first on creating the ability to add numbers together. We'll later include subtraction, multiplication and division, and add the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efront-end\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003elogic.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBecause we've not yet learned about user interface/front-end logic, the difference between front-end logic and back-end logic (or business and user interface logics) might not feel very clear. This is okay! For now, simply know that what we're creating here is business, or back-end logic because it handles the core functionality and computations of the application. Later on we'll learn about jQuery and creating user interfaces, and we'll revisit the differences between the two types of logic.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's write the whole thing in JSFiddle first, then we'll transfer it into our own project.\u003c/p\u003e\r\n\u003ch3\u003eDefining an Addition Function\u003c/h3\u003e\r\n\u003cp\u003eWe've already written an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, so let's use that as a jumping off point. Clear out your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJSFiddle\u003c/em\u003eJavaScript box and put in just your custom\u003cspan\u003e \u003c/span\u003e\u003cem\u003eadd()\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efunction:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n    };\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAdd in a line at the bottom of your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJSFiddle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003escript, below the function definition. This line will call our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, passing it two arguments. The return value from that function is immediately passed to JavaScript's built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. When the script is run, it should pop up a dialog box with the value that the add function returns when passed those two arguments.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      alert(add(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e));\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eGathering User Input\u003c/h3\u003e\r\n\u003cp\u003eNow we have a simple (addition-only) calculator, but it isn't very useful because you have to go in and modify the code every time you want to do a new calculation. Let's add in the ability to collect input from the user. Remember that we can collect input through the built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, which takes a string as an argument and returns a string containing the user's input.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter a number:\"\u003c/span\u003e);\r\n\r\n      alert(number1);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNot very exciting. All we did was echo back to the user what they entered. But let's ask for two inputs and then use them as arguments to our function.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter a number:\"\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter another number:\"\u003c/span\u003e);\r\n\r\n      alert(add(number1, number2));\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eParsing Integers\u003c/h3\u003e\r\n\u003cp\u003eOops. We have the problem we previously encountered where the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction returns strings, so the + operator we use inside of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction concatenates the two strings together rather than doing what we want. Because our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction expects numbers as arguments rather than strings, we must convert the inputs into numbers before calling our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter a number:\"\u003c/span\u003e));\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter another number:\"\u003c/span\u003e));\r\n\r\n      alert(add(number1, number2);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we're getting somewhere! In the next exercise, you'll add in support for subtraction, multiplication and division, but first let's move this code into a project so that we can save it and build on it without having to use JSFiddle.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not exit JSFiddle yet.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the next lesson we'll migrate the code we've created here in JSFiddle into a new project directory in Atom.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Calculator Business Logic\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003eContinue to practice writing JavaScript functions by beginning the business logic for a calculator app. Later, we'll add user interface logic too, and familiarize ourselves with the differences between code for each, and how to keep them separated and organized.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between business and user interface logic?\u003c/li\u003e\r\n\u003cli\u003eWhat's another word for business logic? What about user interface logic?\u003c/li\u003e\r\n\u003cli\u003eHow do you provide a function multiple arguments?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eCalculator\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the previous lesson to begin building a calculator app. Once you've written the code detailed in that lesson, create a project and migrate your code from JSFiddle into Atom by doing the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a calculator project folder on your computer.\u003c/li\u003e\r\n\u003cli\u003eInitialize a git repository in your newly created project folder.\u003c/li\u003e\r\n\u003cli\u003eCreate js and css folders in your project folder.\u003c/li\u003e\r\n\u003cli\u003eCreate an empty scripts.js file in your project's js subdirectory.\u003c/li\u003e\r\n\u003cli\u003eCopy the code from your JSFiddle into your scripts.js file to save it.\u003c/li\u003e\r\n\u003cli\u003eCreate an HTML file in your project directory and include in it a link to your scripts file: \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt; (see below for example html file)\u003c/li\u003e\r\n\u003cli\u003eAdd a README.md file.\u003c/li\u003e\r\n\u003cli\u003eAdd everything to your local git repository and commit the changes.\u003c/li\u003e\r\n\u003cli\u003eCreate a calculator repository on GitHub and push your project to GitHub.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eExample\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHTML File\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eExample\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejavascript file\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter a number:\"\u003c/span\u003e));\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter another number:\"\u003c/span\u003e));\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = add(number1, number2);\r\n      alert(result);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you open your HTML file in the web browser, it should run your code just like it did on JSFiddle; popping up prompt boxes for input and then an alert with the calculated result. If this isn't working, check that you correctly link to your scripts file and that your scripts file includes both the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and code that actually calls that function. If something on your page isn't working right, an excellent initial troubleshooting step is to check the JavaScript console to see if there are any helpful error messages that might point you in the right direction.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eNext, create functions to\u003cspan\u003e \u003c/span\u003e\u003cem\u003esubtract\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emultiply\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003edivide\u003c/em\u003e. Verify that all four work by changing the line near the bottom of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(currently reads\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar result = add(number1, number2);\u003c/code\u003e) to call different functions. For now you must manually change that line to choose between operations. In upcoming lessons we'll build a user interface for our calculator so that the user can choose between addition, subtraction, multiplication and division.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not build out the user interface yet. For now just focus on the business logic\u003c/strong\u003e.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Custom Functions Practice\u003c/h3\u003e\r\n\u003cp\u003e(You can do these in JSFiddle)\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWrite a function that calculates BMI using two arguments. Then write another function that prompts the user for their height and weight, uses the BMI function and alerts the user of their BMI.\u003c/li\u003e\r\n\u003cli\u003eWrite a function that converts temperature between celsius and fahrenheit.\u003c/li\u003e\r\n\u003cli\u003eWrite functions to be used by a cooking app that convert between units. For example, a function that converts gallons to liters. Create a project for this like you did for the calculator, so that you can return and build a front-end for this later.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003e\u003cem\u003eIf you finish today's lessons and exercises with time to spare, spend the rest of your day exploring the following additional content:\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eRegular Expressions\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eRegular Expressions\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare search strings used to locate and manipulate content that matches a particular pattern.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere is an example of a variable set to a regular expression:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sample_regex = \u003cspan class=\"hljs-regexp\"\u003e/moringaschool/gi\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe characters between the / slashes represent the regular expression. The characters following the regular expression,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egi\u003c/code\u003e, are modifiers. The g stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"global\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand the i stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecase insensitive\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's try it out:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eGo to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://regex101.com/\" target=\"_blank\"\u003eRegular Expressions 101\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eIn the Test String area, add this string: This is a big ol' long string with the word, Moringa, in it. We'll also add school, School, SCHooL and SchOOL just for searching fun.\u003c/li\u003e\r\n\u003cli\u003eIn the Regular Expression fields, add \"Moringaschool\" between the slashes / MoringaSchool /.\u003c/li\u003e\r\n\u003cli\u003eNotice that all lowercase\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMoringaSchool\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eappears in blue in the Test String area. This indicates a match with the pattern of the regular expression.\u003c/li\u003e\r\n\u003cli\u003eTry adding the i modifier. What happens?\u003c/li\u003e\r\n\u003cli\u003eTry adding the g modifier now. What happens?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTo learn all of the characters used when creating regular expressions, visit the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\"\u003eMDN documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eor just experiment on the Regex101 site paying attention the explanation area for what is happening. To use regular expressions to find and replace text that matches patterns, try using the built-in JavaScript method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.replace()\u003c/code\u003e`. Here's an example from MDN that you can try in JSFiddle:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e str = \u003cspan class=\"hljs-string\"\u003e'Twas the night before Xmas...'\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newstr = str.replace(\u003cspan class=\"hljs-regexp\"\u003e/xmas/i\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Christmas'\u003c/span\u003e);\r\n      alert(newstr);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo practice how regular expressions create patterns, see how far you can get in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://regexcrossword.com/\" target=\"_blank\"\u003eRegex Crossword\u003c/a\u003e.\u003c/p\u003e","exportId":"tuesday-calculator"},{"id":93,"title":"Wednesday: Introduction to JQuery(Javascript Library)","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eIntro to JQuery\u003c/h2\u003e\r\n\u003cp\u003eNow that we know a bit of JavaScript, let's learn jQuery, a JavaScript library that makes it easy to make web pages interactive. Let's start by learning how to pop up dialogue boxes when you click certain parts of the page.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eImportant Note: jQuery is updated constantly! Faster than we can reasonably update this lesson! As such, make sure your \u0026lt;script\u0026gt; tag links to the specific version and filename your project is using (e.g.\u003cspan\u003e \u003c/span\u003e\u003cem\u003esrc=\"js/jquery-1.12.4.js\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003cem\u003esrc=\"js/jquery-1.10.2.js\"\u003c/em\u003e). The versions depicted in the \u0026lt;script\u0026gt; tags in this lesson likely won't match the version in your project. Also, there is the shortcut of abbreviating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$()\u003c/code\u003e. We've since updated this lesson's text to use the first, more explicit version after observing confusion from students. Know that these things are the same, and one is simply a shortcut for the other.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eSetup a new project. (Make a project folder, create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejs\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecss\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolders inside of it, and initialize the git repository.)First, we need to add two files into our project's js folder - the jQuery library file and our custom scripts file. Go ahead and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jquery.com/download/\"\u003edownload jQuery\u003c/a\u003e. Choose the uncompressed, development version and save it into your project's js folder. Then, also inside your project's js folder, make an empty file called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escripts.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto store our own JavaScript code.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg class=\"folder\" src=\"http://moringaprep-ft.herokuapp.com/assets/images/folder-structure.png\" alt=\"Folder Structure\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBegin developing our page with this HTML in a file in our project directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML help\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML help\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis is a very special page. If you click somewhere, it will tell you what type of HTML element you clicked on.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLook at this cute walrus!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.9.1.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"xml\"\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIt's important that our own\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escripts.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile goes after jQuery, as it will rely on jQuery functionality that must be loaded first. Make sure your link to the jQuery file is correct, with the version number matching what you downloaded.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOkay, we're finally ready to use jQuery! Here's the code to type in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escripts.js\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\njQuery(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{  \r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n  });\r\n\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a paragraph.\"\u003c/span\u003e);\r\n  });\r\n\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is an image.\"\u003c/span\u003e);\r\n  });\r\n});\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBe sure you're indenting correctly! The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003es are two spaces in, because they're inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efunction()\u003c/code\u003es. If we load up the page and click on different parts, we'll get dialog boxes popping up and telling us what they are. Hooray! Now, let's look more closely at how this works. Here we have a new function: the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction! One thing that the jQuery function does is to select HTML elements on the page, based on the argument you pass in to it. So the code\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery(\"p\")\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselects all of the paragraphs on the page. After we select the elements, we use jQuery's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.click()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to attach an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eevent handler\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto each of the selected elements. The event handler \"listens\" to the elements and responds when they're clicked. Next, we need to tell jQuery what to do when the user clicks that element. We pass in a function as an argument. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efunction()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe're using here is just like the ones we practiced before, but we aren't assigning it to a variable and we're passing it as an argument to another function. This is called an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eanonymous callback function\u003c/strong\u003e. It is a callback function because it is not executed immediately; instead the function is passed in to the jQuery\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to be executed at a future time - in the case of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.click()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, when that event handler is triggered by a user clicking on any of the selected elements. Inside the callback function, we can put whatever code we want, just like in the functions we wrote before. Here we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to pop up a dialog box with some helpful information. We could actually pop up two alerts, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      jQuery(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"I told you, THIS IS A HEADER!\"\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo reiterate, when you pass in a function as an argument to another function, the function being passed in is called a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecallback\u003c/code\u003e. Phew! That's a lot of work just to make a few silly pop-ups. Fortunately, even though this might feel a bit overwhelming at first, most of the jQuery we'll write will look an awful lot like this, so you'll get the hang of it pretty quickly. Let's do a couple things to clean up our code. First, it feels a bit wrong to put our \u0026lt;script\u0026gt; tags in the document body, where the content of the page lives. Let's move them up into the \u0026lt;head\u0026gt;, which is where we put information about the page that isn't displayed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.9.1.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML help\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOh dear. Now, if we reload the page in our browser, nothing happens when we click anything. Let's review our JavaScript to see why this broke it. Remember that I said that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery('p')\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill look for all of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags on the page? The web browser loads your page from the top of your HTML document to the bottom. So when we put our JavaScript in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e, rather than at the end of the document, there are no\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags yet, and so there's nothing for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.click()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto attach to. What we need to do is tell our JavaScript not to run until the document has finished loading. Fortunately, jQuery provides an easy way to do this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    jQuery(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      jQuery(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n      });\r\n\r\n      jQuery(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is a paragraph.\"\u003c/span\u003e);\r\n      });\r\n\r\n      jQuery(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is an image.\"\u003c/span\u003e);\r\n      });\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we tell jQuery to look at the HTML document, and then we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on it. When the document has finished loading, jQuery will run the callback function that is passed into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ready()\u003c/code\u003e. And that function will run our code. Generally, it's a good idea to wrap your JavaScript in a function passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ready()\u003c/code\u003e, so that it's executed after the page loads and you don't run into the problem we just had. Check out our page - it works again. There's a handy shortcut that most JavaScript developers use: instead of writing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eall of the time, we can simply use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n      });\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is a paragraph.\"\u003c/span\u003e);\r\n      });\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is an image.\"\u003c/span\u003e);\r\n      });\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis isn't really necessary, but it saves us a little bit of repetitive typing, and is how most people write the jQuery function. Here's one final trick I want to show you. If something on your page isn't working right, you can check in Chrome to make sure that you've attached the event listener correctly. Right-click the element you want to check, go to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect Element\u003c/em\u003e, and then, in the upper right corner of the box on the bottom, click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEvent Listeners\u003c/em\u003e. If you've attached the listener correctly, you should see it listed there.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eCode: Cipher\u003c/h2\u003e\r\n\u003cp\u003ePractice writing functions for encoding a sentence from your user, as if you wanted to keep someone from reading it. To complete this exercise, review previous lessons and the JavaScript methods we've covered thus far. You may also need to research new methods.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a JavaScript file and an HTML file in Atom for this project so that you can load your JavaScript in the browser.\u003c/li\u003e\r\n\u003cli\u003eStart by prompting your user to enter a sentence. Then, store the sentence in a variable and print it to the console to be sure that you are doing this step correctly.\u003c/li\u003e\r\n\u003cli\u003eCreate a function that will take the first and last letter of the sentence, capitalize them, and return this as a new string.\u003c/li\u003e\r\n\u003cli\u003eCreate another function that will reverse the order of these two letters and return the result.\u003c/li\u003e\r\n\u003cli\u003eCreate a third function that calls the other two functions you've just created. For example, if I enter the sentence \"I am a sentence\", it should enter your first function (which should output \"IE\"), then call your second function, passing in the output value from the previous. It would return \"EI\" to me.\u003c/li\u003e\r\n\u003cli\u003eAdd code to your third function to concatenate the new two-letter string together with the original phrase. It should add the two-letter string at the end, forming the final result \"I am a sentenceEI.\"\u003c/li\u003e\r\n\u003cli\u003eCreate a fourth function to count the number of letters in the original sentence, divide it by two (rounding down if necessary), and output the letter at this index. Concatenate this letter at the beginning of the original sentence. For example, if \"I am a sentence\" is my original input, and it has 16 characters in it. If I divide this by 2, I get 8. The letter at the 8th position in the sentence is \"e\". So my final result is \"eI am a sentenceEI\".\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eBonus:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eTake the final result and reverse it:\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"IEecnetnes a ma le\"\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eUse jQuery to create two clickable images or pieces of text in your HTML page. When you click on the left one, it should show you the original sentence. If you click the other one, it should hide the original sentence and show the encoded one. Use Bootstrap to organize and style your page.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThis may seem somewhat impractical, but writing multiple functions that have the ability to call each other will prepare you to write code in small, manageable chunks. This makes code easier to debug, and complex problems easier to approach. Rather than attempting to do everything all at once, we break things down into little pieces!\u003c/p\u003e","exportId":"wednesday-introduction-to-jquery-javascript-library"},{"id":94,"title":"Wednesday: JQuery: Simple Effects","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003ejQuery\u003c/h1\u003e\r\n \r\n\u003ch2\u003eSimple effects\u003c/h2\u003e\r\n\u003cp\u003ePopping up dialogue boxes isn't very interesting, so let's move on to actually manipulating our web page by showing and hiding elements. Here's the HTML for the page we'll work on:\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003csmall\u003e\u003cem\u003eYou can use any walrus image of your choice\u003c/em\u003e\u003c/small\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-attribute\"\u003ebrikicho\u003c/span\u003e\u0026lt;/\u003cspan class=\"hljs-attribute\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003epeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. Click here to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMake sure that you have downloaded and correctly linked bootstrap and jquery. You will need these for pretty much every project.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eObviously, this doesn't work yet. The first thing we should do is to hide the walrus with a bit of CSS. As usual, we'll make a file called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyles.css\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecss\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder. Then, we'll add a CSS rule to hide the image:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we can use jQuery to show the walrus when you click the paragraph above it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).show();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eVery nice! Here, we've used another jQuery function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.show()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will, obviously, show a hidden element.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBut wouldn't it be nicer if the text of the paragraph changed, so after you clicked it, it said \"What a cute walrus! Click here to hide her again.\" Let's do that now. First, we need to make a couple changes to our HTML:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003epeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. Click here to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! Click here to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we've wrapped our page in two\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es: one for when the walrus is hidden, and one for when she's showing. Let's update our CSS to hide the walrus at first:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-class\"\u003e.walrus-showing\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-showing\"\u003c/span\u003e).show();\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-hidden\"\u003c/span\u003e).hide();\r\n      });\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne of the cool things about jQuery is that it uses the exact same selectors as CSS.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eNow, our code successfully changes the text that is shown above the walrus! Of course, it doesn't switch back and hide her again, so let's update our code once more to take care of that:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-showing\"\u003c/span\u003e).toggle();\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-hidden\"\u003c/span\u003e).toggle();\r\n      });\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNice. Now everything works as planned.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThere's something I don't like about this page, though. Most users expect that when an element is clickable, it's a different color, and that when they hover their mouse over it, the cursor will change to a hand and the text will be underlined. Fortunately, this is easy to implement with CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecursor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e pointer\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-hexcolor\"\u003e#0088cc\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ep\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003ehover {\r\n        text-decoration: underline\u003c/span\u003e\u003c/span\u003e;\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, this works, and it looks much better. But I'm still not satisfied. Here's why. Let's add another paragraph to this page:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e is an ancient game riddled in mystery and deceit. Though it appears to be an innocent children's pastime, you may change your mind when you learn of its treacherous history.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. Click here to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! Click here to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGross! Our styling has run amok and is applied to the intro paragraph, which really shouldn't be clickable. And even worse: if you click it, it toggles the walrus! We really need to limit the scope of our CSS and JavaScript. Let's add some\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags to clean this up:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e is an ancient game riddled in mystery and deceit. Though it appears to be an innocent childrens' pastime, you may change your mind when you learn of its treacherous history.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we can update our CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-class\"\u003e.walrus-showing\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-class\"\u003e.clickable\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecursor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e pointer\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-hexcolor\"\u003e#0088cc\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003e.clickable\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003ehover {\r\n        text-decoration: underline\u003c/span\u003e\u003c/span\u003e;\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd JavaScript:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".clickable\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-showing\"\u003c/span\u003e).toggle();\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-hidden\"\u003c/span\u003e).toggle();\r\n      });\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAh, that's much better now. When you're writing JavaScript (and CSS), it's a good idea to use classes to be specific about the elements you want to select. But keep in mind, if you have more than one thing on the page that can change, you might want to use one class for your CSS and another class for of each of the actions. For example, if your page had one place that let you show and hide a walrus, and another place that let you show and hide an ostrich, you might have both clickable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003es styled with the clickable class, but one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoggle-walrus\u003c/code\u003e, and the other with a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoggle-ostrich\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. Speaking of being specific, it feels wrong to me to use the classes\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-hidden\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-showing\u003c/code\u003e. We're supposed to use classes to identify similar parts of our pages that should look and act the same. For our clickable span, using a class makes perfect sense: we have two places on the page where we use it, and I can imagine that our website could potentially use it in many, many more places. But\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-hidden\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-showing\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereally couldn't be re-used anywhere else on this page - these sections should be unique. Often, this is the case with JavaScript: we want to identify a unique part of the page that should be changed when a unique event happens. For this case, we can use an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e. Check it out:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e is an ancient game riddled in mystery and deceit. Though it appears to be an innocent childrens' pastime, you may change your mind when you learn of its treacherous history.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we change our CSS like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-id\"\u003e#walrus-showing\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd our JavaScript like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".clickable\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#walrus-showing\"\u003c/span\u003e).toggle();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#walrus-hidden\"\u003c/span\u003e).toggle();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSo, what's the difference between a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eID\u003c/code\u003e, except that we use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto select a class and a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#\u003c/code\u003eto select an ID? Nothing, really, except that you can only use an ID once on a page, and you can use a class as many times as you want. But by using an ID, you can be clear that you're referring to one particular thing, rather than potentially referring to several. We could actually go one step further in thinking about how to make our code re-usable. Instead of calling the IDs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-showing\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-hidden\u003c/code\u003e, we could call them\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einitially-hidden\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einitially-showing\u003c/code\u003e. That way, we could re-use this code on other pages that have the same kind of toggling functionality. Now, a quick lecture before you move on to practicing all that you've just learned. When we use JavaScript to manipulate the page, we haven't changed the source code. No matter how much we change the page with JavaScript, if you hit the Refresh button in your browser, it will go back to the initial state. What JavaScript is doing is manipulating the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDocument Object Model\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDOM\u003c/strong\u003e. The DOM is your browser's interpretation of the HTML it reads. If you inspect an element of the page, you're actually seeing the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDOM\u003c/strong\u003e, not the HTML. Try inspecting the page we've been working on, and then click the click here part that changes the page. You can see in the inspector that the DOM changes. Now, try these concepts out on your own pages. Add JavaScript to hide and show various elements. Use id's and classes to keep things neat and tidy. Additionally, here are a few other jQuery methods to try out:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003efadeIn()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003efadeOut()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003efadeToggle()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eslideDown()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eslideUp()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eslideToggle()\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePlay around with them to get practice using these simple jQuery effects!\u003c/p\u003e","exportId":"wednesday-jquery-simple-effects"},{"id":95,"title":"Wednesday: JQuery: Add or Remove Classes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003ejQuery: Add \u0026amp; Remove Classes\u003c/h2\u003e\r\n\u003cp\u003eAdding and removing classes can be a helpful tool. Let's start with this HTML:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.9.1.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eColors\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat's your favorite color?\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eClick a button to choose what color you'd like this page to be:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-success\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"green\"\u003c/span\u003e\u0026gt;\u003c/span\u003eGreen\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-warning\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"yellow\"\u003c/span\u003e\u0026gt;\u003c/span\u003eYellow\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-danger\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"red\"\u003c/span\u003e\u0026gt;\u003c/span\u003eRed\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, some JavaScript:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#green\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"green-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#yellow\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"yellow-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#red\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"red-background\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we click the green button, for example, jQuery will add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreen-background\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the \u0026lt;body\u0026gt;. Now, let's create the CSS classes to actually give the page the background color we want:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-class\"\u003e.green-background\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e green\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-class\"\u003e.yellow-background\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e yellow\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-class\"\u003e.red-background\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e red\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd our page works! But there's a problem. If we click any one button, everything is fine. But if we then click a button of a lighter color, it won't change the background. So if we click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eYellow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand then Red, it works. But if we click then click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGreen\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eafter\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRed\u003c/em\u003e, nothing happens. We need to remove the other classes before applying the new class. Fortunately, that's easy:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#green\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).removeClass();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"green-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#yellow\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).removeClass();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"yellow-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#red\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).removeClass();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"red-background\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd now everything works perfectly!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003ccode\u003eremoveClass()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithout an argument removes all classes from the selected element; if you'd like to just remove a specific class, you can pass it in as an argument (or pass in multiple classes separated by spaces).\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThere is another way to change the CSS of an element with jQuery:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"button#green\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).css(\u003cspan class=\"hljs-string\"\u003e\"background-color\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"green\"\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, this is a bad approach for real code, for two reasons. First, it's mixing our concerns. JavaScript is responsible for how the page behaves; CSS is responsible for how the page looks. Here, we've put something about how the page looks in our JavaScript. This makes it difficult for other programmers who might need to change this page in the future to know where to look for the appropriate code. Second, you lose one of the biggest powers of CSS: the ability to create a class and re-use that style across elements and pages. Here, when we've put a style in our JavaScript, it can't be re-used. So, when you want to change the style of your page, stick to adding and removing classes.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Add \u0026amp; Remove Classes\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue to familiarize yourself with jQuery, and explore these important methods by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat can be accomplished by dynamically adding and removing classes with jQuery? Why would we want to do this?\u003c/li\u003e\r\n\u003cli\u003eWhen should we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.css()\u003c/code\u003e? Why do we use this particular method?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eAdding and removing classes with jQuery (Pair sprint)\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMost people like dark text on a light background, but some people prefer light text on a dark background. Update your dog blog or cat homepage to include a button that lets your users switch to light on dark.\u003c/li\u003e\r\n\u003cli\u003eNow, update this page so that users can switch back to the original color scheme.\u003c/li\u003e\r\n\u003cli\u003eUpdate your boring lecture page so that when somebody clicks on a paragraph, it highlights it and adds a box around the edges.\u003c/li\u003e\r\n\u003cli\u003eGet an instructor to look at your work\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eMore jQuery Basics Practice\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePractice jQuery basics by both creating a website that hides/shows various elements, and contains definitions of common jQuery and JavaScript terms.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a function? How do we create one? How do we call one?\u003c/li\u003e\r\n\u003cli\u003eWhat does it mean when we say \"Business Logic\" when referring to JavaScript?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between JavaScript and jQuery?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eFlashcard Site\u003c/h3\u003e\r\n\u003cp\u003eMake a webpage that is a flashcard site for learning JS \u0026amp; jQuery. On your site, a user should be able to click on a term or concept to see the definition appear. When they click on the definition, the original term should appear again. Here is a list of (some) terms and concepts that you have learned so far:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eJavascript (JS)\u003c/li\u003e\r\n\u003cli\u003eOperators\u003c/li\u003e\r\n\u003cli\u003eVariables\u003c/li\u003e\r\n\u003cli\u003eVariable naming conventions\u003c/li\u003e\r\n\u003cli\u003eFunctions\u003c/li\u003e\r\n\u003cli\u003eStrings\u003c/li\u003e\r\n\u003cli\u003eMethods\u003c/li\u003e\r\n\u003cli\u003eArguments\u003c/li\u003e\r\n\u003cli\u003eParameters\u003c/li\u003e\r\n\u003cli\u003eReturn\u003c/li\u003e\r\n\u003cli\u003eChaining methods\u003c/li\u003e\r\n\u003cli\u003eStrings\u003c/li\u003e\r\n\u003cli\u003eBooleans\u003c/li\u003e\r\n\u003cli\u003eUndefined\u003c/li\u003e\r\n\u003cli\u003eNaN\u003c/li\u003e\r\n\u003cli\u003eEscape\u003c/li\u003e\r\n\u003cli\u003eAlert\u003c/li\u003e\r\n\u003cli\u003eComments\u003c/li\u003e\r\n\u003cli\u003ejQuery\u003c/li\u003e\r\n\u003cli\u003eAttributes\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eRemember to start this project in its own directory, make it a Git repository and make frequent commits as you are building your site. Use Bootstrap as well. Feel free to add to this site later to help you study and remember key ideas of JavaScript and jQuery.\u003c/p\u003e","exportId":"wednesday-jquery-add-or-remove-classes"},{"id":96,"title":"Wednesday: DOM Manipulation and Traversal","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eDOM Manipulation and Traversal\u003c/h2\u003e\r\n\u003cp\u003eIn this lesson, we are going to explore manipulating DOM elements by inserting new text with the jQuery\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Then we'll look at how to traverse the DOM in search of a specific element to remove it. Let's take a look at a visual representation of the DOM that you can use as reference for manipulation and traversal. Each element in the DOM, represented in each box below, can be a parent, child or sibling to other elements. Understanding the position of elements in the DOM will help you insert, locate and remove elements, as needed.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/dom-visual-reference.png\" alt=\"dom visual reference\"\u003e\r\n\u003cp\u003eIn the last lesson, we explored how to simply show and hide elements of the DOM. Now, let's get a little more advanced and insert content into the DOM. Here's some HTML we'll start with:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.10.2.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eTalk to the web page\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eTalk to the web page\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eClick a button to say something to the web page. See what it says back!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-primary\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"hello\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSay \"hello\"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-inverse\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goodbye\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSay \"goodbye\"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-danger\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stop\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSay \"stop copying me!\"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eYou said:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unstyled\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eThe web page said back:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unstyled\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, here's the JavaScript to make the buttons work:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Hello!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#goodbye\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Goodbye!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#stop\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Stop copying me!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will insert the text of the argument it's given into to the top of \u0026lt;ul\u0026gt; as the first child of the \u0026lt;ul\u0026gt;. (As you might guess, there's also a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that would insert at the bottom as the last child of the \u0026lt;ul\u0026gt;; there are also\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.before()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.after()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods that would add the argument before or after the \u0026lt;ul\u0026gt; tag as siblings, rather than within it as children.) This is nice, but not a very fun conversation. Let's have the webpage say something different back to the user:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Hello!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Why hello there!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#goodbye\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Goodbye!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Goodbye, dear user!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#stop\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Stop copying me!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Pardon me. I meant no offense.\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOf course, we need to change the \u0026lt;ul\u0026gt; tags to have IDs for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewebpage\u003c/code\u003e. For the sake of brevity, I won't bother showing the updated HTML here. Go ahead and do that yourself.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eTHE CODE BELOW IS TRICKY. WE JUST WANT YOU TO KNOW THE STUFF ABOVE THIS POINT.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eNow that we know how to add to the DOM, let's learn how to remove from it. Let's make it so that when a user clicks a message, it disappears. First, we need to select each message. When I'm working on some tricky DOM manipulation, I usually start by selecting the element and changing its background color to green, just so that I know I have my selector working properly. You might think this bit of jQuery would work:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// previous code...\u003c/span\u003e\r\n        $(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e).css(\u003cspan class=\"hljs-string\"\u003e'background-color'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'green'\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut it doesn't do what we want. This code is run right after the web page finishes loading\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e($(document).ready())\u003c/code\u003e. And after the page finishes loading, there are no \u0026lt;li\u0026gt; elements. The elements are only added after we click a button. So we need to move our new code to within the callback passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e. Let's start by just adding it to one of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Hello!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Why hello there!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e).css(\u003cspan class=\"hljs-string\"\u003e'background-color'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'green'\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we click Say\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"hello\"\u003c/em\u003e, the messages are\u003cspan\u003e \u003c/span\u003e\u003cem\u003egreen\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's move to the next step - attaching an event handler in place of changing the background color. Again, in the spirit of taking one step at a time, we're not going to actually try to get the click to delete the element - instead, we're going to simply open a dialog box:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;Hello!\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;Why hello there!\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we click Say\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"hello\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand then the message, we get our alert! But there's a problem: if we click the button twice, clicking the last message will open the alert twice. And if we click the button again, the last message will open the alert three times, and the middle message will open it twice. What's happening is that the first time we click the button,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$('li')\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eonly finds a single message in each list, and attaches an event handler. But the next time we click the button, that first message is already on the page, and a second event handler is attached to it. And each time we click the button again, another event handler is attached to every message on the page. What we want is to only attach handlers to the message we most recently inserted. Since we're inserting them at the top of each list, we can select one of the \u0026amp;li;ul\u0026gt;s, look through its child elements (the \u0026lt;li\u0026gt;s), and select the first one of them:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n      });\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, each of the messages only opens a single dialog box when clicked.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eFinally, we should replace our callback with the actual code to delete the message:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).remove();\r\n      });\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).remove();\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eremove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis pretty straightforward, but what is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e?\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a bit of a tricky concept in JavaScript, and I'm not going to give it a full explanation here. For now, you can think of it as referring to whatever was clicked on. We're done with this rather long lesson. Congrats on making it through!\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: DOM Manipulation and Traversal\u003c/h2\u003e\r\n\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the DOM manipulation video, we learned:\r\n\u003cul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe visual representation of the DOM's parent, child and sibling relationships\u003c/li\u003e\r\n\u003cli\u003eHow a child element will be inserted at the top of a \u0026lt;ul\u0026gt; tag with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand at the end with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow to correctly select DOM elements and delete them\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice manipulating the DOM with your partner by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e. Describe an example of using each.\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.before()\u003c/code\u003e? What about\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.after()\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWrite a line of jQuery that selects an element on the DOM with the id of \"salad\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eDOM Manipulation Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice adding some interactivity to your web pages:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFollow along with the video and build a page that \"talks\" to the user.\u003c/li\u003e\r\n\u003cli\u003ePractice selecting certain HTML elements and changing the background color to green.\u003c/li\u003e\r\n\u003cli\u003eNow practice removing those elements, just like in the video.\u003c/li\u003e\r\n\u003cli\u003eMake a \"cat vs dog\" page - if you click a button for the cat to meow, the dog should bark back, and vice versa. Use Bootstrap to style your pages!\u003c/li\u003e\r\n\u003cli\u003eIn addition to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e, you can add content before or after the selected tags (rather than within them) with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.before()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.after()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eMake a page where if a user clicks on an element some sort of image gets inserted into the page before or after that element. Allow the new image to be removed by a click as well.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"wednesday-dom-manipulation-and-traversal"},{"id":97,"title":"Wednesday: Variable Scope","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eHomework: Variable Scope\u003c/h2\u003e\r\n\u003cp\u003eBefore we move on, let's pause to discuss\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003evariable scope\u003c/strong\u003e. The scope of a variable defines where and when it is available to be used or modified. Scope can be global or local depending on how it is declared.\u003c/p\u003e\r\n\u003ch2\u003eGlobal Scope\u003c/h2\u003e\r\n\u003cp\u003eVariables declared outside of functions have\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eglobal scope\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich means that all code and functions can access them.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable\"\u003c/span\u003e;\r\n\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esampleFunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(globalString);\r\n        globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable update!!\"\u003c/span\u003e;\r\n        alert(globalString);\r\n      }\r\n\r\n      alert(globalString);\r\n      sampleFunction();\r\n      alert(globalString);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run this in JSFiddle and see what we get each time we ask for an alert.\u003c/p\u003e\r\n\u003ch2\u003eLocal Scope\u003c/h2\u003e\r\n\u003cp\u003eVariables declared inside of functions have\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elocal scope\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ewhich means they are only locally available during the execution of the function. When we look at a variable that is defined within a function, we find that it's scope ends when the function is finished processing. In fact, the variable is created and destroyed each time the function runs.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIf we move the variable declaration from the global to the local by adding it inside the function, let's see what happens:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esampleFunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable\"\u003c/span\u003e;\r\n        alert(globalString);\r\n        globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable update!!\"\u003c/span\u003e;\r\n        alert(globalString);\r\n      }\r\n\r\n      alert(globalString);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNothing. Look in the console and the error\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eUncaught ReferenceError: globalString is not defined\u003c/code\u003e. We have not run the function so as the error message indicates,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eglobalString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas not actually been defined yet. It now has local scope.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's look at another example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.10.2.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eAn adventure in variable scope\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"click-one\"\u003c/span\u003e\u0026gt;\u003c/span\u003eclick me first\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"click-two\"\u003c/span\u003e\u0026gt;\u003c/span\u003eclick me second\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn your\u003cspan\u003e \u003c/span\u003e\u003cem\u003escript.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-one\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e whatToSay = \u003cspan class=\"hljs-string\"\u003e\"Hello!\"\u003c/span\u003e;\r\n          alert(whatToSay);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-two\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(whatToSay);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eclick me first\u003c/em\u003e, a dialog box pops open that says \"Hello!\". If we then click click me second, what happens? Nothing. If we look to the JavaScript console, we find the familiar error\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUncaught ReferenceError: whatToSay is not defined\u003c/em\u003e. And that's true. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is defined inside a function. Therefore, the program only knows about the variable while it is inside the function processing the code there. As soon as the function is complete, the variable is no longer defined; it's outside the limits of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e's variable scope.\u003c/p\u003e\r\n\u003ch2\u003eUnscoped variables (bad practice!)\u003c/h2\u003e\r\n\u003cp\u003eWhen you create a variable, it is important to declare it to the program using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIf you declare a variable by assigning it a value like this (without\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNamer\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        sampleName = \u003cspan class=\"hljs-string\"\u003e\"Cindy Lou\"\u003c/span\u003e\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJavaScript will make it a global variable\u003cspan\u003e \u003c/span\u003e\u003cem\u003eautomatically\u003c/em\u003e, even if it is inside of a function. In the above function,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esampleName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewould become a global variable with global scope which allows any part of the code to access or modify it.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eThis is something you should\u003cspan\u003e \u003c/span\u003e\u003cem\u003enever\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edo. Always use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword to declare your variables and consciously determine whether their scope should be global or local.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's just carry this through so that you understand what's going on if you see it elsewhere:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-one\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          whatToSay = \u003cspan class=\"hljs-string\"\u003e\"Hello!\"\u003c/span\u003e;\r\n          alert(whatToSay);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-two\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(whatToSay);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword removed from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e, if we click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eclick me first\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand then click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eclick me second\u003c/em\u003e, the dialog box will open up both times because it has defaulted to a global variable.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThis code is very small, so you may not see the problem with using a global variable. But imagine a code base that's thousands or tens of thousands of lines long. If you see a function that looks like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(whatToSay);\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eit would be incredibly difficult to figure out where\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas defined. And if\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas used and changed in multiple places, it would be next to impossible to figure out where it's value was last set. (For a horror story on a missing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e, read Geoffrey Hayes's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.pixelstech.net/article/1320253282-How-One-Missing-%60var%60-Ruined-our-Launch\"\u003e\"How one missing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eruined our launch\"\u003c/a\u003estarting at the \"Seem kinda bad?\" paragraph.)\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eTo conclude, always create variables with either global or local scope using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword. Using scoped variables lets us easily follow the flow of our application and ensures our functions don't step on each other's execution in unexpected ways.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs jQuery used to hide and show definitions when flashcards are clicked on?\u003c/li\u003e\r\n\u003cli\u003eIs code indented properly throughout?\u003c/li\u003e\r\n\u003cli\u003eAre Git commit messages descriptive, and in the correct tense?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"wednesday-variable-scope"},{"id":98,"title":"Thursday: Forms","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eForms\u003c/h2\u003e\r\n\u003cp\u003eSo far, the only way we've been able to capture user input is by using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e. Let's learn about forms so that we can build more interesting pages.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHave you ever played Mad Libs? You're prompted to fill out a list of nouns, verbs, adjectives, etc., and then copy them onto another piece of paper that contains a story, missing those crucial words that you are now providing. The idea is to pick bizarre words without knowing what the story is, and then when you fill them in, the results can be hilarious.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's make a page that mimics the Mad Libs format:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eA fantastical adventure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eFill in the blanks to write your story!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"blanks\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAnother name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAn animal\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAn exclamation\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA past tense verb\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA noun\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eShow me the story!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"story\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eA fantastical adventure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eOne day, \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e and \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e were walking through the woods, when suddenly a giant \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e appeared. \"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\", \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e cried. The two of them \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e as quickly possible, and when they were safe, \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e and \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e gave each other a giant \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, I've used some Bootstrap classes to make the form look nice; you can read more about them in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#forms\" target=\"_blank\"\u003eBootstrap Form Documentation\u003c/a\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's make the story hidden to start:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-id\"\u003e#story\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, our JavaScript needs to get the value from the form inputs, insert them into the \u0026lt;span\u0026gt;s where the information should go, and then un-hide the story itself. We know how to insert text into our pages, so let's get that working before we try to get the data from the form:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person1\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person2\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".animal\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".exclamation\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".verb\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".noun\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esubmit()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction attaches an event listener for when a form is submitted. It's different from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction because a form can be submitted by clicking the submit button, of course, but it can also be submitted by pressing Enter while a form field is selected. But when we submit the form, the story briefly flashes and then disappears. What's happening is that, by default, forms try to send the information somewhere, and since we haven't told it where to submit to, the page just refreshes and erases our hard work. If you look in the URL bar, you can see that there's a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e?\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the end of the address now. This is your clue that the form has been submitted to nowhere and the page refreshed. We need to prevent the default action for the form:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person1\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person2\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".animal\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".exclamation\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".verb\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".noun\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that we've added a parameter event to the callback function we passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esubmit()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. When the form is submitted, jQuery runs the callback function and passes in something as an argument. We don't know what this \"something\" is - we just know that it somehow represents the event of the form being submitted, and so we give the parameter the name event. And we know that if we call the method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epreventDefault()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon this event thing, it will stop the form from submitting. This is a pretty confusing concept. If you aren't at least 70% clear on the previous paragraph, stop and re-read it, slowly and carefully. If you are at least 70% clear, come back and re-read it a couple more times after you finish this lesson. You might also re-visit the lesson on Writing functions, which includes an explanation of arguments and parameters. Now, we need to actually get the values from the form. If we open up the JavaScript console on the page and run:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; $(\u003cspan class=\"hljs-string\"\u003e\"input#person1\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can see that this jQuery method returns the value from the input as a string. Since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eappend()\u003c/code\u003emethod takes a string as an argument, we can update our code like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person1Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person1\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person2Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person2\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animalInput= $(\u003cspan class=\"hljs-string\"\u003e\"input#animal\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e exclamationInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#exclamation\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e verbInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#verb\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nounInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#noun\"\u003c/span\u003e).val();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person1\"\u003c/span\u003e).append(person1Input);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person2\"\u003c/span\u003e).append(person2Input);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".animal\"\u003c/span\u003e).append(animalInput);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".exclamation\"\u003c/span\u003e).append(exclamationInput);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".verb\"\u003c/span\u003e).append(verbInput);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".noun\"\u003c/span\u003e).append(nounInput);\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow our page works. Hooray!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThere's one last thing to fix, though. If you don't refresh the page and you change the value of one of the inputs, it just adds it after the first value, instead of replacing it. We need to replace the existing text rather than just appending to it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person1Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person1\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person2Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person2\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animalInput= $(\u003cspan class=\"hljs-string\"\u003e\"input#animal\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e exclamationInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#exclamation\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e verbInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#verb\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nounInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#noun\"\u003c/span\u003e).val();\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person1\"\u003c/span\u003e).text(person1Input);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person2\"\u003c/span\u003e).text(person2Input);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".animal\"\u003c/span\u003e).text(animalInput);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".exclamation\"\u003c/span\u003e).text(exclamationInput);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".verb\"\u003c/span\u003e).text(verbInput);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".noun\"\u003c/span\u003e).text(nounInput);\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePractice: Forms\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePractice using jQuery elements with HTML forms:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse the HTML structure of a form\u003c/li\u003e\r\n\u003cli\u003eImplement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.submit()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction\u003c/li\u003e\r\n\u003cli\u003eGather the input values from the form\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"thursday-forms"},{"id":99,"title":"Thursday: Debugging in Javascript","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eDebugging in Javascript\u003c/h2\u003e\r\n\u003cp\u003eAs you start writing more and more complex JavaScript, you'll run into increasingly difficult bugs and problems. Here are some approaches to debugging when something goes wrong.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAs an example, let's use our Madlibs page, but with some errors I've introduced for us to debug. Here's the code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eA fantastical adventure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eFill in the blanks to write your story!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"blanks\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAnother name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAn animal\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAn exclamation\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA past tense verb\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA noun\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eShow me the story!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"story\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eA fantastical adventure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eOne day, \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e and \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e were walking through the woods, when suddenly a giant \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e appeared. \"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\", \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e cried. The two of them \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e as quickly possible, and when they were safe, \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e and \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e gave each other a giant \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eand for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003escript.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).sho();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen I load up this page, fill out the form, and click the submit button, nothing happens. Time to debug! The first step of debugging is to look for error messages. If we open up the JavaScript console, sure enough, there's an error:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGET file:///Users/ian/coderamp/debug/js/scipts.js index.html:7\u003c/code\u003e. This error tells us that the browser tried to get the file\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escipts.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebut couldn't find it. And hey, that's our problem - we left the\u003cspan\u003e \u003c/span\u003e\u003cem\u003er\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eout of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escripts.js\u003c/code\u003e. I can't tell you how many times I've seen students spend a long time debugging, just to find out they mis-spelled a filename, which also applies to the whole lot of you :-). Let's fix that typo and reload the page.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eGreat, no more errors in the JavaScript console. But when we submit our form, again, we get nothing. Let's use another tactic: pausing on exceptions. If we open our JavaScript console and switch to the tab on the top that says Sources, there's a button on the top right that looks like an octagon with a pause button. If we click it twice, it turns purple. This will cause JavaScript to stop running whenever there's an error. If we submit our form, sure enough, it pauses on and highlights the offending line. I've mis-typed the method name:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"#story\").sho()\u003c/code\u003e; should be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"#story\").show();\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's fix this and move forward. Now, we don't have any errors, but we still aren't seeing the story. Let's try another tactic: checking to see what code is executed. I do that by adding an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto a couple points in my code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(\u003cspan class=\"hljs-string\"\u003e'Got to beginning of form submit!'\u003c/span\u003e);\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n          alert(\u003cspan class=\"hljs-string\"\u003e'Got to end of form submit!'\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, when I submit my form, I can see if all my code is run, or if the form breaks at some point in the middle. In this case, both dialog boxes open up. So there's nothing actually breaking or not getting run in my code. That should be a clue to step back and review the documentation for the tools I'm using to make sure I haven't left anything out. If I look back at the lesson on forms with jQuery, I can see that I forgot to include\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e. Let's add that:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd now our paragraph with the story finally shows!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBut, there's still a problem: none of what we type actually gets put into the story. Something is going wrong, but it's hard to tell what by just looking at our code. Wouldn't it be nice if we could drop in and run just one line of our code at a time, to see what's going wrong? Chrome has a handy tool called the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger\u003c/code\u003ekeyword to do just that. Here's how to use it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003edebugger\u003c/span\u003e;\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, whenever Chrome JavaScript engine hits the debugger keyword, it will pause execution and let us run whatever code we please. This only happens when the JavaScript console window is open, so let's make sure that it is. Now, when we submit the form, we get the same kind of screen we got when we paused on the exception. Down in the bottom left, there's a little arrow and some lines. Clicking that will open up a JavaScript console below our code. Here, we can run JavaScript as if we were at the exact point where the debugger keyword is.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's copy and paste the next line of code:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar userInput = $(\"input.\" + blank).val();\u003c/code\u003e. Hm, it returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e. I would have expected it to return the first person's name. Let's type blank so that we can see what the value of that variable is. Sure enough, it's person1. Let's just run $(\"input.\" + blank); to make sure that we're selecting the correct element. Oh, this is the problem - we're getting back an empty array. That's not what we wanted. If we look back at our HTML, we can see that our inputs have IDs, not classes, so we should be using #s, not .s in our jQuery selector. Let's try changing that in the debugger console: sure enough,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"input#\" + blank);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the proper element. If we go back to our code, remove the debugger and update our selector, our page now works.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOne last helpful JavaScript debugging tool I'll tell you about is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e. Let's go back to before we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger\u003c/code\u003e, and try\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(userInput);\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we submit our form, the JavaScript console now says\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e6 undefined scripts.js:7\u003c/code\u003e. In other words, undefined was logged 6 times from line 7 of scripts.js. If we fix our code but leave the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein, the proper values get logged to the console.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eGenerally, I use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen there's a little piece of information I need to know that will help me debug, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen I need to explore my code to know what's going wrong.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eJust as a reminder, a useful debugging technique we explored before is changing the background color of an element to make sure you correctly selected what you were trying to, or checking in the Chrome developer tools under\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEvent Listeners\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAnd those are the most important tricks of the trade for debugging.\u003c/p\u003e","exportId":"thursday-debugging-in-javascript"},{"id":100,"title":"Thursday: Calculator App","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eCalculator: User Interface\u003c/h2\u003e\r\n\u003cp\u003eNow that we know how to use jQuery to gather input from forms, let's return to our calculator app. We should already have the business logic in place, but it still needs a user interface.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eRemember, just as we discussed previously,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness (or back-end) logic\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ehandles calculations and manipulation of data 'behind the scenes', and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface (or front-end) logic\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ehandles interacting with the user, including gathering user input, updating and displaying information on the page, etc. Furthermore, our project should be organized in a manner that keeps these two types of logic distinctly en\u003cspan\u003e \u003c/span\u003e\u003cem\u003eseparate\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIn this lesson we'll walk through adding user interface (front-end) logic to our existing calculator application, further explore the differences between business and user interface logic, and address how to keep them properly separated. For now we will focus exclusively on our addition functionality. In subsequent lessons we'll expand our user interface to support subtraction, division and multiplication too.\u003c/p\u003e\r\n\u003ch2\u003eLinking Resources\u003c/h2\u003e\r\n\u003cp\u003eClone your existing calculator application, and we'll pick up right where we left off. (If you're concerned your previous calculator project may not contain the correct code, don't worry! All necessary code for a functioning calculator is present in this lesson for review.) If you were able to complete all directions in the\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePractice: Calculator Business Logic\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eexercise, your project should already contain an HTML file. Let's update its \u0026lt;head\u0026gt; section to link to everything our application will need. This includes a link to Bootstrap, our own CSS stylesheet, the jQuery library, and our own custom JavaScript scripts.js file. Here's an example HTML file with these resources correctly linked:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-3.1.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDo note that the file above assumes you've downloaded\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto your project's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecss\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder and the latest version of jQuery into your project's js folder, as we've covered in previous lessons. You should already have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in your js folder containing the JavaScript business logic we wrote in the previous calculator exercise. Additionally, make sure the link to jQuery comes before the link to your own\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Because we're going to write code in\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat will use jQuery, our application must load the jQuery library before it loads\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e. If jQuery isn't loaded beforehand, our application won't know what to do when it reaches the jQuery code in\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebecause it won't even know what jQuery is yet!\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAlways link any scripts files that use jQuery after you link the jQuery library itself.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdding Forms\u003c/h2\u003e\r\n\u003cp\u003eNow that we have our necessary resources in place, let's begin adding to our application's HTML. Instead of asking the user to provide our calculator numbers with dialog boxes, let's allow them to submit numbers through our actual HTML web page. To do this, we'll add an HTML form. Since we're focusing only on creating a user interface for our addition functionality for now, we'll give this form the id\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd\u003c/code\u003e. We'll use this id to target the form later on in our jQuery code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-3.1.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e1st number:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add1\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e2nd number:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add2\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdding User Interface Logic\u003c/h2\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should already contain some code. If you successfully completed the previous calculator exercise, the business logic present in your scripts.js file should look similar to this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e subtract = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 - number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e multiply = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 * number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e divide = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 / number2;\r\n      };\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd the code currently responsible for gathering user input should resemble this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter a number:\"\u003c/span\u003e));\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter another number:\"\u003c/span\u003e));\r\n\r\n      alert(add(number1, number2));\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf your calculator's business logic doesn't resemble the examples above yet, pause here and take some time to review the example code, or revisit the Practice: Calculator Business Logic exercise before moving forward. We'll continue to add to this calculator project in future lessons, so make sure your version is up-to-date.\u003c/p\u003e\r\n\u003ch2\u003eGathering Form Input with jQuery\u003c/h2\u003e\r\n\u003cp\u003eNow, let's change the logic responsible for interacting with the user. Let's add functionality to gather information the user has supplied in our new form when they hit 'submit'. This will be much nicer than relying on those pesky pop-up dialog boxes. We'll begin by moving our existing user interface logic into a function passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e. We only want logic responsible for interacting with the user in this block of code that begins with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e. The business logic code should not be within this function, but the jQuery user interface logic should. This is because it's fine if the business logic functions are loaded into the computer's memory\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe HTML finishes rendering, but we don't want to begin dealing with input or output until the HTML document is fully loaded. Otherwise, we could hit some pretty big errors. Our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should now look like this (although you don't need the comments; those are just for reference here in this lesson):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-comment\"\u003e// Business (or back-end) logic:\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e subtract = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 - number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e multiply = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 * number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e divide = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 / number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-comment\"\u003e// Everything below this line is user interface (or front-end) logic:\u003c/span\u003e\r\n\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter a number:\"\u003c/span\u003e));\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter another number:\"\u003c/span\u003e));\r\n\r\n        alert(add(number1, number2));\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's add code to gather the data users provide in our form. Before we add this directly into\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e, let's experiment in the console. Visit your HTML page, and enter some values in the form. Then, if we open the JavaScript console on that same page we can test out the following jQuery to see what will successfully return the input we've placed in the form. Let's try out the following lines of jQuery:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#add1\"\u003c/span\u003e).val();\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#add2\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're targeting two HTML form elements in each of the two lines listed above. An input with the id of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand an input with the id of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.val()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto fetch the current value of that form.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/testing-jquery-for-calculator-form.png\" alt=\"testing jquery for calculator form\"\u003e\r\n\u003cp\u003eAnd hey, it works! We can see that each of these two lines of jQuery successfully returned the value currently present in the respective form fields. Now that we know these two lines of code gather the information we need, we can include them in our user interface logic:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add1\"\u003c/span\u003e).val());\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add2\"\u003c/span\u003e).val());\r\n        alert(add(number1, number2));\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're replacing the values retrieved via\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edialog boxes with jQuery to instead retrieve these values from our form. We still need\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause, like the information we gathered with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edialog boxes, content gathered from form inputs is also always in string format, and our calculator's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction requires numbers.\u003c/p\u003e\r\n\u003ch2\u003eWaiting for Users to Submit Form\u003c/h2\u003e\r\n\u003cp\u003eNow, if we open our HTML file in the browser, it displays our form, but immediately greets us with an alert reading\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/strong\u003e. Even though we're now waiting for the html document to finish loading!\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/no-submit-listener-resulting-in-NaN-alert.png\" alt=\"no submit listener resulting in NaN\"\u003e\r\n\u003cp\u003eThis is because we're not actually waiting for the user to submit the form, and the alert above is being triggered\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe HTML loads, but before the user has time to fill our form out! Our code is grabbing the empty form inputs and attempting to add them together, resulting in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue we see here. Ideally we want to wait until the user actually submits the form. Let's add a form submit event handler and its accompanying\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe discussed in the Forms lesson:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e subtract = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 - number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e multiply = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 * number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e divide = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 / number2;\r\n      };\r\n\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"form#add\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          event.preventDefault();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add1\"\u003c/span\u003e).val());\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add2\"\u003c/span\u003e).val());\r\n          alert(add(number1, number2));\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eDisplaying Results Directly in HTML\u003c/h2\u003e\r\n\u003cp\u003eIf we refresh our page and try again, everything should work correctly this time:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/calculator-dialog-with-correct-answer.png\" alt=\"calculator dialog with correct answer\"\u003e\r\n\u003cp\u003eWe don't see that alert dialog box with the result until\u003cspan\u003e \u003c/span\u003eafter we provide two numbers and submit the form. Perfect!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHowever, that pop-up\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edialog doesn't make for the nicest user interface. Instead, let's display our calculator's answer directly in our HTML web page and bypass the need for pop-up dialogs all together. This is also part of the user interface logic. Below the form, let's add in an empty div where we may place the result. We'll give it an id of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoutput\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein order to target it using jQuery:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-3.1.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e1st number:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add1\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e2nd number:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add2\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"output\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, instead of popping up that alert dialog, we'll simply replace the contents of our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoutput div\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith the result, using jQuery's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.text()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Let's also assign the result of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to the variable name result, then simply insert result directly onto our page in order to make our code clean and easy to follow:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e subtract = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 - number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e multiply = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 * number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e divide = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 / number2;\r\n      };\r\n\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"form#add\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          event.preventDefault();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add1\"\u003c/span\u003e).val());\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add2\"\u003c/span\u003e).val());\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = add(number1, number2);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#output\"\u003c/span\u003e).text(result);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we should be able to run our application in the browser, insert two numbers into the form fields, and submit the form to see our answer added to the page! Perfect!\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/calculator-result-added-directly-to-page.png\" alt=\"calculator result added directly to page\"\u003e\r\n\u003cp\u003eYou may have noticed that our calculator's user interface only offers the option to add two numbers together; despite our business logic containing functions that offer subtraction, multiplication, and division too. In future lessons we'll add support for users to choose which mathematic operation they'd like to execute on the provided numbers, instead of defaulting to addition.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBut for now, we have a fully functioning addition calculator, complete with a user interface. That's awesome!\u003c/p\u003e\r\n\u003ch2\u003eSeparation of Logic Review\u003c/h2\u003e\r\n\u003cp\u003eLet's take a moment to review the manner we organized our business and user interface logic:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n\r\n      \u003cspan class=\"hljs-comment\"\u003e// Business (or back-end) logic:\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e subtract = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 - number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e multiply = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 * number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e divide = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 / number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-comment\"\u003e// User interface (or front-end) logic:\u003c/span\u003e\r\n\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"form#add\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n         event.preventDefault();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add1\"\u003c/span\u003e).val());\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add2\"\u003c/span\u003e).val());\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = add(number1, number2);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#output\"\u003c/span\u003e).text(result);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can see that the business logic and user interface logic are in distinctly separate sections of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. The user interface sections is responsible for gathering user-provided values, parsing them into integers, and calling our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction when the user submits a form. It also displays the result of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction directly on the page for the user to view. Essentially, this section is handling all interactivity with our user. It can call a back-end function (as seen in the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar result = add(number1, number2);\u003c/code\u003e), but the function is not defined here in this block of code. That's the responsibility of the business, or back-end logic.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThe business logic contains functions for all capabilities our calculator will eventually have. It instructs our application what to do when a user opts to add two numbers, versus what to do when a user opts to divide two numbers (a feature we'll add later on). However, notice that it does not contain anything that interacts with the user. All logic here occurs 'behind the scenes'. The user interface logic may call one of the business logic's functions when necessary, but the functions themselves are defined in the back-end or business logic.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThis is ideal separation between front and back-end logic. They're distinctly separate areas of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003efile, are responsible for distinctly different things, and our front-end logic simply calls functions defined in the back-end when necessary.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eNow that we've created a working application with functioning front and back-end logics, revisit the Business and User Interface Logic if necessary.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eBefore we move on make sure to also take a look at the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/\"\u003ejQuery documentation\u003c/a\u003e. It may feel a bit overwhelming at first, since it contains many concepts we haven't yet covered, but that's absolutely okay! Reading documentation is an incredibly important part of programming, so begin to familiarize yourself with it now. Not everything may make sense, but you'll be surprised at the amount you do understand after only a few weeks of programming! In particular, check out the sections on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/effects/\"\u003eEffects\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/events/mouse-events/\"\u003eMouse Events\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/events/form-events/\"\u003eForm Events\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/manipulation/\"\u003eManipulation\u003c/a\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/traversing/\"\u003eTraversing\u003c/a\u003e. Consider trying out some of the methods listed here your next projects! And in the future, when you're trying to figure out how to do something with jQuery, the documentation is always the first place to look.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Calculator User Interface\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue to practice implementing jQuery and developing good organizational habits of separating front and back-end code by adding additional features to our ongoing calculator project, and completing the additional exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do the user interface and business logic 'communicate'?\u003c/li\u003e\r\n\u003cli\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edo? What can occur if we forget to add it?\u003c/li\u003e\r\n\u003cli\u003eIs the following code user interface or business logic? Why? How can you tell?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"form#some-form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e someInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#some-input\"\u003c/span\u003e).val();\r\n        event.preventDefault();\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eCalculator User Interface\u003c/h3\u003e\r\n\u003cp\u003eIn the calculator user interface lesson, we built a site that collected two numbers from a form and then added them together by calling our pre-existing business logic\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. Now it's your turn:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFollow along with the lesson to build out user interface logic for your calculator's addition capacity.\u003c/li\u003e\r\n\u003cli\u003eNow build out the user interface for subtraction, multiplication and division. You already have the business logic done. For now just have four separate forms - one for addition, one for subtraction, one for multiplication and one for division. In your JavaScript code, you'll need a form submit event handler for each form. (Soon, when we learn about branching, we'll adjust this to use just one form and allow the user to choose whether they want to add, subtract, multiply or divide.)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eAdditional jQuery Forms Practice\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd a form to each of the websites you are currently building. For example, on the resort website, the form should be used to submit a query from users wishing to find out more on your resort.\u003c/li\u003e\r\n\u003cli\u003eThank them for their query, and be sure to use their full name. Then reprint their address as a confirmation of receiving their question details. Go as wild as you can with the forms\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eForm Input Types\u003c/h2\u003e\r\n\u003cp\u003eWe've already seen how to gather input from text fields, but there are a variety of other types of form fields as well: Select boxes, radio buttons and checkboxes are perhaps the most prominent. HTML5, finalized in 2014 and now widely supported, also introduced a number of additional input types, including date, color, email, tel, url, number, and many others. See the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\"\u003eMDN\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor a full list of HTML input types. Bootstrap also has more information about them\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#forms-controls\"\u003ehere\u003c/a\u003e. Generally as you come across the need to gather input in a particular way, you'll do some research to figure out how to read input in that way. We'll introduce a few of the most common input field types. But first, a note of warning:\u003c/p\u003e\r\n\u003ch2\u003eAlways\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyour Number Values\u003c/h2\u003e\r\n\u003cp\u003eJust because you mark your HTML input field as\u003cspan\u003e \u003c/span\u003e\u003cem\u003enumber, date\u003c/em\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cem\u003etel\u003c/em\u003e, don't expect it to come in as the JavaScript\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enumber\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003etype. Marking it in your html as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etype=\"number\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust means that the browser will do some preliminary checking to encourage the user to enter a number rather than some text. But when you use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.val()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto read the input, it will still come in as a JavaScript\u003cspan\u003e \u003c/span\u003e\u003cem\u003estring\u003c/em\u003e, not a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enumber\u003c/em\u003e. The HTML input types mostly just help indicate to the user what type of input is expected and/or allow the user to more easily enter a value such as a date or color.\u003c/p\u003e\r\n\u003ch2\u003eSelect Boxes\u003c/h2\u003e\r\n\u003cp\u003eSimple select boxes (where the user can only select one item) are pretty easy to implement.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/select-box-form-input.png\" alt=\"select box form input\"\u003e\r\n\u003cp\u003eThis goes inside the form in your html:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"beverage\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eCoffee\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eTea\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eKombucha\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eWater\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd this is one way to read out the value in your form submit event handler:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e beverage = $(\u003cspan class=\"hljs-string\"\u003e\"#beverage\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you wanted to instead give each option a value different from the text the user sees, you could change your select to look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"beverage\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCoffee\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTea\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"3\"\u003c/span\u003e\u0026gt;\u003c/span\u003eKombucha\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWater\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when you gather the input with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"#beverage\").val()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyou'll get \"1\", \"2\", \"3\" or \"4\". Note that they still come in as strings, so in this case you would probably want to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto convert the inputted data to a number.\u003c/p\u003e\r\n\u003ch2\u003eRadio Buttons\u003c/h2\u003e\r\n\u003cp\u003eRadio buttons allow the user to select one and only one option from a list.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/radio-button-form-input.png\" alt=\"radio button form input\"\u003e\r\n\u003cp\u003eHere's an example of doing radio buttons (this would go inside the form in your html):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"flavor\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"chocolate\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echecked\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          Chocolate\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"flavor\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vanilla\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          Vanilla\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"flavor\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cookiesandcream\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          Cookies \u0026amp; Cream\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd a way to read the value selected:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javasript hljs javascript\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e flavor = $(\u003cspan class=\"hljs-string\"\u003e\"input:radio[name=flavor]:checked\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCheckboxes\u003c/h2\u003e\r\n\u003cp\u003eCheckboxes work similarly to radio buttons, but allow users to select multiple options. Because we want to be able to collect all of a user's selections, we will first need to learn about something called an array, which we will do shortly. In its simplest form, an array is simply a list of multiple items packaged together.\u003c/p\u003e\r\n\u003ch2\u003eDate\u003c/h2\u003e\r\n\u003cp\u003eThe date input type provides an easier interface for users to browse, select, and input dates:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/date-select-form-input.png\" alt=\"date select form input\"\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"born\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDate of birth:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"born\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"date\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cbr\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dob = $(\u003cspan class=\"hljs-string\"\u003e\"#born\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eColor\u003c/h2\u003e\r\n\u003cp\u003eYou may not have seen this one before! The color form input type, when clicked, opens a special panel where users can fine-tune and select specific colors:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/color-select-form-input.png\" alt=\"color select form input\"\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"color\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat is your favorite color?\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"color\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"color\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteColor = $(\u003cspan class=\"hljs-string\"\u003e\"#color\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePractice: Form Input Types\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eExplore using jQuery to gather a variety of form input types by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we gather form input from a select (ie: dropdown) box? How does this differ from a basic input (ie: text) field?\u003c/li\u003e\r\n\u003cli\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e:checked\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erefer to when gathering input from radio buttons?\u003c/li\u003e\r\n\u003cli\u003eIf we\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eincludetype=\"number\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein an HTML form field, do we still need to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen retrieving the value (assuming we need a number)?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eSurvey\u003c/h3\u003e\r\n\u003cp\u003eUse a form to let the user fill out a survey. Ask them to fill in their name, their favorite foods, their favorite music, and any other information you feel like. Include all form input types we've covered so far (except checkboxes; we'll learn more about those next week!)\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs the user interface logic and business logic separated? Is there anything you can spot that is in an incorrect place?\u003c/li\u003e\r\n\u003cli\u003eIs code indented correctly throughout?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive of what they represent? Is it easy to tell what each is referring to?\u003c/li\u003e\r\n\u003cli\u003eIs a form successfully gathering input from users?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"thursday-calculator-app"},{"id":101,"title":"Thursday: Branching","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eHomework: Branching\u003c/h2\u003e\r\n\u003cp\u003eNow that we've learned the basics of how to manipulate web pages with jQuery, we're going to add some logic to our pages that will allow us to control the flow of our code based on certain conditions. This kind of logic is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebranching\u003c/strong\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAs an example, we are going to create a website for a bar. We only want to show the drinks menu to the user if they are over 21. So, the condition is age. When we come to determining this condition in the code, it is like a fork in the road with two paths or branches. If the user is over 21, they'll see the drinks menu. If not, they will get a message indicating that they are not old enough to view the content.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere's an example:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.10.2.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eDrinks\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"drinks\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eDrink menu\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eBeer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eThe King of Beer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eThe Queen of Beer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eReal cold beer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWine\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eRed wine\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eWhite wine\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eBlue wine\u0026amp;li;/li\u0026gt;\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"under-21\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eSorry, we can't serve you.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's illegal in the US. Try Mexico or Europe.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn our\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyle.css\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-id\"\u003e#drinks\u003c/span\u003e, \u003cspan class=\"hljs-id\"\u003e#under-21\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"How old are you?\"\u003c/span\u003e));\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (age \u0026gt;= \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e) {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#drinks'\u003c/span\u003e).show();\r\n        }\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eA value entered into a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efield always returns a string even if a number is entered. Since we want our age to be compared to another number, we have to change it into a number using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003efunction.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOnce we collect the user's age, we can write a JavaScript\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement\u003c/strong\u003e, or a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebranch\u003c/strong\u003e. If statements consist of the keyword\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efollowed by a condition in parentheses. The condition will always evaluate to a boolean value: either true or false. After the condition, we add the code that we want to execute if the condition is true. This code is set between two curly braces on it's own lines. (Note the standards for an if statement: spacing, two-space indentation and NO semicolon after the final curly brace.)\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWhen the condition evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, the code that follows between the curly braces is executed. If the condition is false, the code in the curly braces is not executed and the JavaScript processing moves on.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's work through a couple examples of our age condition. If our user indicates an age of 25, then the condition\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage \u0026gt;= 21\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecomes\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e25 \u0026gt;= 21\u003c/code\u003e, which evaluates to true. The code in the curly braces is run and the div with an id of drinks is shown.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIf age is 16,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage \u0026gt;= 21\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecomes\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e16 \u0026gt;= 21\u003c/code\u003e, which evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e. In this case, the code in the curly braces is skipped and nothing is displayed.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBack to our code, let's show a different message if the condition is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(the user is under 21). To do this we'll add an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"How old are you?\"\u003c/span\u003e));\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (age \u0026gt;= \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e) {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#drinks'\u003c/span\u003e).show();\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#under-21'\u003c/span\u003e).show();\r\n        }\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, just like before, when the condition in parentheses evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, the code in the first set of curly braces is run. But when the condition evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e, the code in the second set of curly braces, after the else keyword, is run.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAn else statement does not need a condition because the code in its curly braces is what will be run when the if condition is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eGenerally, your code is executed from top to bottom, like a car driving straight down the road. When your car encounters an if statement, it is like encountering a fork in the road. You can't take both paths - if the condition is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, the if code runs, otherwise the else code runs.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWhat if we need to have more conditions? What if we want to display a special third message if the user is exactly 21? Let's pop up an alert that says \"Now don't go crazy!\" if the age is equal to (===) 21:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"How old are you?\"\u003c/span\u003e));\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (age \u0026gt; \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e) {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#drinks'\u003c/span\u003e).show();\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (age === \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e) {\r\n          alert(\u003cspan class=\"hljs-string\"\u003e\"Now don't go crazy!\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#drinks'\u003c/span\u003e).show();\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#under-21'\u003c/span\u003e).show();\r\n        }\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eelse if\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis just like an alternate\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e. It also has a condition to be checked in parenthesis next to it, and if that condition is true then the code in curly braces following it is run. But\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse if\u003c/code\u003e's condition is only checked when the if condition has already been found to be false. In real life, you use this idea of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif, else if\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eall the time. Say you're going to the beach with your friends over the weekend. You all decide that the easiest way to get there would be to drive, but only your friend Omera has a car. So, if Omera is free, you can all drive with her. But, he never picks up his phone. So, you all decide that as an alternate plan you will take the bus - but only if Omera is busy. Then one of your friends remembers that this is a holiday weekend, so the bus might not be running. You roll your eyes at your friend and say \"Fine, if we can't find Omera, and the buses aren't running, we can all just go to my house and watch movies.\" That is an if statement! Let's re-interpret this discussion in pseudocode:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (Omera === \u003cspan class=\"hljs-string\"\u003e\"available to drive\"\u003c/span\u003e) {          \u003cspan class=\"hljs-comment\"\u003e// if Omera can drive...\u003c/span\u003e\r\n        driveToBeach();                                \u003cspan class=\"hljs-comment\"\u003e// call the function to drive to the beach.\u003c/span\u003e\r\n      }\r\n      \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (busesAreRunning === \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e) {             \u003cspan class=\"hljs-comment\"\u003e// if Omera can't drive and the buses are running...\u003c/span\u003e\r\n        busToBeach();                                  \u003cspan class=\"hljs-comment\"\u003e// take the bus to the beach.\u003c/span\u003e\r\n      }\r\n      \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {                                           \u003cspan class=\"hljs-comment\"\u003e// if all the other options fail...\u003c/span\u003e\r\n        watchMovies();                                 \u003cspan class=\"hljs-comment\"\u003e// watch movies instead.\u003c/span\u003e\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe triple equals sign\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis easy to mix up with the single equals sign\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e=\u003c/code\u003e. Remember that the single equals sign (\u003ccode\u003e=\u003c/code\u003e) is used to assign a value to a variable. The triple equals (\u003ccode\u003e===\u003c/code\u003e) is used in conditions to check if the values on its left and right sides are equal.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWhen you are writing an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement, you can have as many\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse if\u003c/code\u003e's in it as you like, but you can only have one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emust be the first statement, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emust be the last statement.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWhen JavaScript tries to figure out if the condition is true, it's looking for a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eboolean\u003c/code\u003e. You saw in the Assignment \u0026amp; Comparison Operators lesson that comparisons return a boolean -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e. Check out what's going on here in the JavaScript console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-number\"\u003e22\u003c/span\u003e;\r\n      \u0026gt; age \u0026gt; \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe're getting a boolean. We could write the JavaScript for our drinks page like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e over21 = confirm(\u003cspan class=\"hljs-string\"\u003e\"Are you over 21? Click OK for yes or Cancel for no.\"\u003c/span\u003e);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (over21) {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#drinks'\u003c/span\u003e).show();\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#under-21'\u003c/span\u003e).show();\r\n        }\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn other words, when I earlier said \"If the condition in the parentheses is true, then the first statement is run,\" it's more precise to say \"If the condition in the parentheses evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, then the first statement is run.\" (Note: this isn't 100% correct, as we'll see in the next lesson, but don't worry about that for now.)\u003c/p\u003e","exportId":"thursday-branching"},{"id":259,"title":"Discussion: HTML Forms","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eWarm Up\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWhy does variable scope matter?\u003c/li\u003e\n\u003cli\u003eWhat happens when you don't use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto declare a variable? Why is that bad?\u003c/li\u003e\n\u003cli\u003eThere are two alerts that display the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erabbitName\u003c/code\u003e, one when the function runs and one at the end of the code. What value do you expect at each alert? (Use JSFiddle to test your theories.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rabbitName = \u003cspan class=\"hljs-string\"\u003e\"Njoro\"\u003c/span\u003e;\n\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehoppity\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        alert(rabbitName);\n        rabbitName=\u003cspan class=\"hljs-string\"\u003e\"Fredi\"\u003c/span\u003e;\n      }\n\n      hoppity();\n      alert(rabbitName);\n    \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat values do you expect at these alerts?\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rabbitName = \u003cspan class=\"hljs-string\"\u003e\"Njoro\"\u003c/span\u003e;\n\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehoppity\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rabbitName = \u003cspan class=\"hljs-string\"\u003e\"Tanu\"\u003c/span\u003e\n        alert(rabbitName);\n        rabbitName=\u003cspan class=\"hljs-string\"\u003e\"Fredi\"\u003c/span\u003e;\n      }\n\n      hoppity();\n      alert(rabbitName);\n    \u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eWhy do you need\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen working with jQuery forms?\u003c/li\u003e\n\u003c/ul\u003e","exportId":"iceabe33ee77ccc9edfd195c98ed31460"},{"id":266,"title":"Friday: Independent Project","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch1\u003eAnita's Kitchen\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003cspan\u003e \u003c/span\u003e\u003c/strong\u003eCreate a website from a design.\u003c/p\u003e\r\n\u003ch3\u003eUser Story\u003c/h3\u003e\r\n\u003cp\u003eAnita has asked you create a landing page for her business and has handed you over the design of how the page should appear. Use your knowledge of HTML/CSS and Javascript to create the webpage following the instructions carefully. She has free lunch for the best student!!\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eGo to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/moringaschool/mpft-ip\" target=\"_blank\"\u003ethe Moringa Prep independent project repository on Github\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eFollow the instructions in the readme section of the repository\u003c/li\u003e\r\n\u003cli\u003eComplete your work and push it to gh-pages\u003c/li\u003e\r\n\u003cli\u003eAdd the link to gh-pages inside your project's readme\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003cp\u003eYour project will be evaluated on the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate and consistent.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eProject works as expected.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of week’s concepts. If prompted, you are able to discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject submittion time. It is to be submitted by 6pm onFriday unless otherwise stated\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003e\n\u003cem\u003e\u003cem\u003eA project README that includes: \u003cstrong\u003eView example below\u003c/strong\u003e\u003c/em\u003e\u003c/em\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003e\u003ciframe style=\"width: 550px; height: 400px;\" title=\"GitHub gist\" src=\"https://www.edu-apps.org/tools/github/github_summary_gist.html#PurpleBooth/109311bb0361f32d87a2\" width=\"550\" height=\"400\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\"\u003e\u003c/iframe\u003e\u003c/em\u003e\u003c/p\u003e","exportId":"ic60e745b5529d2c11126c7bd05139504"},{"id":1127,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","exportId":"i4380361521db3e98b94c2b244835cb40"},{"id":103,"title":"Weekend: Practice on Branching (Control Flows)","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eObjectives\u003c/h1\u003e\r\n\u003cp\u003eSo far we have managed to learn about the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to use an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eif..else\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement to add logic to our webpages.\u003c/li\u003e\r\n\u003cli\u003eThe difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e===\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e=\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou will use branching\u003cspan\u003e \u003c/span\u003e\u003cem\u003every\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoften moving forward, no matter which programming language(s) you opt to explore in the future. Get the hang of basic branching now by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen do we use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e===\u003c/code\u003e? When do we use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead? What is the difference between the two?\u003c/li\u003e\r\n\u003cli\u003eHow many\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatements can one branch have?\u003c/li\u003e\r\n\u003cli\u003eHow many\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatements may one branch contain?\u003c/li\u003e\r\n\u003cli\u003eUnder what circumstances does an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement execute?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eBranching Practice\u003c/h3\u003e\r\n\u003cp\u003eNow, choose\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etwo\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof the following webpages to make that incorporates branching. If you are able to complete the first two, come back and work on the third option.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA page with information about voting that displays different information to minors. Add in links to websites where young voters can go to learn about the voting process.\u003c/li\u003e\r\n\u003cli\u003eA page with information about turtles, snakes, and insects that asks you which animal you'd like to learn about. When a user chooses which animal to learn about, take them to a page with information (including pictures) about that animal.\u003c/li\u003e\r\n\u003cli\u003eA page for an amusement park that only shows you information on rides that you're tall enough to go on. Then try showing a list of all of the rides in the park and just highlighting (with CSS) the ones that they can ride on. Make sure there are some rides that an adult can't ride on because they are too tall.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"weekend-practice-on-branching-control-flows"}]},{"id":25,"name":"Week 3","status":"completed","unlockDate":null,"prereqs":[24],"requirement":"all","sequential":true,"exportId":"i1d9157f3eedc1a88888a5ebe2ed89763","items":[{"id":104,"title":"Monday: Javascript Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003ch1\u003eArrays and Looping Objectives\u003c/h1\u003e\r\n\u003cp\u003eWe'll start out this week by learning about some important programming concepts that will allow us to better work with data:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eArrays - lists of data or information\u003c/li\u003e\r\n\u003cli\u003eLooping - allows JavaScript to repeat an action until some condition is met\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThen we'll dedicate the rest of the week to coding all day, putting into practice everything we've learned so far.\u003c/p\u003e\r\n\u003cp\u003eEach day's exercises will specifically explore the week's objectives. Remember that speed and quantity are not measurements of success at the end of a day...\u003cem\u003eunderstanding\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis. While we expect you to review and share each other's work, there's a great saying that applies (with a slight Moringa School modification): \"Don't compare your code to others, compare your code to the code you wrote yesterday\".\u003c/p\u003e\r\n\u003cp\u003eThis week also shifts where our attention will be focused. Over the past two weeks, we have been creating websites with HTML, CSS and Bootstrap. We've added effects with jQuery and gotten started on the basics of JavaScript. When a project was completed, we ran the code in the browser to display it.\u003c/p\u003e\r\n\u003cp\u003eIn this section, we will continue to practice being really conscious of the separation of back-end business logic and front-end user interface logic. We'll focus on writing our own JavaScript functions that we will call from jQuery.\u003c/p\u003e\r\n\u003cp\u003eAt the end of the week, you will be able to:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ebreak problems down into behavior examples\u003c/li\u003e\r\n\u003cli\u003ebuild JavaScript functions that use arrays and looping\u003c/li\u003e\r\n\u003cli\u003ecreate HTML pages that use jQuery to call JavaScript functions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eThe code review will give you the opportunity to develop a project with the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eJavaScript business logic and user interface logic are separate.\u003c/li\u003e\r\n\u003cli\u003eVariable names are descriptive and use lower camel case (e.g. myVariableExample).\u003c/li\u003e\r\n\u003cli\u003eCode has proper indentation and spacing.\u003c/li\u003e\r\n\u003cli\u003eApplication works as expected.\u003c/li\u003e\r\n\u003cli\u003eAll previous objectives have been met.\u003c/li\u003e\r\n\u003cli\u003eProject is broken down into \"plain English\" specs, listed in README.\u003c/li\u003e\r\n\u003cli\u003eProject is in a presentable, portfolio-quality state.\u003c/li\u003e\r\n\u003cli\u003eYou are able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eJavascript Arrays\u003c/h2\u003e\r\n\u003cp\u003eUntil now, we've always dealt with one piece of information at a time: one number, one string, one element on a page. But often, we need to group things together. For example, what if we wanted to have a list of the months of the year? We'd use an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003earray\u003c/strong\u003e, which is just a list of things grouped together. An array looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e months = [\u003cspan class=\"hljs-string\"\u003e\"january\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"february\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"march\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"april\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"may\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"june\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"july\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"august\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"september\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"november\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"december\"\u003c/span\u003e];\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere are some more arrays for you to try in the JavaScript console:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode class=\"\"\u003e[2, 5, 7, 3423, 85, 65]\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode class=\"\"\u003e[\"e\", \"p\", \"i\", \"c\", \"o\", \"d\", \"u\", \"s\"]\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode class=\"\"\u003e[\"word\", 45, \"blah\", 123]\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou can put variables and expressions in your arrays, or even other arrays:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e variable = \u003cspan class=\"hljs-string\"\u003e\"I'm a variable!\"\u003c/span\u003e;\r\n  \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e things = [variable, \u003cspan class=\"hljs-string\"\u003e\"I'm not a variable!\"\u003c/span\u003e];\r\n  \u0026gt; things;\r\n  [\u003cspan class=\"hljs-string\"\u003e\"I'm a variable!\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"I'm not a variable!\"\u003c/span\u003e]\r\n\r\n  \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e numbers = [\u003cspan class=\"hljs-number\"\u003e62\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e62\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e];\r\n  \u0026gt; numbers;\r\n  [\u003cspan class=\"hljs-number\"\u003e62\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e31\u003c/span\u003e]\r\n\r\n  \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e confusingAssortmentOfThings = [\u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e123\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"another string\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e456\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e321\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yet another string\"\u003c/span\u003e];\r\n  \u0026gt; confusingAssortmentOfThings;\r\n  [\u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e123\u003c/span\u003e, \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e321\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yet another string\"\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e(That\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eArray[2]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust means that this element of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003econfusingAssortmentOfThings\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray is itself an array containing 2 elements. More on this later.)\u003c/p\u003e\r\n\u003cp\u003eJust like numbers and strings, arrays have methods. Here are a couple for you to start with:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e fruits = [\u003cspan class=\"hljs-string\"\u003e\"apple\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"orange\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"passion fruit\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"kiwi\"\u003c/span\u003e];\r\n  \u0026gt; fruits.pop();\r\n  \u003cspan class=\"hljs-string\"\u003e\"kiwi\"\u003c/span\u003e\r\n  \u0026gt; fruits;\r\n  [\u003cspan class=\"hljs-string\"\u003e\"apple\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"orange\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"passion fruit\"\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e numbers = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e];\r\n  \u0026gt; numbers.reverse();\r\n  [\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\r\n  \u0026gt; numbers;\r\n  [\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote that both the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ereverse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods change the array on which they're called. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod removes the last item from the array AND\u003cspan\u003e \u003c/span\u003e\u003cem\u003ereturns\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ereverse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod reverses the order of items in the array and returns that reversed array.\u003c/p\u003e\r\n\u003cp\u003eYou can also add elements to an array, or combine two arrays:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e\u0026gt; var greetings = [];\r\n  \u0026gt; greetings.\u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n  \u0026gt; greetings.\u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'hello'\u003c/span\u003e);\r\n  \u0026gt; greetings;\r\n  [\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e]\r\n\r\n  \u0026gt; greetings.concat([\u003cspan class=\"hljs-string\"\u003e'hola'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'buenos dias'\u003c/span\u003e]);\r\n  [\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hola\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"buenos dias\"\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote that while\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eadds an element to an array, the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003econcat()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod doesn't actually change the original array, but rather returns a new array that combines the two. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003egreetings\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray still only contains the 2 elements pushed on to it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\u0026gt; greetings;\r\n  [\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you want to access an element from an array, the syntax is a bit different from anything we've seen before:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e letters = [\u003cspan class=\"hljs-string\"\u003e'e'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'p'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'i'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'c'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'o'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'd'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'u'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e's'\u003c/span\u003e];\r\n  \u0026gt; letters[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"e\"\u003c/span\u003e\r\n  \u0026gt; letters[\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"o\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJust like with strings, we count array elements starting with zero. So the zeroth element of the array is\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e'e'\u003c/code\u003e, and the fourth element is\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e'o'\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eNote that it is conventional for array variable names to be plural, thereby making it clear that the variable refers to a collection of things rather than a single thing. Following this convention will help with debugging your own code as well as making your code clearer for others.\u003c/p\u003e\r\n\u003cp\u003eCheck out the MDN documentation for\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Mutator_methods\" target=\"_blank\"\u003eMutator\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Accessor_methods\" target=\"_blank\"\u003eAccessor\u003c/a\u003e\u003cspan\u003e \u003c/span\u003emethods, and experiment using these methods on your own.\u003c/p\u003e","exportId":"monday-javascript-arrays"},{"id":105,"title":"Monday: Array Methods","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eComparing Arrays\u003c/h2\u003e\r\n\u003cp\u003eUnlike other data types we've seen so far, it is not possible to compare two arrays by using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e===\u003c/code\u003ecomparison operator. In JavaScript, two primitive data type values can be the equal: For example, \"abc\" is the same as any other \"abc\". But arrays are different -\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eno two arrays are the same, even if they have the same elements inside\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eIf you need to compare the\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtents\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof two arrays, one way to accomplish this is to transform the arrays into strings using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etoString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction on each and comparing the return values. This will work when the elements are all data types that we have worked with previously, such as strings, numbers, and booleans.\u003c/p\u003e\r\n\u003cp\u003eTry this example in the console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\r\n  \u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e a = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]\r\n  \u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e b = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]\r\n  \u0026gt; a === b\r\n  \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n  \u0026gt; a.toString();\r\n  \u003cspan class=\"hljs-string\"\u003e\"1,2,3\"\u003c/span\u003e\r\n  \u0026gt; a.toString() === b.toString();\r\n  \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCloning Arrays\u003c/h2\u003e\r\n\u003cp\u003eHere is another scenario where arrays may operate differently than we expect.\u003c/p\u003e\r\n\u003cp\u003eSuppose we have an array, and we want to keep in its original form; but we also need to manipulate in some ways. We might have one variable hold the original array and another variable with a copy of the same array that we can change.\u003c/p\u003e\r\n\u003cp\u003eTry this in the console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\r\n  \u0026gt;var originalArray = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\r\n  \u0026gt; originalArray\r\n  [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\r\n  \u0026gt;var \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray = originalArray\r\n  \u0026gt;\u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray\r\n  [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\r\n  \u0026gt;\u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray.push(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e)\r\n  \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e\r\n  \u0026gt;\u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray\r\n  [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eoriginalArray\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elook like now? We haven't touched it, so we may assume it would retain its original value of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e[1,2,3,4,5]\u003c/code\u003e. But if we check it again in the console, we see:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u0026gt;\u003cspan class=\"hljs-tag\"\u003eoriginalArray\u003c/span\u003e\r\n  \u003cspan class=\"hljs-attr_selector\"\u003e[1, 2, 3, 4, 5, 6]\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn JavaScript, the array is stored in memory, and the two variables\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eoriginal_array\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eclone_array\u003c/code\u003eare called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epointers\u003c/strong\u003e. A pointer references an object in memory but is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe object itself. Therefore, as the array is changed, the new value is reflected in all of the variables that point to it.\u003c/p\u003e\r\n\u003cp\u003eThe way to clone an array\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esimply making another pointer is to create a new variable set to a new array:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003evar \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray = originalArray.slice()\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis ensures that the new array really is an entirely separate entity, instead of simply a pointer to the original array.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Resources\u003c/h3\u003e\r\n\u003cp\u003eFor more details on how the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eslice\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod works, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\" target=\"_blank\"\u003eMDN's Javascript documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon the Array.prototype.slice method.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: JavaScript Arrays\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Arrays section, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eArrays can contain numbers, strings, variables, expressions and other arrays\u003c/li\u003e\r\n\u003cli\u003eArrays have methods like\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epop()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ereverse()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epush()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow to access an element from an array\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFamiliarize yourself with arrays by completing the exercises below. First, we'll practice creating and manipulating arrays in the JavaScript console, then we'll move on to implementing them into a small project using the HTML and jQuery concepts we learned last week.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a pointer? When might we see one when working with JavaScript arrays?\u003c/li\u003e\r\n\u003cli\u003eHow can we use square bracket notation to isolate a single element in an array? What does this notation look like?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epush()\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWhat types of objects can be placed into a JavaScript array?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eArray Practice in the Console\u003c/h3\u003e\r\n\u003cp\u003ePlay around with arrays of your own by completing each of the following in the JavaScript console:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake an array of your siblings' names or your favorite movie characters' names.\u003c/li\u003e\r\n\u003cli\u003eMake an array of your parents' names.\u003c/li\u003e\r\n\u003cli\u003eCombine these two arrays using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003econcat()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eAdd your pets' names using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epush()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eReverse the order of the array.\u003c/li\u003e\r\n\u003cli\u003eAccess one of your parents' names using the square bracket notation.\u003c/li\u003e\r\n\u003cli\u003eUpdate the name of one of your parents using the index and square bracket notation.\u003c/li\u003e\r\n\u003cli\u003eCheck out methods from the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Methods\" target=\"_blank\"\u003eMDN\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(stick to the accessor and mutator methods sections). Try at least five of them.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFavorite Things Webpage\u003c/h3\u003e\r\n\u003cp\u003eWhen you and your partner are decently comfortable with using arrays in the JavaScript console, move on to implementing them into a full project:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eBuild a page with a form containing input fields where users may enter several of their favorite things.\u003c/li\u003e\r\n\u003cli\u003eThen, write code that gathers each of these form input values and places them into one array.\u003c/li\u003e\r\n\u003cli\u003eNext, build a new array out of the second, first and third elements of the first array, in that order. Use square bracket notation to access each element of the original array, and the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to add these elements from the original array into the new array.\u003c/li\u003e\r\n\u003cli\u003eFinally, display the new array for the user in your page's HTML as list items in a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag. Please present them nicely :)\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-array-methods"},{"id":106,"title":"Monday: Looping in Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eLooping\u003c/h2\u003e\r\n\u003cp\u003eNow that you've got the basics of arrays under your belt, let's turn to a more advanced concept:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eLooping\u003c/strong\u003e. Here's a very simple loop. Try it out in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'JavaScript'\u003c/span\u003e];\r\n  languages.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(language)\u003c/span\u003e \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e'I love '\u003c/span\u003e + language + \u003cspan class=\"hljs-string\"\u003e'!'\u003c/span\u003e);\r\n  });\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's step through how this works:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate an array of strings.\u003c/li\u003e\r\n\u003cli\u003eCall the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the array.\u003c/li\u003e\r\n\u003cli\u003ePass in a callback function to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e, with a parameter called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguage\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eTake the first element in the array,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e'HTML'\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand assign it to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguage\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003ePop up an alert that says you love HTML.\u003c/li\u003e\r\n\u003cli\u003eRepeat 4 and 5 for the other elements in\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003eAdding Numbers with Loops\u003c/h2\u003e\r\n\u003cp\u003eWe can use loops for more interesting problems, too. For example, we've written code to add two numbers, but what if we wanted to add an arbitrary amount of numbers?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e total = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e summands = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e];\r\n  summands.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(summand)\u003c/span\u003e \u003c/span\u003e{\r\n    total += summand;\r\n  });\r\n  alert(total);  \u003cspan class=\"hljs-comment\"\u003e// 15\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a variable named\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set it to start out at 0. Each time through the loop we will increase its value so that this variable keeps track of the running total. The first time through the loop, the variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecomes 1, the second time it becomes 2, and so on.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/1nf3aey8izv87ej/forEach-loop-summands.png\" alt=\"forEach loop chart\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIt's conventional that an array name is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eplural\u003c/em\u003e, and that the parameter to the function passed into\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehave a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esingular name\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(e.g.,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummands\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the array and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the argument to the function). But for all JavaScript cares, the array\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummands\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the argument to the function could be called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esofa\u003c/code\u003e, but that would make it slightly more difficult for other developers to pick up your code. Remember, we want to write clean, professional, easy-to-understand JavaScript.\u003c/p\u003e\r\n\u003ch2\u003eRefactoring with Loops\u003c/h2\u003e\r\n\u003cp\u003eLet's go back to our Mad Libs JavaScript project. One thing I didn't particularly like about our code was all the duplication:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003escripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person1Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person1\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person2Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person2\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animalInput= $(\u003cspan class=\"hljs-string\"\u003e\"input#animal\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e exclamationInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#exclamation\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e verbInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#verb\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nounInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#noun\"\u003c/span\u003e).val()\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".person1\"\u003c/span\u003e).text(person1Input);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".person2\"\u003c/span\u003e).text(person2Input);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".animal\"\u003c/span\u003e).text(animalInput);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".exclamation\"\u003c/span\u003e).text(exclamationInput);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".verb\"\u003c/span\u003e).text(verbInput);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".noun\"\u003c/span\u003e).text(nounInput);\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n      event.preventDefault();\r\n    });\r\n  });\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's refactor this using arrays and looping:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003escripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n      blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#\"\u003c/span\u003e + blank).val();\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput);\r\n      });\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n      event.preventDefault();\r\n    });\r\n  });\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou might be getting tired of me pointing out the indentation, but I'm going to do it again because it's something worth taking your time to do right: Everything inside the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is indented two spaces, because it's code that's inside the callback function, and everything in a function gets indented so that it's obvious what's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ein\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe function and what's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoutside\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit.\u003c/p\u003e\r\n\u003ch2\u003eThe Importance of DRY Code (\"Don't Repeat Yourself!\")\u003c/h2\u003e\r\n\u003cp\u003eI'm going to end this lesson with a short lecture. One of the best definitions of \"good code\" I've heard states that the one thing that's certain about software, is that it changes. There will always be new features to add and bugs to fix. Often, the people working on the software will change, and even if they don't, the original developers will need to modify code they wrote months or years ago, code that they sometimes can't even remember writing.\u003c/p\u003e\r\n\u003cp\u003eOne of things I really like about the new, looping version of the Madlibs JavaScript is that there's no repetition in the code, which makes it easy to change. Before, we did the same thing 6 times: get the value of the input, then put in in the appropriate blank space. If we want to change something - like, I don't know, capitalize all the text before inserting it onto the page (obviously this is contrived, but hopefully you get the idea) - then we have to change all 6 places. In this small example, the only room for error is maybe forgetting to update one line, although that would be embarrassing. But as your programs get more complex, you'll see that, if you have repetitive code, it becomes very difficult to maintain, and you will regularly update one place and fail to update another - or worse yet, update them in different ways that cause incompatibilities down the road.\u003c/p\u003e\r\n\u003cp\u003eThere's a principle in software development called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDon't Repeat Yourself\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDRY\u003c/strong\u003e. DRY code is easy to change, because you only have to make any change in one place. One way we DRY up our code is by taking repetitive bits of code and extracting them into a function. Another way is by taking something we do several times and by turning it into a loop. Whenever you finish writing some code, you should always look back to see if there is any way you can DRY it up.\u003c/p\u003e\r\n\u003cp\u003eAlso, remember how I harped on about using descriptive variable names? \"Easy to change\" doesn't just mean clean code - if you can't figure out what a variable is for or what a function does based on its name, then it's harder to change it down the road, when you might not remember exactly how your code works (or when somebody else is trying to change your code).\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Looping\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Looping section, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to use a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop\u003c/li\u003e\r\n\u003cli\u003eNaming conventions for arrays and the parameter in a loop\u003c/li\u003e\r\n\u003cli\u003eThe importance of DRY code\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAs you saw, loops can be really powerful! They're an incredibly important programming concept, and we'll be using them from here on out. Begin becoming comfortable utilizing loops by completing the exercises listed below. We'll begin with several exercises in the console, and move on to creating and updating small projects.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow can loops contribute toward DRY code? Why is DRY code important?\u003c/li\u003e\r\n\u003cli\u003eIf we used\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto loop through an array called \"kittens\", what should we call the parameter in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction? Why?\u003c/li\u003e\r\n\u003cli\u003eWhat does the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator do?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eLooping Practice in the Console\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake an array of your friends' names. Loop through it and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ea greeting to each.\u003c/li\u003e\r\n\u003cli\u003eWrite a loop to multiply an arbitrary amount of numbers. This should look similar to the code to sum numbers from the lesson.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eRefactoring Existing Projects with Loops\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eRefactor your Mad Libs page we created in this exercise to use a loop.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringa-prep.herokuapp.com/#08.html\" target=\"_blank\"\u003eIntroduction to jQuery\u003c/a\u003e\u003cspan\u003e \u003c/span\u003elesson we created a web page that triggered alerts containing information about a particular HTML tag whenever a user clicked on an HTML element. Try to refactor this page's multiple, similar event listeners using a loop.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eWebpages with Looping\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake a web page that lists out your favorite ice cream flavors. Rather than writing the flavors in the HTML, use a JavaScript loop to insert the flavors into the page from an array.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eRemember\u003c/strong\u003e: When choosing a name for the variables in your loop, remember that it is good practice to use a plural for the array and the singular form of that word for the loop.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\r\n  \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'JavaScript'\u003c/span\u003e];\r\n  \u0026gt; languages.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(language)\u003c/span\u003e \u003c/span\u003e{\r\n      alert(\u003cspan class=\"hljs-string\"\u003e'I love '\u003c/span\u003e + language + \u003cspan class=\"hljs-string\"\u003e'!'\u003c/span\u003e);\r\n    });\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe array is named\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the parameter is the singular\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguage\u003c/code\u003e.\u003c/p\u003e","exportId":"monday-looping-in-arrays"},{"id":107,"title":"Monday: Array Mapping and Code","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eArray Mapping\u003c/h2\u003e\r\n\u003cp\u003eWe just learned how to use the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to loop through every element of an array. Now let's briefly explore\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e, a frequently-used array method that allows us to loop through every element of an array and\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo something\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto each element. Conveniently, the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod does not actually change the array it's called on, but it returns a new transformed array.\u003c/p\u003e\r\n\u003cp\u003eLet's say that we want to double every number in an array. We could do it with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis way:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e numbers = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e];\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e doubledNumbers = [];\r\n    numbers.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(number)\u003c/span\u003e \u003c/span\u003e{\r\n      doubledNumbers.push(number * \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n    });\r\n\r\n    alert(doubledNumbers);\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis works fine, but by using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can make the intent clearer, and our code even DRY-er:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e numbers = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e];\r\n\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e doubledNumbers = numbers.map(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number * \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e;\r\n  });\r\n\r\n  alert(doubledNumbers);\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere instead of looping through an array, we're simply saying that we want to transform one array into another. Note that the original array has not been changed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u0026gt; \u003cspan class=\"hljs-tag\"\u003edoubledNumbers\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-attr_selector\"\u003e[2, 4, 6, 8, 10]\u003c/span\u003e\r\n  \u0026gt; \u003cspan class=\"hljs-tag\"\u003enumbers\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-attr_selector\"\u003e[1, 2, 3, 4, 5]\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe logic inside of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan be as simple or as complicated as you want. Whatever you return will become the corresponding element of the new array. That is, when we say\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ereturn number * 2;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the example above, we're saying that each individual element of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray will be equivalent multiplying the corresponding element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eold\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray by two.\u003c/p\u003e\r\n\u003cp\u003eSo, continuing with this example, the first element in the original array is 1. Since we're multiplying each element by 2 in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, the first element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray will be 2. The second element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoriginal\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray is 2. So the second element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray will be 4, and so on.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eFor more information, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"\u003ethe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eentry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein the Mozilla Developer Network's JavaScript documentation.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Array mapping\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: In the Array Mapping lesson we learned how to use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return a new array with some sort of manipulation or calculation performed on each element. Let's further hone our array mapping skills by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a callback function? How is it different from a plain ol' everyday function?\u003c/li\u003e\r\n\u003cli\u003eWhat portion of the following code is the callback function? What does this particular callback function do?\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003ejavascript\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tripledNumbers = numbers.map(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number * \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eDoes\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ealter the array it is called upon?\u003c/li\u003e\r\n\u003cli\u003eDiscuss with your partner when you would use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand when it might be better to use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eArray Mapping Practice\u003c/h3\u003e\r\n\u003cp\u003eComplete the following in the JavaScript console or on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake an array of numbers, then use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return an array containing each of the original numbers + 1.\u003c/li\u003e\r\n\u003cli\u003eCreate an array of words. Use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return an array of the same words in all uppercase.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: forEach and Map\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: As you saw, looping and mapping are powerful concepts that can manipulate large amounts of data relatively quickly. Practice each by completing the exercises below using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand/or\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eRemember,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunderstanding\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the goal here. You're absolutely not expected to complete everything listed on this page. In fact, there is often intentionally\u003cspan\u003e \u003c/span\u003e\u003cem\u003emore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtent than can reasonably be completed in a single day. (This allows students an opportunity to later review concepts without having to repeat exercises they've previously done). Focus on understanding the concepts, not on speed.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e. When might you use one over another?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eGroceries\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a form that allows a user to input items they need at the store.\u003c/li\u003e\r\n\u003cli\u003eWhen the user submits the form, hide the form and display the list of items in alphabetical order, all uppercased.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eHint: To do this, build an array of the inputted items. (Make sure you don't include any blank fields.) Sort the array in alphabetical order. Make a new array with each entry uppercased (don't just uppercase them when you display them). Then, display the sorted list of things as list items inside a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eExplore the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\"\u003earrays entry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eof the Mozilla Developer Network JavaScript documentation to research what method might be used to sort arrays.\u003c/p\u003e\r\n\u003ch3\u003eWord Play\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a form where users may enter a sentence.\u003c/li\u003e\r\n\u003cli\u003eTurn that sentence into an array using the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\"\u003esplit method\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eThen, loop through this array to build a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray out of every word in the sentence that is 3 or more characters in length.\u003c/li\u003e\r\n\u003cli\u003eFinally, reverse the order of the new array,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\" target=\"_blank\"\u003ejoin\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eit back together into a string, and display it to the user.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eBuild a Deck\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop within another\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop to build an array representing a deck of cards. A deck consists of 52 cards - 13 ranks in each of 4 suits.\u003c/li\u003e\r\n\u003cli\u003eThen, display a list of every card in the deck. (Hint: Each element of the array should read something like \"ace of spades\" or \"4 of hearts\").\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe start of your output should look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/uow14lm92e275xg/deck.png\" alt=\"deck\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003ch4\u003eFilter, Reduce\u003c/h4\u003e\r\n\u003cp\u003eLook into the Array\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\"\u003efilter\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\"\u003ereduce\u003c/a\u003e\u003cspan\u003e \u003c/span\u003emethods. Refactor some of the projects above to make use of these methods.\u003c/p\u003e\r\n\u003ch4\u003eWord Order\u003c/h4\u003e\r\n\u003cp\u003eCreate a website that lets users input a block of text and returns a list of all the unique words and how many times they appeared.\u003c/p\u003e\r\n\u003cp\u003eFor example, if the user inputs \"hello world world\", the page should show:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ehello 1\u003c/li\u003e\r\n\u003cli\u003eworld 2\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf you finish, and feel comfortable with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloops, try to complete the above exercise but instead order the list by the number of appearances - greatest to least. For words that appear the same amount of times, order by which word appeared first.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eHint (and sneak peek at next week): Try creating and playing with an object hash and its contents in the JavaScript console:\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u0026gt; words = {programming: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, fun: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e};\r\n  \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e {programming: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, fun: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e}\r\n  \u0026gt; \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.keys(words);\r\n  [\u003cspan class=\"hljs-string\"\u003e\"programming\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"fun\"\u003c/span\u003e]\r\n  \u0026gt;words.programming\r\n  \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e\r\n  \u0026gt;words.fun\r\n  \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u0026gt;words.nothing\r\n  \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n  words.fun\u0026gt;words.programming\r\n  \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs the JavaScript business logic separate from the user interface logic?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive and easy to understand?\u003c/li\u003e\r\n\u003cli\u003eIs code properly indented throughout?\u003c/li\u003e\r\n\u003cli\u003eAre loops being used correctly? What about mapping?\u003c/li\u003e\r\n\u003cli\u003eAre there any loops that could instead be replaced with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-array-mapping-and-code"},{"id":108,"title":"Tuesday: Looping with \"For\"","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eLooping With for\u003c/h1\u003e\r\n\u003cp\u003eLet's continue with looping in Javascript.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a nice, easy-to-read, easy-to-understand method, but it's actually a pretty new addition to JavaScript. It also is limited for use on collections of information where processing iterates through each element in the collection. Let's take a look at a more traditional way of looping called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efor loop\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (var \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e \u0026lt;= \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n    alert(\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e);\r\n  }\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop works:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement takes three parameters: initialization, condition, and final expression.\u003c/li\u003e\r\n\u003cli\u003eThe initialization parameter lets you initialize a variable at the start of the for loop. In this case, we've initialized a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat starts at 1. This is the starting place for the loop. The initialization parameter is executed\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe loop runs.\u003c/li\u003e\r\n\u003cli\u003eThe condition parameter tells the loop when to stop running - or more accurately when to keep running. The loop will stop when the condition is no longer true. In our example, when the index variable is NOT less than or equal to 3, the loop will stop. Until then, it will keep going. The condition is evaluated every time the loop runs.\u003c/li\u003e\r\n\u003cli\u003eThe final expression parameter usually changes the initial value in some way; often by incrementing or decrementing it. In our example, the index variable will be increased by 1\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter each time the loop is executed\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eEach time the loop runs, the code within the loop will pop up an alert with the number of the pass we're on (index).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eHere's an example we saw in the last lesson re-written using a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop instead of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003evar languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Javascript'\u003c/span\u003e];\r\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (var \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e \u0026lt; languages.\u003cspan class=\"hljs-keyword\"\u003elength\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n    alert(\u003cspan class=\"hljs-string\"\u003e'I love '\u003c/span\u003e + languages[\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e] + \u003cspan class=\"hljs-string\"\u003e'!'\u003c/span\u003e);\r\n  }\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere is a new concept in this loop:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages.length\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not a method. Notice it's missing the parentheses at the end. Length is a property on every array we create. Strings also have this property, e.g.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e'foobar'.length\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\r\n    \u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Javascript'\u003c/span\u003e];\r\n    \u0026gt; languages.length;\r\n        \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e school = \u003cspan class=\"hljs-string\"\u003e\"Moringa School\"\u003c/span\u003e;\r\n    school.length;\r\n        \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we explore objects next week, we will talk more about properties but for now, let's continue looping.\u003c/p\u003e\r\n\u003cp\u003eIn the for loop example above, we have an array containing 3 elements. When we first start the loop, we run our initialization statement (\u003ccode class=\"\"\u003evar index = 0\u003c/code\u003e), which creates a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand initializes it with the value\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e0\u003c/code\u003e. We are now done with initialization, which only happens once, when we first enter the for loop. From now on the flow is:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003echeck\u003cspan\u003e \u003c/span\u003e\u003cem\u003econdition\u003c/em\u003e:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex \u0026lt; languages.length\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(continue to step 2 only if condition evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etrue\u003c/code\u003e, otherwise exit out of the for loop)\u003c/li\u003e\r\n\u003cli\u003eexecute code block:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ealert('I love ' + languages[index] + '!');\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eexecute \"final expression\" update statement:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex += 1\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003erepeat, beginning with step 1 above\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eThe first time through the loop index is 0, so languages[index] is \"HTML\". The second time through the loop index is 1, so languages[index] is \"CSS\". The third time through the loop index is 2, so languages[index] is \"Javascript\". The fourth time we try to enter the loop, index is 3 which is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot less than\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages.length\u003c/code\u003e(3), so we don't enter the loop again.\u003c/p\u003e\r\n\u003cp\u003eHere's a chart that may help illustrate the loop flow:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/1kh89c9j4hqbgif/for-loop-languages.png\" alt=\"for loop chart\"\u003e\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eWe previously used a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop to add all the elements of an array together. Let's rewrite that one too with a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003evar total = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n  var summands = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e];\r\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (var \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e \u0026lt; summands.\u003cspan class=\"hljs-keyword\"\u003elength\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n    total += summands[\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e];\r\n  }\r\n  alert(total); \u003cspan class=\"hljs-regexp\"\u003e//\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's a corresponding chart:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/ca68ui2w2q4wqx8/for-loop-summands.png\" alt=\"for loop summands charts\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNote that when\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis 0 here,\u003cspan\u003e \u003c/span\u003e\u003cem\u003esummands[index]\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis 1 because the first element of the array is 1.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis just being used here to refer to which element of the array - it's a bit confusing in this case because the elements of the array are also numbers.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod would have worked just as well in those above cases, but sometimes you'll find yourself in a situations where you need a regular\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop rather than a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop - for instance when you need to run a loop a certain number of times, rather than looping over an array.\u003c/p\u003e\r\n\u003cp\u003eHere's a version of our sum code that uses a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop but doesn't require an array to loop through:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\r\n    \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e total = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e currentNumber = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; currentNumber \u0026lt;= \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e; currentNumber += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n      total += currentNumber;\r\n    }\r\n  alert(\u003cspan class=\"hljs-string\"\u003e\"Total is: \"\u003c/span\u003e + total);\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen the loop begins we initialize our loop variable\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecurrentNumber\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto 1. (Note that we could have used\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eas the variable name here, but\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecurrentNumber\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eseems clearer since we'll be making use of the variable for something other than iterating through a loop; we'll be adding it to\u003cspan\u003e \u003c/span\u003e\u003cem\u003etotal\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eeach time through the loop in addition to using it as an iterator.) We then execute our loop as long as\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecurrentNumber\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis less than or equal to 5, iterating\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecurrentNumber\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eafter each run through the loop. Here's a chart showing the steps:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/uo80ur1fsffxl2e/for-loop-sum.png\" alt=\"for loop sum chart\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe first time through the loop,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 1, which is \u0026lt;= 5, so we go ahead and execute the statement in the code block:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal += currentNumber\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis now 1 after this first time through the loop. At the end of each time through the loop we're incrementing\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e, so\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis now 2.\u003c/p\u003e\r\n\u003cp\u003eThe second time through the loop,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 2, which is still \u0026lt;= 5, so again we execute\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal += currentNumber\u003c/code\u003e, setting total to 3. We again increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe third time through,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 3, so total now becomes 6. And we increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe fourth time through,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 4, so total becomes 10 and then we increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe fifth time through,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 5, so total becomes 15 and we increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe sixth time we try to start going through the loop,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 6, which is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026lt;= 5, so we're done with the for loop. We then show the user an alert that includes the total.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Looping with for\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: In the Looping with for lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe three parameters of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty in JavaScript\u003c/li\u003e\r\n\u003cli\u003eHow to use a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop both with and without arrays\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice utilizing for loops in a variety of ways by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloops? Describe to your partner a specific case in which you would use one over the other.\u003c/li\u003e\r\n\u003cli\u003eHow does a for loop 'know' when to stop looping?\u003c/li\u003e\r\n\u003cli\u003eWhat else can we do with the value we initialize as the first parameter in a for loop?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eCount Up By\u003c/h3\u003e\r\n\u003cp\u003eCreate a program that takes two numbers - one to count to and another to determine what multiple to use to get there.\u003c/p\u003e\r\n\u003cp\u003eHere is some sample input:\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eCount to: 30\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eCount by: 5\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOutput: 5, 10, 15, 20, 25, 30\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eCount to: 50\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eCount by: 7\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOutput: 7, 14, 21, 28, 35, 42, 49\u003c/p\u003e\r\n\u003cp\u003eDon't forget to consider how to handle any input that might be submitted:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eempty values (user just presses enter)\u003c/li\u003e\r\n\u003cli\u003enon-numeric values\u003c/li\u003e\r\n\u003cli\u003enegative numbers\u003c/li\u003e\r\n\u003cli\u003ecount by number is larger than the count to numbers\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eTurn forEach() into For\u003c/h3\u003e\r\n\u003cp\u003eGo back to the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringa-prep.herokuapp.com/#11.html\" target=\"_blank\"\u003elooping practice\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eproblems, and redo one of them with a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop instead of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop.\u003c/p\u003e\r\n\u003ch3\u003eWord Puzzle\u003c/h3\u003e\r\n\u003cp\u003eCreate a website that uses a method to replace vowels in a string with the dash symbol \"-\" to create a word puzzle to solve. Hide the original string when you show the resulting word puzzle, so that another person can try and guess it.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eString Input:\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\"Believe you can and you're halfway there. Robert Mugabe\"\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ePuzzle Output:\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\"B-l--v- y-- c-n -nd y--'r- h-lfw-y th-r-. R-b-rt M-g-b-\"\u003c/p\u003e\r\n\u003cp\u003eDo this\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewithout\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\"regular expressions\".\u003c/p\u003e","exportId":"tuesday-looping-with-for"},{"id":109,"title":"Tuesday: Behaviour Driven Development (BDD)","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eBehavior Driven Development\u003c/h1\u003e\r\n\u003cp\u003eOne of the most difficult challenges facing us as developers is taking a problem we want to solve or a concept we want to realize and turning it into a set of specific programming tasks.\u003c/p\u003e\r\n\u003cp\u003eA common process to do this is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBehavior-Driven Development\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(or\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://en.wikipedia.orgwiki/Behavior-driven_development\" target=\"_blank\"\u003eBDD\u003c/a\u003e) and is used by developers across coding languages. In BDD, rather than thinking about the code first, the focus begins on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebehaviors\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat we want to see in our final application. We identify what the program\u003cspan\u003e \u003c/span\u003e\u003cem\u003eshould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edo before determining how to make it do it.\u003c/p\u003e\r\n\u003cp\u003eTo practice this, we'll imagine that we have been hired by a person born on February 29th. She would like to determine if any given year is a leap year (meaning it's a birthday year for her!). Here's a finished example of what she'd like: Leap year detector.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/leapyear.png\" alt=\"leap year website\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd after hitting a leap year.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/leapyear_result.png\" alt=\"leap year website\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBefore we think about the programmatic elements, what\u003cspan\u003e \u003c/span\u003e\u003cem\u003eshould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea leap year program do? At its most basic, it will need to be able to take a year from the user and answer\u003cspan\u003e \u003c/span\u003e\u003cem\u003etrue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003efalse\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the question: is this year a leap year? Our program will only be able to provide an answer once it successfully evaluates what the user provides as a year. Let's think of all of the possibilities we might get from a user and what the correct response should be for them.\u003c/p\u003e\r\n\u003ch2\u003eSpecifications\u003c/h2\u003e\r\n\u003cp\u003e\u003ca href=\"http://www.timeanddate.com/date/leapyear.html\" target=\"_blank\"\u003eTimeanddate.com\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eoffers us the 3 criteria that must be considered to determine if a year is a leap year:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe year is evenly divisible by 4;\u003c/li\u003e\r\n\u003cli\u003eIf the year can be evenly divided by 100, it is NOT a leap year, unless;\u003c/li\u003e\r\n\u003cli\u003eThe year is also evenly divisible by 400. Then it is a leap year.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTherefore, each time a user offers a year to evaluate, we will ultimately need to test the value against each of the leap year rules.\u003c/p\u003e\r\n\u003cp\u003eIn BDD, our next step is to generate examples of these rules one-by-one. These examples are also known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003especifications\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003especs\u003c/strong\u003e. We can create a table that helps us sort out the details of the specifications for each rule using the following pieces of information:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ethe behavior that we'll need to write code to handle\u003c/li\u003e\r\n\u003cli\u003ea sample of input that would demonstrate the behavior\u003c/li\u003e\r\n\u003cli\u003ethe expected output we'd get when the code is working correctly\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/s8ba59r4ubwjuel/bdd-leap-year-grid.png?raw=1\" alt=\"Leap Year Input-Output Grid\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAlthough there are many other considerations for our final application (display, user interaction, form building, what if someone enters a letter?, etc), we will not worry about those until we have the core functionality in place. If we think of any additional functionality we need, we can add behaviors to our specification list as we go. When you code using BDD, it is good to get into the habit of making a note of all behaviors as you think of them, but staying focused on one task at a time.\u003c/p\u003e\r\n\u003cp\u003eLet's look at another example of specs organized on a table showing behavior, input and output:\u003c/p\u003e\r\n\u003ch3\u003eTitle Case\u003c/h3\u003e\r\n\u003cp\u003eIn this example, we want to build an application that will take a user's string of words and convert them to title case - capitalizing letters like we'd find in a book title. There are a few more rules for creating title cased words from strings than Leap Year. Let's brainstorm the first several:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/mwlf5zuw57m2w7w/bdd-title-case-grid.png?raw=1\" alt=\"BDD Table for Title Case\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs we did with the leap year application, we choose the simplest first - one word gets capitalized -\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ebeowulf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecomes\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eBeowulf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand go to the most complex. And as always, we may think of additional behaviors along the way: what if a user enters nothing? what about iPod or McDuff? Remember, let your brain keep brainstorming by adding new behaviors to your list but always stay focused on one specification at a time.\u003c/p\u003e","exportId":"tuesday-behaviour-driven-development-bdd"},{"id":110,"title":"Tuesday: Leap Year Exercise","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eLeap Year Part 1\u003c/h2\u003e\r\n\u003cp\u003eNow that we know about the behavior-driven development, let's walk through creating an application using the behavior-driven development process together. Taking time to learn how to identify and code individual behaviors\u003cspan\u003e \u003c/span\u003e\u003cem\u003enow\u003c/em\u003e, while our projects are still relatively small, and tackling larger projects will be that much easier later on.\u003c/p\u003e\r\n\u003ch2\u003eSeparation of Logic\u003c/h2\u003e\r\n\u003cp\u003eA brief reminder: As discussed previously, new programmers often mistakenly combine\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(back-end) and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(front-end) logics . User interface logic includes code that handles event listening, user input, and DOM manipulation. Business (back-end) logic evaluates and manages data. Business logic may be\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecalled\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eby user interface (front-end) logic but they should otherwise be two very separate areas of our code.\u003c/p\u003e\r\n\u003cp\u003eAs our projects continually grow in size and complexity, continue writing clean, professional code by keeping these two logics separated. If necessary, review the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringa-prep.herokuapp.com/#09.html\" target=\"_blank\"\u003eBusiness and User Interface Logic\u003c/a\u003e\u003cspan\u003e \u003c/span\u003elesson from last week.\u003c/p\u003e\r\n\u003ch2\u003eApplication Overview\u003c/h2\u003e\r\n\u003cp\u003eIn the next two lessons we will write a program that takes a year, provided by the user, and returns whether or not that year was (or will be) a leap year. Let's briefly cover what this application will look like:\u003c/p\u003e\r\n\u003ch3\u003eBusiness Logic\u003c/h3\u003e\r\n\u003cp\u003eThe business logic (back-end) of our application will evaluate whether the value provided is a leap year and will return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eaccordingly. Remember, business logic does not care how it is used and can operate independently of any user interaction. It happens in the 'back-end' or 'behind the scenes'.\u003c/p\u003e\r\n\u003ch3\u003eUser Interface Logic\u003c/h3\u003e\r\n\u003cp\u003eThe user interface (front-end) logic of the application will collect input from the user, call our business logic function, and display the results from the business logic back on the web page. Remember, the user interface logic does not care how the business logic works behind the scenes. All the user interface logic must know is that there is a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eleapYear()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction it may call that takes one argument and returns a boolean.\u003c/p\u003e\r\n\u003ch2\u003eBehavior Driven Development Process\u003c/h2\u003e\r\n\u003cp\u003eNow let's walk through how we would code this application using the principles of behavior-driven development:\u003c/p\u003e\r\n\u003ch3\u003eIdentifying Behaviors (also known as \"Specifications\")\u003c/h3\u003e\r\n\u003cp\u003eThe first step in behavior-driven development is to identify small, individual behaviors the program should demonstrate. And you don't have to think of all of them at the beginning. It's entirely alright to add to your list of behaviors/specs/specifications as you think of additional behaviours.\u003c/p\u003e\r\n\u003cp\u003eAlso, always begin with the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esimplest possible behavior\u003c/strong\u003e. In the previous lesson we created a table of specs, or behavior examples, including input and output examples that demonstrate what each behavior should look like in action:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/s8ba59r4ubwjuel/bdd-leap-year-grid.png?raw=1\" alt=\"Leap Year Input-Output Grid\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eKnow that your own specs aren't required to be in a table. In the Intro to Programming class here at Moringa School, we will place specs in our project's README.md file. A simple list of behaviors with an input/output example for each is just fine.\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eWriting Tests\u003c/h3\u003e\r\n\u003cp\u003eThe next step in BDD is to translate your first \"plain English\" spec into a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecoded\u003c/em\u003e\u003cspan\u003e \u003c/span\u003espec, using tools specifically designed for this purpose. Here at Moringa School you will learn how to code automated tests in the core program. Until then we will test our applications\u003cspan\u003e \u003c/span\u003e\u003cem\u003emanually\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eby inserting our example input into the application and double-checking that we receive the correct output.\u003c/p\u003e\r\n\u003cp\u003eTo test manually, we'll first need to build a basic front-end that includes a form to submit values. Later on when we have the ability to write\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecoded\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etests, we will\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebuild the user interface until the business logic is in place and passes all tests.\u003c/p\u003e\r\n\u003ch3\u003eWriting Code\u003c/h3\u003e\r\n\u003cp\u003eLet's create a project directory called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eleap-year\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand initialize a git repository within it to track our changes. We'll add a README with details about our project, and our list of plain English specs. We'll also add\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ejs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecss\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolders.\u003c/p\u003e\r\n\u003ch4\u003eHTML\u003c/h4\u003e\r\n\u003cp\u003eLet's first construct a basic web page where we may enter sample input into our program.\u003c/p\u003e\r\n\u003cp\u003eOur HTML page needs a link to the jQuery library, a link to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, a form to collect input, and a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ediv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display the program's output. We'll also include some Bootstrap:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eleap-year.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-html hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eLeap year detector\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eLeap year detector\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"leap-year\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"year\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEnter a year and find out if it's a leap year:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"year\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eFind out!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"result\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003eUser Interface Logic\u003c/h4\u003e\r\n\u003cp\u003eNext, we'll need some jQuery user interface logic that will retrieve user input from our form, and call our business logic\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eleapYear()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction (which we will write momentarily). After the business logic runs, it will also be responsible for displaying results:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"form#leap-year\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n      event.preventDefault();\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e year = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"input#year\"\u003c/span\u003e).val());\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = leapYear(year);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#result\"\u003c/span\u003e).text(result);\r\n    });\r\n  });\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we have attached a submit listener to our form. When this form is submitted, we assign the value the user enters to the variable,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eyear\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThen, we call the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eleapYear()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction (which we will write momentarily), pass it the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eyear\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable as an argument, and assign the return value (\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e) to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresult\u003c/code\u003e. Even though we haven't written the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eleapYear()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction yet, we already know from our specs that it\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etake a number and return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e. This is yet another benefit to identifying and listing out anticipated behaviors\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe begin coding.\u003c/p\u003e\r\n\u003cp\u003eNow, let's make sure our application can display a result to the user. For now we'll simply display the returned boolean value (currently assigned to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresult\u003c/code\u003e) with the line\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e$(\"#result\").text(result);\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch4\u003eBusiness Logic\u003c/h4\u003e\r\n\u003cp\u003eTo start coding our business logic using the behavior-driven development process, we'll take our plain English specifications (also known as \"specs\" or \"behavior examples\") and begin implementing code that\u003cspan\u003e \u003c/span\u003e\u003cem\u003edoes\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eeach of these behaviors.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eWe always want to begin with the simplest possible example that requires the least amount of code to implement\u003c/strong\u003e, and focus on only\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eone behavior at a time\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/s8ba59r4ubwjuel/bdd-leap-year-grid.png?raw=1\" alt=\"Leap Year Input-Output Grid\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHint: Often if we have a number of conditions that will be evaluated, the first behavior is what will ultimately be the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement when\u003cspan\u003e \u003c/span\u003e\u003cem\u003enone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the conditions are true. In our leap year application, the first behavior is returning\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor a year that is NOT a leap year, which means it is not divisible by 4, 100 or 400.\u003c/p\u003e\r\n\u003cp\u003eNow, in our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003escripts.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile, we will add the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eleast amount of code to implement the first behavior on our list\u003c/strong\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leapYear = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eyear\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n  };\r\n\r\n  \u003cspan class=\"hljs-comment\"\u003e// jQuery user interface logic here.\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDoes the code above seem odd? We haven't even checked to see if the year is a leap year, we just return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eno matter what. But remember, we're only writing\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ejust enough code to make our one, singular, most simple behavior pass\u003c/strong\u003e. If we began checking what the number was divisible by, we'd actually be getting ahead of ourselves!\u003c/p\u003e\r\n\u003cp\u003eThis may feel like overkill for such a small behavior, but if you develop good BDD habits now on these easier programs, you'll be good at it when you get to more difficult situations. Remember,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eone behavior at a time\u003c/strong\u003e, even if that behavior is very, very simple.\u003c/p\u003e\r\n\u003ch3\u003eTesting our Spec\u003c/h3\u003e\r\n\u003cp\u003eNow that we've isolated the most simple behavior possible, and written\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eenough code to make that one single behavior present in our application, let's manually test it out!\u003c/p\u003e\r\n\u003cp\u003eRemember, the first specification we are testing is that the application returns\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor a year that is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003ea leap year. Our example input was 1993, and our anticipated output was\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e. Let's launch our page in the browser and see what happens!\u003c/p\u003e\r\n\u003cp\u003eWe can enter 1993 into our form and submit....\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/yqjm0kkfdl76h0s/leap-year-first-spec-pass.png\" alt=\"leap-year-first-spec-passing\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd look, our program is returning\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e, which is the exact behavior we outlined in our first specification. Our first spec passes!\u003c/p\u003e\r\n\u003cp\u003eLet's commit. When following the BDD process you should commit after each passing spec.\u003c/p\u003e\r\n\u003ch3\u003eRepeat!\u003c/h3\u003e\r\n\u003cp\u003eNow that our first spec passes when tested manually, we simply move onto the next spec and repeat the process!\u003c/p\u003e\r\n\u003cp\u003eOur next behavior details that our program should return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor any year divisible by 4, since that makes it a leap year. Although we know that years divisible by 100 and 400 will\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eneed to be considered, we must focus on\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eone spec at a time\u003c/strong\u003e. Therefore, we are\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003egoing to add code to check whether the provided year is divisible by 4. We'll get to the rest later.\u003c/p\u003e\r\n\u003cp\u003eAgain, we'll add\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejust enough\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecode to make this second specification pass. In this case, we can just add a simple conditional:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leapYear = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eyear\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (year % \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n    }\r\n  };\r\n\r\n  \u003cspan class=\"hljs-comment\"\u003e// jQuery user interface logic here.\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's manually test this behavior too. Referring back to our list of specs, the example input for this second specification was 2004, and we anticipated the output\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAnd look! If we refresh our application and submit the year 2004, we receive 'true':\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/1d7j9lyk78qwzhr/leap-year-second-spec-pass.png\" alt=\"second-spec-passing\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAgain, we will commit after this additional passing spec.\u003c/p\u003e\r\n\u003cp\u003eTime to tackle our next specification: We decided that our application should return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen the provided year is divisible by 100, because that means it is not a leap year. We'll add the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esmallest amount\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof code to create this behavior:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leapYear = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eyear\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (year % \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (year % \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n    }\r\n  };\r\n\r\n  \u003cspan class=\"hljs-comment\"\u003e// jQuery user interface logic here.\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, we can refresh the application and manually test this behavior. Our example input was 1900, and we expected to receive the output\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/wx7ijdijfttt67n/third-spec-pass.png\" alt=\"third-spec-passing\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd look, it works! Let's commit again.\u003c/p\u003e\r\n\u003ch3\u003eRefactoring\u003c/h3\u003e\r\n\u003cp\u003eAs you work through your specs, implementing each individual behavior one-by-one, you may find your code becoming a tiny bit redundant. That's okay! Pausing to refactor along the way is entirely alright in the BDD process. In fact, it's encouraged!\u003c/p\u003e\r\n\u003cp\u003eCan we refactor our application's business logic to make it efficient or easy to read? We currently have two different places returning\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e. Let's refactor our code so that a single evaluation may check whether the year is divisible by 4\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e100. We'll change our 100 condition to use the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enot\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e!\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eso it also returns\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leapYear = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eyear\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ((year % \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) \u0026amp;\u0026amp; (year % \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e !== \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)) {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n    }\r\n  };\r\n\r\n  \u003cspan class=\"hljs-comment\"\u003e// jQuery user interface logic here.\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGreat! We'll commit one more time.\u003c/p\u003e\r\n\u003ch3\u003eImplementing Additional Behaviors\u003c/h3\u003e\r\n\u003cp\u003eWe have one last spec on our current list. Our program should return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor years divisible by 400, since that means they are a leap year. You guessed it, we'll add\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejust enough\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecode to add this functionality to our application, therefore making this last spec \"pass\":\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leapYear = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eyear\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ((year % \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) \u0026amp;\u0026amp; (year % \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e !== \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) || (year % \u003cspan class=\"hljs-number\"\u003e400\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)) {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n    }\r\n  };\r\n\r\n  \u003cspan class=\"hljs-comment\"\u003e// jQuery user interface logic here.\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur example input for this spec was 2000, and we expected our application to return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e, since 2000 was a leap year. Let's test it out:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/tswr2axcodiqiz3/fourth-spec-passing.png\" alt=\"fourth-spec-passing\"\u003e\u003c/p\u003e\r\n\u003cp\u003ePerfect! We've successfully coded all behaviors outlined by our list of specifications. We know each spec passes, because we received our intended outputs for each individual input.\u003c/p\u003e\r\n\u003cp\u003eIn the next lesson we'll add additional user interface logic to our leap year application.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003eLeap Year Part 2\u003c/h2\u003e\r\n\u003cp\u003eIn the previous lesson, we wrote and tested the business logic for our leap year application. We know our program is successfully demonstrating all necessary behaviors because all of our specifications are passing! Additionally, because we made sure to implement the least amount of code to make each spec pass, and refactor along the way, we have clean, easy-to-read code. Perfect!\u003c/p\u003e\r\n\u003cp\u003eNow that our business logic is in place, let's include additional user interface logic.\u003c/p\u003e\r\n\u003ch2\u003eBusiness Before User Interface\u003c/h2\u003e\r\n\u003cp\u003eIn the core program you will learn how to write coded, automated tests to assist in the BDD process. When these tools are available we will not write user interface logic until all basic back-end logic is present and passes specs.\u003c/p\u003e\r\n\u003cp\u003eBecause we're testing\u003cspan\u003e \u003c/span\u003e\u003cem\u003emanually\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein Intro to Programming, we had to begin with basic HTML and user interface logic to see our results. This is absolutely alright for now, just know that user interface logic should not be written until\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eafter\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ebusiness logic is complete in the core program.\u003c/p\u003e\r\n\u003ch2\u003eUser Interface\u003c/h2\u003e\r\n\u003cp\u003eAs mentioned, we simply created the bare minimum user interface to allow us to manually test our application. Now that all necessary business logic is present, and passes all of our tests, let's add more.\u003c/p\u003e\r\n\u003cp\u003eWe'll spruce up the output section of our page (the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ediv) so that we can present the user with a descriptive message instead of a terse\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eleap-year.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-html hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eLeap year detector\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eLeap year detector\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"leap-year\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"year\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEnter a year and find out if it's a leap year:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"year\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eFind out!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"result\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"year\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e is \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"not\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e a leap year.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll add CSS to hide the div that will display the result until the evaluation is completed:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecss/styles.css\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-css hljs\"\u003e\u003cspan class=\"hljs-id\"\u003e#result\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n  }\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll update our user interface logic to appropriately fill the spans in our HTML\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebased on the value of result\u003c/em\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-comment\"\u003e// business logic\u003c/span\u003e\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leapYear = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eyear\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ((year % \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) \u0026amp;\u0026amp; (year % \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e !== \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) || (year % \u003cspan class=\"hljs-number\"\u003e400\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)) {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n    }\r\n  };\r\n\r\n  \u003cspan class=\"hljs-comment\"\u003e// user interface logic\u003c/span\u003e\r\n  $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"form#leap-year\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n      event.preventDefault();\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e year = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"input#year\"\u003c/span\u003e).val());\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = leapYear(year);\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".year\"\u003c/span\u003e).text(year);\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!result) {                 \u003cspan class=\"hljs-comment\"\u003e// same as writing if (result === false)\u003c/span\u003e\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".not\"\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"not\"\u003c/span\u003e);\r\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".not\"\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n      }\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#result\"\u003c/span\u003e).show();\r\n    });\r\n  });\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the code above, we do the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd the contents of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eyear\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable into a span with the class\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eyear\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eIf the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe set the text of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enot\u003c/code\u003e\u003cspan\u003e \u003c/span\u003espan to \"not\", so that our page will read \"is not a leap year\".\u003c/li\u003e\r\n\u003cli\u003eIf the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe instead empty the\u003ccode class=\"prettyprint\"\u003enot\u003c/code\u003e\u003cspan\u003e \u003c/span\u003espan, so that our page will read \"is a leap year\".\u003c/li\u003e\r\n\u003cli\u003eFinally, we show our entire\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ediv so that the user can see their results.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eSeparation of Logic\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eIt is important to understand why this code belongs in user interface logic.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eWe could\u003cspan\u003e \u003c/span\u003e\u003cem\u003etheoretically\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ejust have our business logic return a formatted string that said \"____ is a leap year\", or \"_____ is NOT a leap year\", but this seriously mixes up business and user interface logics. After all, we're displaying our results in sentence format\u003cspan\u003e \u003c/span\u003e\u003cem\u003efor the user's sake\u003c/em\u003e. It's therefore\u003cspan\u003e \u003c/span\u003e\u003cem\u003euser\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einterface logic.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, what if we later wanted to change the message containing the user's results? We would have to modify the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebusiness\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elogic to change the\u003cspan\u003e \u003c/span\u003e\u003cem\u003edisplay\u003c/em\u003e! This may not seem like a big deal in such a small app, but imagine doing something similar in an application with thousands, even\u003cspan\u003e \u003c/span\u003e\u003cem\u003emillions\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof lines of code! You'd have to unravel countless lines of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eback-end\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elogic just to change the way something is displayed to the user.\u003c/p\u003e\r\n\u003cp\u003eFocus on developing good habits early on, even if they seem like overkill for these smaller projects. Not only will this make it easier to navigate your own code as our projects grow in size and complexity, but it will make it easier for other developers to collaborate with you, and is considered far more professional.\u003c/p\u003e\r\n\u003cp\u003eAlways keep your business and user interface logic separate. Follow the BDD process to clearly outline your program's intended behaviors. Focus on one behavior at a time. And write the minimum code to make each spec pass. Developing these habits now will make tackling the complex applications you'll soon build\u003cspan\u003e \u003c/span\u003e\u003cem\u003efar\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eeasier!\u003c/p\u003e\r\n \r\n \r\n\u003ch1\u003ePractice: Leap Year, Pig Latin\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eBetween now and next Monday, begin brainstorming potential group project ideas.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Focus on breaking your project down into small behavior examples and coding one behavior (also known as a \"specification\" or \"spec\") at a time. Make a list of specifications with input and output examples\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewriting any code. Also, as our projects grow in size, continue to practice good organization by keeping business logic and user interface logic distinctly separate.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003ePretend you have an application that counts the number of vowels in a string. This application has specs detailing each behavior it must exhibit. However, they're out of order! Reorder the following list of specs from the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esimplest possible behavior\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emost complex\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehavior with your partner. Consult with other pairs, if necessary:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe program recognizes vowels in a multiple-word sentence, regardless of capitalization.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"CATS CATERED THE EVENT\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 7\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes a single vowel in a multiple-character word.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"cat\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 1\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes a single vowel.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"a\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 1\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes multiple vowels in a single word.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"cater\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 2\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes a single vowel, regardless of case.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"A\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 1\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes all vowels in a multiple-word sentence, regardless of inconsistent capitalization.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"CaTS CATEReD ThE EveNT\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 7\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program ignores non-alphabetical characters, since they cannot be vowels.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"4%\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 0\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes vowels in a multiple-word sentence.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"cats catered the event\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 7\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eLeap Year\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the leap year lessons to build an application that identifies whether a given year is a leap year. Make each of the specs detailed in the leap year lessons \"pass\" (ie: your program returns the expected output for the expected input).\u003c/p\u003e\r\n\u003ch4\u003eSpecs from Leap Year Lessons\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe program should return when a year is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea leap year.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 1993\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: false\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program should return 'true' for years divisible by 4, since those are leap years.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 2004\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: true\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program should return 'false' for years divisible by 100, since those are not leap years.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 1900\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: false\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program should return 'true' for years divisible by 400, since those are leap years.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 2000\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: true\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAll specs should be listed in the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003ePig Latin\u003c/h3\u003e\r\n\u003cp\u003eWrite a Pig Latin translator or should we say an\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"igPay atinLay anslatorTray\"\u003c/em\u003e?\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eRead all instructions carefully before beginning.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch4\u003eHow Pig Latin Works\u003c/h4\u003e\r\n\u003cp\u003eFirst, here are the rules of Pig Latin:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor words beginning with a vowel, add \"ay\" to the end.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor words beginning with one or more consonants, move all of the first consecutive consonants to the end, and add \"ay\".\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf the first consonants include \"qu\", move the \"u\" along with the \"q\". Don't forget about words like \"squeal\" where \"qu\" doesn't come first!\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor words beginning with \"y\", treat \"y\" as a consonant.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eInstructions\u003c/h4\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eBefore writing any code, make a list of specs detailing each behavior your program will have. Start with the simplest possible behavior, and slowly move up in complexity. To get you started, the first two specs are provided below.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eHave at least two other pairs check your specs before you begin coding.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eEnsure that each possible behavior is represented by a spec, and that they are ordered from simplest to most complex.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003ePlace your specs (and their example inputs and outputs) in your project's README.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCreate a basic user interface that allows your application to accept user input, and display output. This will allow us to manually test each spec.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eSlowly add business logic. Begin by focusing on the behavior outlined in your first, most simple spec. Implement the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eleast amount of logic necessary\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto create this behavior.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eManually test this behaviour by inputting the example input described by the spec into your application, and confirm you receive the correct output.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eOnce behavior outlined by the first spec is successfully implemented, repeat steps 5 - 7 for each subsequent spec. Do not move onto the next spec until the previous one passes.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch4\u003eHelpful Hints\u003c/h4\u003e\r\n\u003cp\u003eWhen you get to consonants, don't try to solve it all at once. Instead, start with an example of a word that only has one consonant; then a word with two consonants; then a word with three; and then tackle the exceptions to the rule, like \"qu\" and \"y\". Once your application can successfully translate single words, work on translating entire sentences. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.slice()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estring method may also come in handy.\u003c/p\u003e\r\n\u003ch4\u003eSpecs\u003c/h4\u003e\r\n\u003cp\u003eTo get you started, below are the first two \"plain English\" specs:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe program does nothing to non-alphabetical characters, since they do not contain consonants or vowels.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Input:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e3\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Output:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e3\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program adds \"ay\" to single-letter words beginning with a vowel.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Input:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ei\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Output:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eiay\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you are done with today's excercises, attempt the following as you explore further with regex.\u003c/p\u003e\r\n\u003ch4\u003eRefactor with Regular Expressions\u003c/h4\u003e\r\n\u003cp\u003eRefactor your code for the projects above using\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\"\u003eregular expressions\u003c/a\u003e. A handy place to try using regular expressions before implementing them is at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://rubular.com/\" target=\"_blank\"\u003eRubular\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch4\u003eBases\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eBinary\u003c/strong\u003e: Write a method to convert numbers from binary to decimal. The input should be a string, and the output an integer. Decimal is the normal system we use for counting. We start at 0, increment until we reach 9, and then reset back to 0 and add another number to the left. In binary, we also start at zero, but we only increment until we reach 1. Then we reset back to zero and add another number to the left.\u003c/p\u003e\r\n\u003cp\u003eHere are some example of numbers in decimal and binary:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs nginx\"\u003e\u003cspan class=\"hljs-title\"\u003eDecimal\u003c/span\u003e  Binary\r\n    \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e        \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e        \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e      \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e\r\n  ...      ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eTrinary\u003c/strong\u003e: You get where I'm going, right?\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eHexadecimal\u003c/strong\u003e: Here's what happens after 9...\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs nginx\"\u003e\u003cspan class=\"hljs-title\"\u003eDecimal\u003c/span\u003e  Hexadecimal\r\n  ...      ...\r\n   \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e        \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e        a\r\n  \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e        b\r\n  \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e        c\r\n  \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e        d\r\n  \u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e        e\r\n  \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e        f\r\n  \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e\r\n  ...     ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you get this far, write a method that takes two arguments: the number to be evaluated and the base you would like it to be evaluated in.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs the business logic and user interface logic distinctly separate?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive and in lower camelCase?\u003c/li\u003e\r\n\u003cli\u003eDoes the code have proper indentation and spacing throughout?\u003c/li\u003e\r\n\u003cli\u003eAre for loops being used correctly?\u003c/li\u003e\r\n\u003cli\u003eAre\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003eloops being used correctly?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs code broken down into plain English specs?\u003c/li\u003e\r\n\u003cli\u003eDo these specs accurately represent the behaviours required of the program?\u003c/li\u003e\r\n\u003cli\u003eAre there any additional specs you can think of?\u003c/li\u003e\r\n\u003cli\u003eIs the business and user interface logic well-separated?\u003c/li\u003e\r\n\u003cli\u003eDoes the application work as expected?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"tuesday-leap-year-exercise"},{"id":111,"title":"Wednesday: Practice: Roman Numerals and Cryptosquare","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003ePractice\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Focus for these exercises (and all exercises going forward) on breaking your project down into small behavior examples and coding\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eone behavior at a time\u003c/strong\u003e. Make behavior grids before writing any code. Make sure to separate business logic and user interface logic.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eExplain what behavior-driven development is. Why is it so beneficial?\u003c/li\u003e\r\n\u003cli\u003eReview the specifications each partner wrote yesterday and discuss the following:\r\n\u003cul\u003e\r\n\u003cli\u003eIs each individual behavior listed as specific as possible? Does each represent\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehavior, or multiple behaviors?\u003c/li\u003e\r\n\u003cli\u003eIs the simplest possible behavior listed first? If so, how do you know it's the simplest? If not, which one should come first?\u003c/li\u003e\r\n\u003cli\u003eHow did you ensure you wrote the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eleast\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eamount of code possible to make each pass? What did that look like?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eRoman Numerals\u003c/h3\u003e\r\n\u003cp\u003eWrite a method to convert numbers into Roman numerals. Roman numerals are based on seven symbols:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs javascript\"\u003e\u003cspan class=\"hljs-built_in\"\u003eSymbol\u003c/span\u003e  Value\r\n      I       \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\r\n      V       \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n      X       \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n      L       \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e\r\n      C       \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e\r\n      D       \u003cspan class=\"hljs-number\"\u003e500\u003c/span\u003e\r\n      M       \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e000\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe most basic rule is that you add the value of all the symbols: so II is 2, LXVI is 66, etc.\u003c/p\u003e\r\n\u003cp\u003eThe exception is that there may not be more than three of the same characters in a row. Instead, you switch to subtraction. So instead of writing IIII for 4, you write IV (for 5 minus 1); and instead of writing LXXXX for 90, you write XC.\u003c/p\u003e\r\n\u003cp\u003eYou also have to separate ones, tens, hundreds, and thousands. In other words, 99 is XCIX, not IC. You cannot count higher than 3,999 in Roman numerals.\u003c/p\u003e\r\n\u003cp\u003eDraft some specifications and input-output examples to brainstorm the behaviors that you'll want to capture in your application. Tackle them one-by-one, worrying only about the future behaviors once the current example is implemented. All specifications should be listed in the project's README.md file.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not move on to the next exercise until you've completed the previous one\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003eCryptosquare\u003c/h3\u003e\r\n\u003cp\u003eA classic method for composing secret messages is called a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esquare code\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe spaces and punctuation are removed from the English text and the characters are written into a square (or rectangle) and the entire message is downcased. For example, the sentence \"don't compare yourself to others, compare yourself to the person you were yesterday\" is 69 characters long, so it is written into a rectangle with 9 rows and 8 columns.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/zutqzcmipdxu5rs/cryptosquare.png?raw=1\" alt=\"Cryptosquare Image\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe coded message is obtained by reading down the columns going left to right. For example, the message above is coded as:\u003c/p\u003e\r\n\u003cp\u003e\"daeer leweo rlref rerne fsyts rdtyt coooe acooo utnyy ouomr hyemr tpseo spsha eput\"\u003c/p\u003e\r\n\u003cp\u003eWrite a program that outputs the encoded version of a given block of text. Again, identify each individual behavior this application should demonstrate, and write a specification (including an input/output example) for each. Tackle writing code for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehavior at a time, and ensure your spec \"passes\" (you receive the correct output when you provide your input example) before moving to the next specification. List all specifications in the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eThe size of the square (number of columns) should be decided by the length of the message. If the message is a length that creates a perfect square (e.g. 4, 9, 16, 25, 36, etc), use that number of columns. If the message doesn't fit neatly into a square, choose the number of columns that corresponds to the smallest square that is larger than the number of characters in the message.\u003c/p\u003e\r\n\u003cp\u003eOutput the encoded text in groups of five letters. For example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003eencrypt(\u003cspan class=\"hljs-string\"\u003e\"Have a nice day. Feed the dog \u0026amp; chill out!\"\u003c/span\u003e);\r\n      # =\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hifei acedl v...\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eGo back and tackle any\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFurther Exploration\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eexercises from previous days this week that you have not yet completed.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs code broken down into plain English specs? Do these specs accurately represent the behaviours required of the program?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive, and in lower camelCase?\u003c/li\u003e\r\n\u003cli\u003eIs code indented properly throughout?\u003c/li\u003e\r\n\u003cli\u003eIs the business and user interface logic well-separated?\u003c/li\u003e\r\n\u003cli\u003eDoes the application work as expected?\u003c/li\u003e\r\n\u003cli\u003eIs the code clean, well-refactored, and generally easy to follow?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"wednesday-practice-roman-numerals-and-cryptosquare"},{"id":112,"title":"Thursday: Catch-up Day","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eCatch Up Day\u003c/h2\u003e\r\n\u003cp\u003eTake this day to do a review of this week's work and also the previous weeks' content. Take time and go through the further exploration sections and make sure that you are at par with what we are learning everyday. The technical mentors will be there to assist you as you cover what you did not understand and any other incomplete projects and exercises.\u003c/p\u003e\r\n\u003cp\u003eRemember, the ABC of a software developer is \"Always Be Coding\". Have fun!! :)\u003c/p\u003e","exportId":"thursday-catch-up-day"},{"id":267,"title":"Friday: Independent Project - Ping Pong","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch3\u003ePing Pong\u003c/h3\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eCreate a web application that takes a number from a user and returns a range of numbers from 1 to the chosen number with the following exceptions:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eNumbers divisible by 3 are replaced with \"ping\"\u003c/li\u003e\r\n\u003cli\u003eNumbers divisible by 5 are replaced with \"pong\"\u003c/li\u003e\r\n\u003cli\u003eNumbers divisible by 15 are replaced with \"pingpong\"\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA user should be able to enter a new number and see new results over and over again.\u003c/p\u003e\r\n\u003cp\u003eBreak the program down into simple, individual behaviors with input/output examples. Begin with the simplest possible behavior. List these behaviors (also known as \"specs\" or \"specifications\") in the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003eExample Layout\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/hw7lgqaf3ng362u/ping-pong-layout-webshot.png?raw=1\" alt=\"Ping Pong Layout\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYour final application is not required to look like the example. Make it look better!\u003c/p\u003e\r\n\u003ch3\u003eExample Specifications Section in README\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/y3s9xmnmpl6yqfi/example-specs-in-readme.png\" alt=\"example-specs-in-readme-file\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis is only the first specification. Include similar specifications in your README for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehaviors your program demonstrates.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you finish meeting the objectives for this project, consider adding additional features, such as:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRecreate the example layout.\u003c/li\u003e\r\n\u003cli\u003eAdd images and other custom aesthetics.\u003c/li\u003e\r\n\u003cli\u003eImplement different behaviors/effects/images for different inputs.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eYour code will be reviewed for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eJavaScript business logic and user interface logic are separate.\u003c/li\u003e\r\n\u003cli\u003eVariable names are descriptive and use lower camel case (e.g. myVariableExample).\u003c/li\u003e\r\n\u003cli\u003eCode has proper indentation and spacing.\u003c/li\u003e\r\n\u003cli\u003eAll previous objectives have been met.\u003c/li\u003e\r\n\u003cli\u003eProject is broken down into \"plain English\" specs, listed in README.\u003c/li\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate and consistent.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eProject works as expected.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of week’s concepts. If prompted, you are able to discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject submittion time. It is to be submitted by 6pm onFriday unless otherwise stated\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eSubmission of Independent Projects\u003c/h2\u003e\r\n\u003cp\u003eIndependent Projects must be submitted by\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e6pm on Friday.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(For Moringa prep part-time students, code review and deadlines will be discussed in class.)\u003c/p\u003e\r\n\u003cp\u003eComplete the following steps to submit your project:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eBefore you start working on your project,create a github repository for your project\u003c/li\u003e\r\n\u003cli\u003eFill this\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://submit-ip.moringaschool.com/\" target=\"_blank\"\u003eform.\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eStart working on your project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eBefore pushing your final code to Github,\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eat 5pm do a final check for each objective. Spend a few minutes checking indentation, removing commented-out code, creating a detailed README, etc. Your project should be polished and complete.\u003c/li\u003e\r\n\u003cli\u003e\u003cstrong\u003ePush the final code to your GitHub repo by 6pm local time.\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEven if you are not completely done working on your project, push anyways which will communicate to your TM how much you have completed\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"i1132a4c6f26441f01cff15ecaadc8d6f"},{"id":1128,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","exportId":"i4380361521db3e98b94c2b244835cb40"},{"id":114,"title":"Weekend: Research on Javascript Objects and Object Oriented Programming","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eObject Oriented JavaScript\u003c/h2\u003e\r\n\u003cp\u003eFor this weekend, let's take a look at some concepts in programming that are applied in many programming languages around the world. Do some reading and familiarize yourself with object oriented programming principles which include the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEncapsulation\u003c/li\u003e\r\n\u003cli\u003eData Abstraction\u003c/li\u003e\r\n\u003cli\u003ePolymorphism\u003c/li\u003e\r\n\u003cli\u003eInheritance\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe concept of object oriented programming has survived for over 40 years and some of the most popular languages that we have today heavily use this concept.\u003c/p\u003e\r\n\u003cp\u003eIn Javascript working with objects is pretty efficient as we shall observe in the coming week.\u003c/p\u003e\r\n \r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n \r\n\u003ch3\u003eResearch\u003c/h3\u003e\r\n\u003cp\u003eLook at working with objects in Javascript and applying object oriented programming in Javascript. You may use the following links to help you understand:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.w3schools.com/js/js_objects.asp\" target=\"_blank\"\u003eW3 Schools: Javascript Objects\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.tutorialspoint.com/javascript/javascript_objects.htm\" target=\"_blank\"\u003eTutorials Point: JavaScript Objects\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003cp\u003ePS: I have a prize for you for the weekend. It's something that I've always wanted to show you. Click\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://cdn.iwastesomuchtime.com/632014032559.jpg\" target=\"_blank\"\u003ehere\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto find out.\u003c/p\u003e","exportId":"weekend-research-on-javascript-objects-and-object-oriented-programming"}]},{"id":26,"name":"Week 4","status":"unlocked","unlockDate":null,"prereqs":[25],"requirement":"all","sequential":true,"exportId":"i8cc52d30f3269797c8cf847b330ec0ef","items":[{"id":897,"title":"Monday: Moringa Core Interest Form","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ciframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdbkML8aC5PDalWxylCHjBeItKTdpq16VgJ0if9PHHFSgQU1g/viewform?embedded=true\" width=\"760\" height=\"500\" frameborder=\"0\"\u003eLoading...\u003c/iframe\u003e","exportId":"monday-moringa-core-interest-form"},{"id":898,"title":"Monday: Announcement","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\n\u003cstrong\u003eCongratulations\u003c/strong\u003e, you're almost done with this module! \u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eA few updates/reminders for this week:\u003c/div\u003e\r\n\u003cdiv\u003e- All Independent Projects must be complete and reviewed by Technical Mentors before Tuesday of next week\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eLet your TM know if you have any questions. Have a great week, keep up the great work.\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\u0026lt;3\u003c/div\u003e","exportId":"monday-announcement"},{"id":143,"title":"Monday: Literal Notation/ Literal Notation vs Constructors","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":false,"content":"\u003ch1\u003eObject Oriented Javascript\u003c/h1\u003e\r\n\u003ch3\u003eObject-Oriented JavaScript Objectives\u003c/h3\u003e\r\n\u003cp\u003eWe've learned about JavaScript data types like strings, numbers and booleans. We have also learned about JavaScript arrays which are collections of indexed data. This week we are going to learn about JavaScript\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eobjects\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ewhich collect data AND functions into a single\u003cspan\u003e \u003c/span\u003e\u003cem\u003eobject\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eunit. We will see how business logic and user interface logic work together in the creation and updating of objects.\u003c/p\u003e\r\n\u003cp\u003eAt the end of the week, you should be able to:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ebuild JavaScript objects with constructors\u003c/li\u003e\r\n\u003cli\u003eadd methods to JavaScript objects by creating prototypes\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch1\u003eJavascript Objects\u003c/h1\u003e\r\n\u003cdiv class=\"alert alert-danger\"\u003e\r\n\u003cp\u003eFor practice using JavaScript objects, see the end of the lesson text for guided exercises.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eJavaScript is an object-oriented programming language. Though we may not have realized it, we've already been working with JavaScript objects when we use data types like strings and numbers, or when we use a data collection like arrays. Even the functions we write are also objects in JavaScript. In this lesson, we will explore what it means to be an object in JavaScript.\u003c/p\u003e\r\n\u003cp\u003ePreviously, we have had variables that have stored strings, numbers, Booleans, arrays and functions. What happens when we want a variable to store much more information about the \"thing\" the variable represents? For example, if\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyou\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewere a variable and we wanted to store information about you (your name, your course level, your planned track, your enrollment status) in the single variable \"moringaStudent\" - we'd need more than a single string or a single array, we'd need an object!\u003c/p\u003e\r\n\u003cp\u003eIn technical terminology, objects are containers that\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eencapsulate\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edata - meaning all of the relevant data and functions for the thing that the variable name represents are kept together in a \"capsule\", better known as an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eobject\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat can be created and manipulated in our programs as a single unit.\u003c/p\u003e\r\n\u003cp\u003eHere is an example of an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emoringaStudent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e moringaStudent = {\r\n    firstName: \u003cspan class=\"hljs-string\"\u003e\"Charlie\"\u003c/span\u003e,\r\n    lastName: \u003cspan class=\"hljs-string\"\u003e\"Obina\"\u003c/span\u003e,\r\n    level: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\r\n    track: [\u003cspan class=\"hljs-string\"\u003e\"Ruby\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"JavaScript\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"Rails\"\u003c/span\u003e],\r\n    enrollmentStatus: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n  };\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's take a look at how this object is defined. We have our variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emoringaStudent\u003c/code\u003e. We assign it the value of an object by using the curly braces,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e{ }\u003c/code\u003e. This is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eliteral notation\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand we have used it previously to create strings by using quotes,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\" \"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand arrays by using brackets,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e[ ]\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eInside the curly braces are five properties for our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emoringaStudent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject: first name, last name, level, track, and enrollment status. Every property of a JavaScript object consists of a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ekey-value\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epair. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ekey\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the variable that describes the kind of information to be stored. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003evalue\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the specific value of the key. So, in our example, the first name property has a key called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand a value of \"Charlie\", the last name property has a key\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e, with a value of \"Bucket\" and so on with the remaining keys\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elevel\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrack\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eenrollmentStatus\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eEach key-value pair is separated by a colon. And pairs are separated from each other with a comma.\u003c/p\u003e\r\n\u003cp\u003eWe could write our object like this and it would also work:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e moringaStudent = {firstName: \u003cspan class=\"hljs-string\"\u003e\"Charlie\"\u003c/span\u003e, lastName: \u003cspan class=\"hljs-string\"\u003e\"Bucket\"\u003c/span\u003e, level: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, track: [\u003cspan class=\"hljs-string\"\u003e\"PHP\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"JavaScript\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"Drupal\"\u003c/span\u003e], enrollmentStatus: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e};\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, the formatting of the object with each property indented two spaces on a separate line is a convention used when writing JavaScript objects to make it easy to see each property. Imagine an object with hundreds of properties written on the same line. It would be a bit of a challenge to sort out the details.\u003c/p\u003e\r\n\u003cp\u003eProperty keys are always a JavaScript string (though quotes are not needed in this context) that starts with a letter. Property values can be any data type: strings, numbers, Booleans, arrays or even functions. When the value of a property is a function, we call it a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emethod\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eHere is an object with one property and one method. This method when called will make my cat \"speak\" by writing \"Meow\" to the console. (Previously, we have used\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003econsole.log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust for debugging, but we can use it for any message we'd like to see in the console.)\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myCat = {\r\n    name: \u003cspan class=\"hljs-string\"\u003e\"Kitty Kanyau\"\u003c/span\u003e,\r\n    speak: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Meow!\"\u003c/span\u003e);\r\n    }\r\n  };\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo keep it simple, you can think of properties as nouns and methods as verbs or actions.\u003c/p\u003e\r\n\u003cp\u003eSo, once we have an object, how do we use it? What do we do with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003espeak\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod?\u003c/p\u003e\r\n\u003cp\u003eTo access properties and methods on objects, we can use either\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edot notation\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebracket notation\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;myCat.name\r\n  \u003cspan class=\"hljs-string\"\u003e\"Kitty Kanyau\"\u003c/span\u003e\r\n  \u0026gt;myCat[\u003cspan class=\"hljs-string\"\u003e'name'\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"Kitty Kanyau\"\u003c/span\u003e\r\n  \u0026gt;myCat.speak()\r\n  Meow!\r\n  \u0026gt;myCat[\u003cspan class=\"hljs-string\"\u003e'speak'\u003c/span\u003e]()\r\n  Meow!\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDot notation is easier to write and read but bracket notation will additionally allow us to use properties with special characters, or select properties using variables. Until we need the additional functionality, we'll stick with dot notation.\u003c/p\u003e\r\n\u003cp\u003eLet's create an empty new dog object. We use the curly braces to signal JavaScript to create a new object.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog = {};\r\n  \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe built-in JavaScript function that creates a new dog object returns the value of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eundefined\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebut if we type\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can see that an empty object has been created for the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable.\u003c/p\u003e\r\n\u003cp\u003eNow, let's give our dog some properties using dot notation. Here our values are a string and a number\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;dog.name = \u003cspan class=\"hljs-string\"\u003e\"Bark Simba\"\u003c/span\u003e\r\n  \u003cspan class=\"hljs-string\"\u003e\"Bark Simba\"\u003c/span\u003e\r\n  \u0026gt;dog.age = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's add an array for a property value:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;dog.colors = [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e]\r\n  [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe value of a property comes with all of the functionality of its type. For example, we are able to use indexing on the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray as we've done with other arrays.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;dog.colors[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e\r\n  \u0026gt;dog.colors[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can use array methods on the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003epush\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich returns the new length of the array:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;dog.colors.push(\u003cspan class=\"hljs-string\"\u003e\"gray\"\u003c/span\u003e);\r\n  \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e\r\n  \u0026gt;dog.colors\r\n  [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"gray\"\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNumber methods on\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eage\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;dog.age = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u0026gt;dog.age + \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can also update any property by reassigning its value:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs bash\"\u003e\u0026gt;dog.name = \u003cspan class=\"hljs-string\"\u003e\"Rex\"\u003c/span\u003e\r\n  \u003cspan class=\"hljs-string\"\u003e\"Rex\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a method to our dog. This will be a property with a function as a value. In this case, we'll give our dog some\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ehowl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunctionality.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs javascript\"\u003e\u0026gt;dog.howl = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{ \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Aaaaaaaaaaaoooooooooooo!\"\u003c/span\u003e) }\r\n\r\n  \u0026gt;dog.howl()\r\n  Aaaaaaaaaaaoooooooooooo!\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith objects, we can use properties within other properties. What if we decided we wanted to calculate our dog's age in human years? Let's add another method to our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;dog.humanYears = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age * \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e}\r\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age * \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ehumanYears\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction has a keyword of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e. When\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis used in an object's method, it always refers to the object on which the method is called. So, when we run\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog.humanYears()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill always refer to the object,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e. (\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan also be used in other places, but it gets tricky depending on its context and we won't cover it in detail here.)\u003c/p\u003e\r\n\u003cp\u003eNow when we run\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog.humanYears()\u003c/code\u003e, we get 35.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Practice\u003c/h3\u003e\r\n\u003cp\u003eIn the JavaScript console, practice creating objects of your own. Feel free to follow along with this lesson or explore some objects of your own. Here is some guided practice to try.\u003c/p\u003e\r\n\u003cp\u003eCreate an object that stores information about a flower including name, color, and height.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eChange the color of your flower using dot notation.\u003c/li\u003e\r\n\u003cli\u003eChange the height of your flower using bracket notation.\u003c/li\u003e\r\n\u003cli\u003eAdd a property that indicates what kind of creatures help the flower with pollination. This includes bees, butterflies and birds.\u003c/li\u003e\r\n\u003cli\u003eAdd one more creature to your list: humans\u003c/li\u003e\r\n\u003cli\u003eWrite a method that allows the flower to grow. After the method is run, the height value should be increased.\u003c/li\u003e\r\n\u003cli\u003eView all of the properties and methods for your flower object.\u003c/li\u003e\r\n\u003cli\u003eExplore viewing, adding and updating more properties and methods on your flower object.\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003eTry using some of the string, number and array methods you have used before on the properties that store these types of data.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch1\u003eLiteral Notation vs Constructors\u003c/h1\u003e\r\n\u003ch2\u003eLiteral Notation\u003c/h2\u003e\r\n\u003cp\u003eIn the previous lesson we created objects using\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eLiteral Notation\u003c/strong\u003e. Let's explore further examples of what literal notation looks like, and how the process of creating objects may be streamlined by using constructors.\u003c/p\u003e\r\n\u003cp\u003eLet's say a dog walker wants to keep track of all dogs they walk.\u003c/p\u003e\r\n\u003cp\u003eWe'll create a dog object using literal notation:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog1 = {\r\n    name: \u003cspan class=\"hljs-string\"\u003e\"Falcor\"\u003c/span\u003e,\r\n    colors: [\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e],\r\n    age: \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\r\n  };\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we'll create another:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog2 = {\r\n    name: \u003cspan class=\"hljs-string\"\u003e\"Nola\"\u003c/span\u003e,\r\n    colors: [\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e],\r\n    age: \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\r\n  };\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd another:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog3 = {\r\n    name: \u003cspan class=\"hljs-string\"\u003e\"Patsy\"\u003c/span\u003e,\r\n    colors: [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e],\r\n    age: \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e,\r\n  };\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou may notice that this is getting a little repetitive. All of these dogs have the same attributes, and therefore this involves typing\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ename\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eover and over again, each time we want to create a new dog. Good news is, there is a much faster way to make\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects! Instead of using literal notation to manually create each individual\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, we can use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eConstructor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a blueprint.\u003c/p\u003e\r\n\u003ch2\u003eConstructors\u003c/h2\u003e\r\n\u003cp\u003eWe will write a constructor to create\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects momentarily, but first, what\u003cspan\u003e \u003c/span\u003e\u003cem\u003eis\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea constructor? The next lesson will introduce constructors and demonstrate how we can use constructors and prototypes to make our lives easier.\u003c/p\u003e\r\n\u003cp\u003eAfter we write a constructor we'll be able to create the same dogs we created in literal notation above, with these three simple lines of code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog1 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Falcor\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog2 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Nola\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e);\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog3 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Patsy\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e);\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see, this is\u003cspan\u003e \u003c/span\u003e\u003cem\u003efar\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eless code, and it's much more scaleable!\u003c/p\u003e","exportId":"monday-literal-notation-slash-literal-notation-vs-constructors"},{"id":144,"title":"Monday: Constructors","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"monday-constructors"},{"id":145,"title":"Monday: Address Book and Places Visited","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"monday-address-book-and-places-visited"},{"id":146,"title":"Tuesday: To-Do List and Movie Tickets","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"tuesday-to-do-list-and-movie-tickets"},{"id":147,"title":"Wednesday: Objects Within Objects","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"wednesday-objects-within-objects"},{"id":148,"title":"Wednesday: Address Book: Business Logic","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"wednesday-address-book-business-logic"},{"id":149,"title":"Wednesday: Address Book: User Interface Logic","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"wednesday-address-book-user-interface-logic"},{"id":150,"title":"Thursday: Bank Account","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"thursday-bank-account"},{"id":268,"title":"Friday: Independent Project - Game of Thrones","type":"Assignment","indent":0,"locked":true,"submissionTypes":"a website url","graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"exportId":"i6738612b529467812ceaeeebf51cb730"},{"id":1129,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":true,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"exportId":"i4380361521db3e98b94c2b244835cb40"},{"id":151,"title":"Weekend: Getting Started with JS, Documentation and Resources, Installation and Set-up","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"weekend-getting-started-with-js-documentation-and-resources-installation-and-set-up"},{"id":152,"title":"Weekend: Review: Object Oriented JS; Build Tools; Object Oriented JS with Node JS","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"weekend-review-object-oriented-js-build-tools-object-oriented-js-with-node-js"}]},{"id":27,"name":"Week 5","status":"locked","unlockDate":null,"prereqs":[26],"requirement":"all","sequential":true,"exportId":"i4b8ed6bca68a811c79cd2dfaa570cc01","items":[{"id":153,"title":"Monday: NPM and Gulp NPM Packages","type":"WikiPage","indent":0,"locked":true,"requirement":"must_view","completed":false,"exportId":"monday-npm-and-gulp-npm-packages"},{"id":154,"title":"Monday: Using Browserify with Gulp","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"monday-using-browserify-with-gulp"},{"id":155,"title":"Monday: Concatenation","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"monday-concatenation"},{"id":156,"title":"Monday: Minification","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"monday-minification"},{"id":157,"title":"Monday: Build and Clean Tasks","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"monday-build-and-clean-tasks"},{"id":158,"title":"Monday: JSHint","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"monday-jshint"},{"id":159,"title":"Tuesday: Objectives","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"tuesday-objectives"},{"id":160,"title":"Tuesday: Practice with Gulp and npm","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"tuesday-practice-with-gulp-and-npm"},{"id":161,"title":"Tuesday: Introducing Bower","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"tuesday-introducing-bower"},{"id":163,"title":"Tuesday: Development Servers","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"tuesday-development-servers"},{"id":165,"title":"Tuesday: APIs and AJAX","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"tuesday-apis-and-ajax"},{"id":166,"title":"Tuesday: Promises and Asynchrony; Managing API Keys","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"tuesday-promises-and-asynchrony-managing-api-keys"},{"id":225,"title":"Tuesday: Refactoring into Multiple Files","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"tuesday-refactoring-into-multiple-files"},{"id":226,"title":"Wednesday: Alarm Clock; Weather App","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"wednesday-alarm-clock-weather-app"},{"id":227,"title":"Wednesday: Sass with Gulp","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"wednesday-sass-with-gulp"},{"id":228,"title":"Thursday: Dissecting a Gulp File","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"thursday-dissecting-a-gulp-file"},{"id":269,"title":"Friday: Independent Project - Github User Lookup","type":"Assignment","indent":0,"locked":true,"submissionTypes":"a website url","graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"exportId":"i5f4cd2e04f1089c1c5060e9761400516"},{"id":1130,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":true,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"exportId":"i4380361521db3e98b94c2b244835cb40"},{"id":230,"title":"Weekend: Angular JS Objective","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"weekend-angular-js-objective"},{"id":231,"title":"Weekend: Modern Javascript MVCs","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"weekend-modern-javascript-mvcs"},{"id":232,"title":"Weekend: Typescript","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"weekend-typescript"},{"id":233,"title":"Weekend: Classes","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"weekend-classes"},{"id":234,"title":"Weekend: Inheritance; Interface","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"weekend-inheritance-interface"},{"id":235,"title":"Weekend: Modules","type":"WikiPage","indent":0,"locked":true,"requirement":null,"completed":false,"exportId":"weekend-modules"}]}],"pages":[{"exportId":"wednesday-introduction-to-jquery-javascript-library","title":"Wednesday: Introduction to JQuery(Javascript Library)","type":"WikiPage","content":"\u003ch2\u003eIntro to JQuery\u003c/h2\u003e\r\n\u003cp\u003eNow that we know a bit of JavaScript, let's learn jQuery, a JavaScript library that makes it easy to make web pages interactive. Let's start by learning how to pop up dialogue boxes when you click certain parts of the page.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eImportant Note: jQuery is updated constantly! Faster than we can reasonably update this lesson! As such, make sure your \u0026lt;script\u0026gt; tag links to the specific version and filename your project is using (e.g.\u003cspan\u003e \u003c/span\u003e\u003cem\u003esrc=\"js/jquery-1.12.4.js\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003cem\u003esrc=\"js/jquery-1.10.2.js\"\u003c/em\u003e). The versions depicted in the \u0026lt;script\u0026gt; tags in this lesson likely won't match the version in your project. Also, there is the shortcut of abbreviating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$()\u003c/code\u003e. We've since updated this lesson's text to use the first, more explicit version after observing confusion from students. Know that these things are the same, and one is simply a shortcut for the other.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eSetup a new project. (Make a project folder, create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejs\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecss\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolders inside of it, and initialize the git repository.)First, we need to add two files into our project's js folder - the jQuery library file and our custom scripts file. Go ahead and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jquery.com/download/\"\u003edownload jQuery\u003c/a\u003e. Choose the uncompressed, development version and save it into your project's js folder. Then, also inside your project's js folder, make an empty file called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escripts.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto store our own JavaScript code.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg class=\"folder\" src=\"http://moringaprep-ft.herokuapp.com/assets/images/folder-structure.png\" alt=\"Folder Structure\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBegin developing our page with this HTML in a file in our project directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML help\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML help\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis is a very special page. If you click somewhere, it will tell you what type of HTML element you clicked on.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLook at this cute walrus!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.9.1.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"xml\"\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIt's important that our own\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escripts.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile goes after jQuery, as it will rely on jQuery functionality that must be loaded first. Make sure your link to the jQuery file is correct, with the version number matching what you downloaded.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOkay, we're finally ready to use jQuery! Here's the code to type in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escripts.js\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\njQuery(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{  \r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n  });\r\n\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a paragraph.\"\u003c/span\u003e);\r\n  });\r\n\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is an image.\"\u003c/span\u003e);\r\n  });\r\n});\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBe sure you're indenting correctly! The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003es are two spaces in, because they're inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efunction()\u003c/code\u003es. If we load up the page and click on different parts, we'll get dialog boxes popping up and telling us what they are. Hooray! Now, let's look more closely at how this works. Here we have a new function: the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction! One thing that the jQuery function does is to select HTML elements on the page, based on the argument you pass in to it. So the code\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery(\"p\")\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselects all of the paragraphs on the page. After we select the elements, we use jQuery's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.click()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to attach an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eevent handler\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto each of the selected elements. The event handler \"listens\" to the elements and responds when they're clicked. Next, we need to tell jQuery what to do when the user clicks that element. We pass in a function as an argument. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efunction()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe're using here is just like the ones we practiced before, but we aren't assigning it to a variable and we're passing it as an argument to another function. This is called an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eanonymous callback function\u003c/strong\u003e. It is a callback function because it is not executed immediately; instead the function is passed in to the jQuery\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to be executed at a future time - in the case of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.click()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, when that event handler is triggered by a user clicking on any of the selected elements. Inside the callback function, we can put whatever code we want, just like in the functions we wrote before. Here we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to pop up a dialog box with some helpful information. We could actually pop up two alerts, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      jQuery(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"I told you, THIS IS A HEADER!\"\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo reiterate, when you pass in a function as an argument to another function, the function being passed in is called a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecallback\u003c/code\u003e. Phew! That's a lot of work just to make a few silly pop-ups. Fortunately, even though this might feel a bit overwhelming at first, most of the jQuery we'll write will look an awful lot like this, so you'll get the hang of it pretty quickly. Let's do a couple things to clean up our code. First, it feels a bit wrong to put our \u0026lt;script\u0026gt; tags in the document body, where the content of the page lives. Let's move them up into the \u0026lt;head\u0026gt;, which is where we put information about the page that isn't displayed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.9.1.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML help\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOh dear. Now, if we reload the page in our browser, nothing happens when we click anything. Let's review our JavaScript to see why this broke it. Remember that I said that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery('p')\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill look for all of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags on the page? The web browser loads your page from the top of your HTML document to the bottom. So when we put our JavaScript in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e, rather than at the end of the document, there are no\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags yet, and so there's nothing for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.click()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto attach to. What we need to do is tell our JavaScript not to run until the document has finished loading. Fortunately, jQuery provides an easy way to do this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    jQuery(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      jQuery(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n      });\r\n\r\n      jQuery(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is a paragraph.\"\u003c/span\u003e);\r\n      });\r\n\r\n      jQuery(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is an image.\"\u003c/span\u003e);\r\n      });\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we tell jQuery to look at the HTML document, and then we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on it. When the document has finished loading, jQuery will run the callback function that is passed into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ready()\u003c/code\u003e. And that function will run our code. Generally, it's a good idea to wrap your JavaScript in a function passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ready()\u003c/code\u003e, so that it's executed after the page loads and you don't run into the problem we just had. Check out our page - it works again. There's a handy shortcut that most JavaScript developers use: instead of writing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eall of the time, we can simply use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n      });\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is a paragraph.\"\u003c/span\u003e);\r\n      });\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e\"This is an image.\"\u003c/span\u003e);\r\n      });\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis isn't really necessary, but it saves us a little bit of repetitive typing, and is how most people write the jQuery function. Here's one final trick I want to show you. If something on your page isn't working right, you can check in Chrome to make sure that you've attached the event listener correctly. Right-click the element you want to check, go to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect Element\u003c/em\u003e, and then, in the upper right corner of the box on the bottom, click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEvent Listeners\u003c/em\u003e. If you've attached the listener correctly, you should see it listed there.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eCode: Cipher\u003c/h2\u003e\r\n\u003cp\u003ePractice writing functions for encoding a sentence from your user, as if you wanted to keep someone from reading it. To complete this exercise, review previous lessons and the JavaScript methods we've covered thus far. You may also need to research new methods.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a JavaScript file and an HTML file in Atom for this project so that you can load your JavaScript in the browser.\u003c/li\u003e\r\n\u003cli\u003eStart by prompting your user to enter a sentence. Then, store the sentence in a variable and print it to the console to be sure that you are doing this step correctly.\u003c/li\u003e\r\n\u003cli\u003eCreate a function that will take the first and last letter of the sentence, capitalize them, and return this as a new string.\u003c/li\u003e\r\n\u003cli\u003eCreate another function that will reverse the order of these two letters and return the result.\u003c/li\u003e\r\n\u003cli\u003eCreate a third function that calls the other two functions you've just created. For example, if I enter the sentence \"I am a sentence\", it should enter your first function (which should output \"IE\"), then call your second function, passing in the output value from the previous. It would return \"EI\" to me.\u003c/li\u003e\r\n\u003cli\u003eAdd code to your third function to concatenate the new two-letter string together with the original phrase. It should add the two-letter string at the end, forming the final result \"I am a sentenceEI.\"\u003c/li\u003e\r\n\u003cli\u003eCreate a fourth function to count the number of letters in the original sentence, divide it by two (rounding down if necessary), and output the letter at this index. Concatenate this letter at the beginning of the original sentence. For example, if \"I am a sentence\" is my original input, and it has 16 characters in it. If I divide this by 2, I get 8. The letter at the 8th position in the sentence is \"e\". So my final result is \"eI am a sentenceEI\".\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eBonus:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eTake the final result and reverse it:\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"IEecnetnes a ma le\"\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eUse jQuery to create two clickable images or pieces of text in your HTML page. When you click on the left one, it should show you the original sentence. If you click the other one, it should hide the original sentence and show the encoded one. Use Bootstrap to organize and style your page.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThis may seem somewhat impractical, but writing multiple functions that have the ability to call each other will prepare you to write code in small, manageable chunks. This makes code easier to debug, and complex problems easier to approach. Rather than attempting to do everything all at once, we break things down into little pieces!\u003c/p\u003e","frontPage":false},{"exportId":"monday-operators","title":"Monday: Operators","type":"WikiPage","content":"\u003ch2\u003eAssignment and Comparison Operators\u003c/h2\u003e\r\n\u003ch2\u003eAssignment Operators\u003c/h2\u003e\r\n\u003cp\u003eWe've already seen how we can use the = operator to set a variable equal to a value.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteNumber = \u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e;\r\n      \u0026gt; favoriteNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eassignment operator\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ebecause it assigns the value on the right of the operator to the variable on the left. In the above example,\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavoriteNumber\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis assigned the value 42. Another\u003cspan\u003e \u003c/span\u003e\u003cem\u003eassignment operator\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator, because it too assigns a new value to the variable on the left based on the value to the right.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u0026gt; myNumber += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\r\n      \u0026gt; myNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere is an assignment operator for each of the mathematical functions: addition, subtraction, multiplication and division.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      +=\r\n      -=\r\n      *=\r\n      \u003cspan class=\"hljs-regexp\"\u003e/=\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen you use any of these assignment operators, the value of the variable on the left side is changed by the math operation and value on the right. Let's do one of each:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt;\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e testNumber = \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u0026gt;testNumber += \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u0026gt;testNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e\r\n      \u0026gt; testNumber -= \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e;\r\n      \u0026gt;testNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e\r\n      \u0026gt;testNumber *= \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\r\n      \u0026gt;testNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e\r\n      \u0026gt;testNumber /= \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e\r\n      \u0026gt;testNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eComparison Operators\u003c/h2\u003e\r\n\u003cp\u003eAssignment operators change the value of the variable on the left of the operator. Comparison operators do not change any values, but return\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e(Boolean) depending on whether the statement evaluates as true or false.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u0026gt; myNumber \u0026lt; \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n      \u0026gt; myNumber \u0026gt; \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n      \u0026gt; myNumber === \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n      \u0026gt; myNumber === \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice the triple equals operator. When we're asking whether something is equal, we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(3 equal signs). When we're setting a variable equal to something, we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(single equal sign). Mixing these up is one of the easiest syntax errors to make. Kindly be careful.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eJavaScript also has an operator with 2 equal signs, but it is almost never used, and you should generally avoid it. It does things like return true for \"2\" == 2, but many of its rules are confusing, inconsistent, and hard to remember. You should have seen that the comparison operators return one of two values:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e. Notice that there are no quotes around these values.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earen't strings - they're called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebooleans\u003c/strong\u003e. They simply represent being true or false. Comparison operators work for strings as well.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e greeting = \u003cspan class=\"hljs-string\"\u003e\"hello world\"\u003c/span\u003e;\r\n      \u0026gt; greeting === \u003cspan class=\"hljs-string\"\u003e\"hello world\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n      \u0026gt; greeting === \u003cspan class=\"hljs-string\"\u003e\"goodbye\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that if you type greeting after this, you will see that the variable\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003egreeting\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003estill contains the string \"hello world\". Comparison operators do not change the value of the variable. Let's look at another example to illustrate that important difference between assignment operators and comparison operators.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u0026gt; myNumber === \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n      \u0026gt; myNumber === \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n      \u0026gt; myNumber = \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u0026gt; myNumber === \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n      \u0026gt; myNumber === \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eCommon comparison operators(Very important!):\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e===\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans \"equal-to\".\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5 === 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"cat\" === \"cat\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluate to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, but\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 === 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"cat\" === \"dog\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluate to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e!==\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans \"not-equal-to\". It is the opposite of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e, so\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"cat\" !== \"dog\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, but\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5 !== 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e, because saying that 5 is not equal to 5 is not true.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans \"greater-than (and not equal to)\".\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026gt; 4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e;\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026gt; 3\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ealso evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e, because 3 is equal to 3 and not greater; and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026gt; 2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the same as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e, except it evaluates to true if the two sides are equal.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026gt;= 3\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to true, and so does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026gt;= 2\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the opposite of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e. It means \"less-than (and not equal to)\".\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026lt; 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026lt; 3\u003c/code\u003eevaluates to false because they are equal.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the opposite of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e. It means \"less-than-or-equal-to\".\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026lt;= 3\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to true because 3 is equal to 3.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026lt;= 1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to false, but\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 \u0026lt;= 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Assignment and Comparison Operators\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Assignment and Comparison Operators lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eassignment operator\u003c/li\u003e\r\n\u003cli\u003eComparison operators, including\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTake time to practice using each of these operators by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a comparison operator and an assignment operator?\u003c/li\u003e\r\n\u003cli\u003eWhat is a boolean? What does it represent?\u003c/li\u003e\r\n\u003cli\u003eHow is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator different than the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eMethods Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice assigning and comparing:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet two variables equal to two different numbers. Use a comparison operator to compare these two variables. Change one of their values by using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-=\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*=\u003c/code\u003e, or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator. Then, compare their values again.\u003c/li\u003e\r\n\u003cli\u003eTry out the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperators.\u003c/li\u003e\r\n\u003cli\u003eTry to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e!==\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-inline-elements","title":"Monday: Inline Elements","type":"WikiPage","content":"\u003ch1\u003eInline Elements\u003c/h1\u003e\r\n\u003cp\u003eAll of the tags we learned about in the previous lessons are block elements, meaning that each element is displayed on a new line. In this lesson, we are going to look at elements that do not appear on their own line but share a line with other elements. These are called inline elements. We will see how to add text emphasis, links, and images to our pages. At the end of this lesson,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-17-my_first_webpage_inline_elements.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eOpen up\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e. We're going to modify it to include an inline element:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003efirst web page\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag indicates that something is important. By default, it will make the text inside it bold (although we'll learn how to customize this soon), like the text below:\u003c/p\u003e\r\n\u003cp\u003eWelcome to my first web page!\u003c/p\u003e\r\n\u003cp\u003eIf we want to emphasize something, we'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, which will italicize it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eem\u003c/span\u003e\u0026gt;\u003c/span\u003eMoringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eem\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how the HTML should render in the browser:\u003c/p\u003e\r\n\u003cp\u003eWritten with a little guidance from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringa School\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eLinks\u003c/h3\u003e\r\n\u003cp\u003eAnd now let's learn about one of the most useful HTML tags. Add the following line to the end of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003eelement:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eCheck out \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://moringaschool.com/\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMoringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e. It's a great place to learn web development skills!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe anchor tag,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e, creates a link to the address at the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehref\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute, or\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehypertext reference\u003c/em\u003e. An attribute is something that further defines what a tag does - in this case, it tells the link where to go.\u003c/p\u003e\r\n\u003cp\u003eHere's how the link should render in the browser:\u003c/p\u003e\r\n\u003cp\u003eCheck out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaschool.com/\"\u003eMoringa School\u003c/a\u003e. It's a great place to learn web development skills!\u003c/p\u003e\r\n\u003cp\u003eWe can also use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag to link from one document to another. For example, if you've been following along with the exercises and have\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein your project directory, you can link to it from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere is a link to my \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"favorite-things.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003efavorite things\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this link, instead of supplying a full path, we've provided a relative path. In other words, if a link doesn't start with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://\u003c/code\u003e, or a few other specific protocols you may come across), your web browser will look in the same folder as the HTML document folder for the file in the link.\u003c/p\u003e\r\n\u003cp\u003eThis brings up a pitfall you should be careful to avoid: if you write a link like this:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u003ca href=\"https://moringaschool.teachable.com/courses/moringa-prep/lectures/www.moringaschool.com\"\u003elink\u003c/a\u003e\u003c/code\u003e, it will look for a file named \"www.moringaschool.com\" in the current directory. If you're linking to another website, remember to start it with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eImages\u003c/h3\u003e\r\n\u003cp\u003eLet's learn about one more inline tag, which will allow us to add images to the page. Find an image of an elephant online, save it in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder with the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelephant.jpg\u003c/code\u003e, and then display it on our page like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"elephant.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A photo of an elephant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag is a little different than the other tags that we've seen: it's self-closing, meaning that it does not need a closing tag - in other words, it doesn't need one of these:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/img\u0026gt;\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc\u003c/code\u003eattribute tells the tag where to find the image, and is required.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute is typically a description of the image, and is optional. However, it's a good idea to include for a few reasons. First, if the image fails to load, the user can hover the mouse over the image's area and read the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003etext for a description of the image. Second, visually impaired users often browse the web with the aid of screen reading software. When you include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute, the screen reading software can read the image's description out loud to the user.\u003c/p\u003e\r\n\u003cp\u003eTypically, websites will store their images in a separate folder from the rest of the HTML. Create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the main project directory and move the image there.\u003c/p\u003e\r\n\u003cp\u003eThe project directory should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-16-hello_world_folder_structure.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eNow let's update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag so that knows where to find the image:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"images/elephant.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A photo of an elephant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eimages/elephant.jpg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells the browser to look in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder in the current directory and then look for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eelephant.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eRemember to commit and push to GitHub after updating!\u003c/p\u003e","frontPage":false},{"exportId":"thursday-calculator-app","title":"Thursday: Calculator App","type":"WikiPage","content":"\u003ch2\u003eCalculator: User Interface\u003c/h2\u003e\r\n\u003cp\u003eNow that we know how to use jQuery to gather input from forms, let's return to our calculator app. We should already have the business logic in place, but it still needs a user interface.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eRemember, just as we discussed previously,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness (or back-end) logic\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ehandles calculations and manipulation of data 'behind the scenes', and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface (or front-end) logic\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ehandles interacting with the user, including gathering user input, updating and displaying information on the page, etc. Furthermore, our project should be organized in a manner that keeps these two types of logic distinctly en\u003cspan\u003e \u003c/span\u003e\u003cem\u003eseparate\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIn this lesson we'll walk through adding user interface (front-end) logic to our existing calculator application, further explore the differences between business and user interface logic, and address how to keep them properly separated. For now we will focus exclusively on our addition functionality. In subsequent lessons we'll expand our user interface to support subtraction, division and multiplication too.\u003c/p\u003e\r\n\u003ch2\u003eLinking Resources\u003c/h2\u003e\r\n\u003cp\u003eClone your existing calculator application, and we'll pick up right where we left off. (If you're concerned your previous calculator project may not contain the correct code, don't worry! All necessary code for a functioning calculator is present in this lesson for review.) If you were able to complete all directions in the\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePractice: Calculator Business Logic\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eexercise, your project should already contain an HTML file. Let's update its \u0026lt;head\u0026gt; section to link to everything our application will need. This includes a link to Bootstrap, our own CSS stylesheet, the jQuery library, and our own custom JavaScript scripts.js file. Here's an example HTML file with these resources correctly linked:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-3.1.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDo note that the file above assumes you've downloaded\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto your project's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecss\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder and the latest version of jQuery into your project's js folder, as we've covered in previous lessons. You should already have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in your js folder containing the JavaScript business logic we wrote in the previous calculator exercise. Additionally, make sure the link to jQuery comes before the link to your own\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Because we're going to write code in\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat will use jQuery, our application must load the jQuery library before it loads\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e. If jQuery isn't loaded beforehand, our application won't know what to do when it reaches the jQuery code in\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebecause it won't even know what jQuery is yet!\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAlways link any scripts files that use jQuery after you link the jQuery library itself.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdding Forms\u003c/h2\u003e\r\n\u003cp\u003eNow that we have our necessary resources in place, let's begin adding to our application's HTML. Instead of asking the user to provide our calculator numbers with dialog boxes, let's allow them to submit numbers through our actual HTML web page. To do this, we'll add an HTML form. Since we're focusing only on creating a user interface for our addition functionality for now, we'll give this form the id\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd\u003c/code\u003e. We'll use this id to target the form later on in our jQuery code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-3.1.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e1st number:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add1\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e2nd number:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add2\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdding User Interface Logic\u003c/h2\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should already contain some code. If you successfully completed the previous calculator exercise, the business logic present in your scripts.js file should look similar to this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e subtract = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 - number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e multiply = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 * number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e divide = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 / number2;\r\n      };\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd the code currently responsible for gathering user input should resemble this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter a number:\"\u003c/span\u003e));\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter another number:\"\u003c/span\u003e));\r\n\r\n      alert(add(number1, number2));\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf your calculator's business logic doesn't resemble the examples above yet, pause here and take some time to review the example code, or revisit the Practice: Calculator Business Logic exercise before moving forward. We'll continue to add to this calculator project in future lessons, so make sure your version is up-to-date.\u003c/p\u003e\r\n\u003ch2\u003eGathering Form Input with jQuery\u003c/h2\u003e\r\n\u003cp\u003eNow, let's change the logic responsible for interacting with the user. Let's add functionality to gather information the user has supplied in our new form when they hit 'submit'. This will be much nicer than relying on those pesky pop-up dialog boxes. We'll begin by moving our existing user interface logic into a function passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e. We only want logic responsible for interacting with the user in this block of code that begins with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e. The business logic code should not be within this function, but the jQuery user interface logic should. This is because it's fine if the business logic functions are loaded into the computer's memory\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe HTML finishes rendering, but we don't want to begin dealing with input or output until the HTML document is fully loaded. Otherwise, we could hit some pretty big errors. Our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should now look like this (although you don't need the comments; those are just for reference here in this lesson):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-comment\"\u003e// Business (or back-end) logic:\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e subtract = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 - number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e multiply = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 * number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e divide = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 / number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-comment\"\u003e// Everything below this line is user interface (or front-end) logic:\u003c/span\u003e\r\n\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter a number:\"\u003c/span\u003e));\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter another number:\"\u003c/span\u003e));\r\n\r\n        alert(add(number1, number2));\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's add code to gather the data users provide in our form. Before we add this directly into\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e, let's experiment in the console. Visit your HTML page, and enter some values in the form. Then, if we open the JavaScript console on that same page we can test out the following jQuery to see what will successfully return the input we've placed in the form. Let's try out the following lines of jQuery:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#add1\"\u003c/span\u003e).val();\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#add2\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're targeting two HTML form elements in each of the two lines listed above. An input with the id of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand an input with the id of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.val()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto fetch the current value of that form.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/testing-jquery-for-calculator-form.png\" alt=\"testing jquery for calculator form\"\u003e\r\n\u003cp\u003eAnd hey, it works! We can see that each of these two lines of jQuery successfully returned the value currently present in the respective form fields. Now that we know these two lines of code gather the information we need, we can include them in our user interface logic:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add1\"\u003c/span\u003e).val());\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add2\"\u003c/span\u003e).val());\r\n        alert(add(number1, number2));\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're replacing the values retrieved via\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edialog boxes with jQuery to instead retrieve these values from our form. We still need\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause, like the information we gathered with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edialog boxes, content gathered from form inputs is also always in string format, and our calculator's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction requires numbers.\u003c/p\u003e\r\n\u003ch2\u003eWaiting for Users to Submit Form\u003c/h2\u003e\r\n\u003cp\u003eNow, if we open our HTML file in the browser, it displays our form, but immediately greets us with an alert reading\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/strong\u003e. Even though we're now waiting for the html document to finish loading!\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/no-submit-listener-resulting-in-NaN-alert.png\" alt=\"no submit listener resulting in NaN\"\u003e\r\n\u003cp\u003eThis is because we're not actually waiting for the user to submit the form, and the alert above is being triggered\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe HTML loads, but before the user has time to fill our form out! Our code is grabbing the empty form inputs and attempting to add them together, resulting in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue we see here. Ideally we want to wait until the user actually submits the form. Let's add a form submit event handler and its accompanying\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe discussed in the Forms lesson:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e subtract = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 - number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e multiply = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 * number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e divide = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 / number2;\r\n      };\r\n\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"form#add\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          event.preventDefault();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add1\"\u003c/span\u003e).val());\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add2\"\u003c/span\u003e).val());\r\n          alert(add(number1, number2));\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eDisplaying Results Directly in HTML\u003c/h2\u003e\r\n\u003cp\u003eIf we refresh our page and try again, everything should work correctly this time:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/calculator-dialog-with-correct-answer.png\" alt=\"calculator dialog with correct answer\"\u003e\r\n\u003cp\u003eWe don't see that alert dialog box with the result until\u003cspan\u003e \u003c/span\u003eafter we provide two numbers and submit the form. Perfect!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHowever, that pop-up\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edialog doesn't make for the nicest user interface. Instead, let's display our calculator's answer directly in our HTML web page and bypass the need for pop-up dialogs all together. This is also part of the user interface logic. Below the form, let's add in an empty div where we may place the result. We'll give it an id of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoutput\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein order to target it using jQuery:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-3.1.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e1st number:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add1\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e2nd number:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add2\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"output\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, instead of popping up that alert dialog, we'll simply replace the contents of our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoutput div\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith the result, using jQuery's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.text()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Let's also assign the result of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to the variable name result, then simply insert result directly onto our page in order to make our code clean and easy to follow:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e subtract = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 - number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e multiply = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 * number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e divide = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 / number2;\r\n      };\r\n\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"form#add\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          event.preventDefault();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add1\"\u003c/span\u003e).val());\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add2\"\u003c/span\u003e).val());\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = add(number1, number2);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#output\"\u003c/span\u003e).text(result);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we should be able to run our application in the browser, insert two numbers into the form fields, and submit the form to see our answer added to the page! Perfect!\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/calculator-result-added-directly-to-page.png\" alt=\"calculator result added directly to page\"\u003e\r\n\u003cp\u003eYou may have noticed that our calculator's user interface only offers the option to add two numbers together; despite our business logic containing functions that offer subtraction, multiplication, and division too. In future lessons we'll add support for users to choose which mathematic operation they'd like to execute on the provided numbers, instead of defaulting to addition.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBut for now, we have a fully functioning addition calculator, complete with a user interface. That's awesome!\u003c/p\u003e\r\n\u003ch2\u003eSeparation of Logic Review\u003c/h2\u003e\r\n\u003cp\u003eLet's take a moment to review the manner we organized our business and user interface logic:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n\r\n      \u003cspan class=\"hljs-comment\"\u003e// Business (or back-end) logic:\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e subtract = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 - number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e multiply = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 * number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e divide = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 / number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-comment\"\u003e// User interface (or front-end) logic:\u003c/span\u003e\r\n\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"form#add\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n         event.preventDefault();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add1\"\u003c/span\u003e).val());\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"#add2\"\u003c/span\u003e).val());\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = add(number1, number2);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#output\"\u003c/span\u003e).text(result);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can see that the business logic and user interface logic are in distinctly separate sections of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. The user interface sections is responsible for gathering user-provided values, parsing them into integers, and calling our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction when the user submits a form. It also displays the result of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction directly on the page for the user to view. Essentially, this section is handling all interactivity with our user. It can call a back-end function (as seen in the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar result = add(number1, number2);\u003c/code\u003e), but the function is not defined here in this block of code. That's the responsibility of the business, or back-end logic.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThe business logic contains functions for all capabilities our calculator will eventually have. It instructs our application what to do when a user opts to add two numbers, versus what to do when a user opts to divide two numbers (a feature we'll add later on). However, notice that it does not contain anything that interacts with the user. All logic here occurs 'behind the scenes'. The user interface logic may call one of the business logic's functions when necessary, but the functions themselves are defined in the back-end or business logic.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThis is ideal separation between front and back-end logic. They're distinctly separate areas of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003efile, are responsible for distinctly different things, and our front-end logic simply calls functions defined in the back-end when necessary.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eNow that we've created a working application with functioning front and back-end logics, revisit the Business and User Interface Logic if necessary.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eBefore we move on make sure to also take a look at the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/\"\u003ejQuery documentation\u003c/a\u003e. It may feel a bit overwhelming at first, since it contains many concepts we haven't yet covered, but that's absolutely okay! Reading documentation is an incredibly important part of programming, so begin to familiarize yourself with it now. Not everything may make sense, but you'll be surprised at the amount you do understand after only a few weeks of programming! In particular, check out the sections on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/effects/\"\u003eEffects\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/events/mouse-events/\"\u003eMouse Events\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/events/form-events/\"\u003eForm Events\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/manipulation/\"\u003eManipulation\u003c/a\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/traversing/\"\u003eTraversing\u003c/a\u003e. Consider trying out some of the methods listed here your next projects! And in the future, when you're trying to figure out how to do something with jQuery, the documentation is always the first place to look.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Calculator User Interface\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue to practice implementing jQuery and developing good organizational habits of separating front and back-end code by adding additional features to our ongoing calculator project, and completing the additional exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do the user interface and business logic 'communicate'?\u003c/li\u003e\r\n\u003cli\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edo? What can occur if we forget to add it?\u003c/li\u003e\r\n\u003cli\u003eIs the following code user interface or business logic? Why? How can you tell?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"form#some-form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e someInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#some-input\"\u003c/span\u003e).val();\r\n        event.preventDefault();\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eCalculator User Interface\u003c/h3\u003e\r\n\u003cp\u003eIn the calculator user interface lesson, we built a site that collected two numbers from a form and then added them together by calling our pre-existing business logic\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. Now it's your turn:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFollow along with the lesson to build out user interface logic for your calculator's addition capacity.\u003c/li\u003e\r\n\u003cli\u003eNow build out the user interface for subtraction, multiplication and division. You already have the business logic done. For now just have four separate forms - one for addition, one for subtraction, one for multiplication and one for division. In your JavaScript code, you'll need a form submit event handler for each form. (Soon, when we learn about branching, we'll adjust this to use just one form and allow the user to choose whether they want to add, subtract, multiply or divide.)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eAdditional jQuery Forms Practice\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd a form to each of the websites you are currently building. For example, on the resort website, the form should be used to submit a query from users wishing to find out more on your resort.\u003c/li\u003e\r\n\u003cli\u003eThank them for their query, and be sure to use their full name. Then reprint their address as a confirmation of receiving their question details. Go as wild as you can with the forms\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eForm Input Types\u003c/h2\u003e\r\n\u003cp\u003eWe've already seen how to gather input from text fields, but there are a variety of other types of form fields as well: Select boxes, radio buttons and checkboxes are perhaps the most prominent. HTML5, finalized in 2014 and now widely supported, also introduced a number of additional input types, including date, color, email, tel, url, number, and many others. See the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\"\u003eMDN\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor a full list of HTML input types. Bootstrap also has more information about them\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#forms-controls\"\u003ehere\u003c/a\u003e. Generally as you come across the need to gather input in a particular way, you'll do some research to figure out how to read input in that way. We'll introduce a few of the most common input field types. But first, a note of warning:\u003c/p\u003e\r\n\u003ch2\u003eAlways\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyour Number Values\u003c/h2\u003e\r\n\u003cp\u003eJust because you mark your HTML input field as\u003cspan\u003e \u003c/span\u003e\u003cem\u003enumber, date\u003c/em\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cem\u003etel\u003c/em\u003e, don't expect it to come in as the JavaScript\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enumber\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003etype. Marking it in your html as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etype=\"number\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust means that the browser will do some preliminary checking to encourage the user to enter a number rather than some text. But when you use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.val()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto read the input, it will still come in as a JavaScript\u003cspan\u003e \u003c/span\u003e\u003cem\u003estring\u003c/em\u003e, not a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enumber\u003c/em\u003e. The HTML input types mostly just help indicate to the user what type of input is expected and/or allow the user to more easily enter a value such as a date or color.\u003c/p\u003e\r\n\u003ch2\u003eSelect Boxes\u003c/h2\u003e\r\n\u003cp\u003eSimple select boxes (where the user can only select one item) are pretty easy to implement.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/select-box-form-input.png\" alt=\"select box form input\"\u003e\r\n\u003cp\u003eThis goes inside the form in your html:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"beverage\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eCoffee\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eTea\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eKombucha\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eWater\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd this is one way to read out the value in your form submit event handler:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e beverage = $(\u003cspan class=\"hljs-string\"\u003e\"#beverage\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you wanted to instead give each option a value different from the text the user sees, you could change your select to look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"beverage\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCoffee\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTea\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"3\"\u003c/span\u003e\u0026gt;\u003c/span\u003eKombucha\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWater\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when you gather the input with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"#beverage\").val()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyou'll get \"1\", \"2\", \"3\" or \"4\". Note that they still come in as strings, so in this case you would probably want to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto convert the inputted data to a number.\u003c/p\u003e\r\n\u003ch2\u003eRadio Buttons\u003c/h2\u003e\r\n\u003cp\u003eRadio buttons allow the user to select one and only one option from a list.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/radio-button-form-input.png\" alt=\"radio button form input\"\u003e\r\n\u003cp\u003eHere's an example of doing radio buttons (this would go inside the form in your html):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"flavor\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"chocolate\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echecked\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          Chocolate\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"flavor\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vanilla\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          Vanilla\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"flavor\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cookiesandcream\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          Cookies \u0026amp; Cream\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd a way to read the value selected:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javasript hljs javascript\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e flavor = $(\u003cspan class=\"hljs-string\"\u003e\"input:radio[name=flavor]:checked\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCheckboxes\u003c/h2\u003e\r\n\u003cp\u003eCheckboxes work similarly to radio buttons, but allow users to select multiple options. Because we want to be able to collect all of a user's selections, we will first need to learn about something called an array, which we will do shortly. In its simplest form, an array is simply a list of multiple items packaged together.\u003c/p\u003e\r\n\u003ch2\u003eDate\u003c/h2\u003e\r\n\u003cp\u003eThe date input type provides an easier interface for users to browse, select, and input dates:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/date-select-form-input.png\" alt=\"date select form input\"\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"born\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDate of birth:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"born\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"date\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cbr\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dob = $(\u003cspan class=\"hljs-string\"\u003e\"#born\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eColor\u003c/h2\u003e\r\n\u003cp\u003eYou may not have seen this one before! The color form input type, when clicked, opens a special panel where users can fine-tune and select specific colors:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/color-select-form-input.png\" alt=\"color select form input\"\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"color\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat is your favorite color?\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"color\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"color\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteColor = $(\u003cspan class=\"hljs-string\"\u003e\"#color\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePractice: Form Input Types\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eExplore using jQuery to gather a variety of form input types by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we gather form input from a select (ie: dropdown) box? How does this differ from a basic input (ie: text) field?\u003c/li\u003e\r\n\u003cli\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e:checked\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erefer to when gathering input from radio buttons?\u003c/li\u003e\r\n\u003cli\u003eIf we\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eincludetype=\"number\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein an HTML form field, do we still need to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen retrieving the value (assuming we need a number)?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eSurvey\u003c/h3\u003e\r\n\u003cp\u003eUse a form to let the user fill out a survey. Ask them to fill in their name, their favorite foods, their favorite music, and any other information you feel like. Include all form input types we've covered so far (except checkboxes; we'll learn more about those next week!)\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs the user interface logic and business logic separated? Is there anything you can spot that is in an incorrect place?\u003c/li\u003e\r\n\u003cli\u003eIs code indented correctly throughout?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive of what they represent? Is it easy to tell what each is referring to?\u003c/li\u003e\r\n\u003cli\u003eIs a form successfully gathering input from users?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-practice-implementing-bootstrap","title":"Thursday: Practice: Implementing Bootstrap","type":"WikiPage","content":"\u003cp\u003eGoal: Begin exploring Bootstrap by creating an HTML page that integrates multiple Bootstrap elements into its styles.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat setup needs to occur in order to use Bootstrap elements in a project?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eResort Website\u003c/h3\u003e\r\n\u003cp\u003eRefactor your Resort website that you did to practice branching, adding Bootstrap to it. Do not forget to make regular commits and push to your pair's remote repo on GitHub.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-debugging-in-javascript","title":"Thursday: Debugging in Javascript","type":"WikiPage","content":"\u003ch2\u003eDebugging in Javascript\u003c/h2\u003e\r\n\u003cp\u003eAs you start writing more and more complex JavaScript, you'll run into increasingly difficult bugs and problems. Here are some approaches to debugging when something goes wrong.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAs an example, let's use our Madlibs page, but with some errors I've introduced for us to debug. Here's the code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eA fantastical adventure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eFill in the blanks to write your story!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"blanks\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAnother name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAn animal\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAn exclamation\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA past tense verb\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA noun\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eShow me the story!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"story\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eA fantastical adventure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eOne day, \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e and \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e were walking through the woods, when suddenly a giant \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e appeared. \"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\", \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e cried. The two of them \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e as quickly possible, and when they were safe, \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e and \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e gave each other a giant \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eand for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003escript.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).sho();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen I load up this page, fill out the form, and click the submit button, nothing happens. Time to debug! The first step of debugging is to look for error messages. If we open up the JavaScript console, sure enough, there's an error:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGET file:///Users/ian/coderamp/debug/js/scipts.js index.html:7\u003c/code\u003e. This error tells us that the browser tried to get the file\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escipts.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebut couldn't find it. And hey, that's our problem - we left the\u003cspan\u003e \u003c/span\u003e\u003cem\u003er\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eout of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escripts.js\u003c/code\u003e. I can't tell you how many times I've seen students spend a long time debugging, just to find out they mis-spelled a filename, which also applies to the whole lot of you :-). Let's fix that typo and reload the page.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eGreat, no more errors in the JavaScript console. But when we submit our form, again, we get nothing. Let's use another tactic: pausing on exceptions. If we open our JavaScript console and switch to the tab on the top that says Sources, there's a button on the top right that looks like an octagon with a pause button. If we click it twice, it turns purple. This will cause JavaScript to stop running whenever there's an error. If we submit our form, sure enough, it pauses on and highlights the offending line. I've mis-typed the method name:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"#story\").sho()\u003c/code\u003e; should be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"#story\").show();\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's fix this and move forward. Now, we don't have any errors, but we still aren't seeing the story. Let's try another tactic: checking to see what code is executed. I do that by adding an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto a couple points in my code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(\u003cspan class=\"hljs-string\"\u003e'Got to beginning of form submit!'\u003c/span\u003e);\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n          alert(\u003cspan class=\"hljs-string\"\u003e'Got to end of form submit!'\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, when I submit my form, I can see if all my code is run, or if the form breaks at some point in the middle. In this case, both dialog boxes open up. So there's nothing actually breaking or not getting run in my code. That should be a clue to step back and review the documentation for the tools I'm using to make sure I haven't left anything out. If I look back at the lesson on forms with jQuery, I can see that I forgot to include\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e. Let's add that:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd now our paragraph with the story finally shows!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBut, there's still a problem: none of what we type actually gets put into the story. Something is going wrong, but it's hard to tell what by just looking at our code. Wouldn't it be nice if we could drop in and run just one line of our code at a time, to see what's going wrong? Chrome has a handy tool called the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger\u003c/code\u003ekeyword to do just that. Here's how to use it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003edebugger\u003c/span\u003e;\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, whenever Chrome JavaScript engine hits the debugger keyword, it will pause execution and let us run whatever code we please. This only happens when the JavaScript console window is open, so let's make sure that it is. Now, when we submit the form, we get the same kind of screen we got when we paused on the exception. Down in the bottom left, there's a little arrow and some lines. Clicking that will open up a JavaScript console below our code. Here, we can run JavaScript as if we were at the exact point where the debugger keyword is.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's copy and paste the next line of code:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar userInput = $(\"input.\" + blank).val();\u003c/code\u003e. Hm, it returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e. I would have expected it to return the first person's name. Let's type blank so that we can see what the value of that variable is. Sure enough, it's person1. Let's just run $(\"input.\" + blank); to make sure that we're selecting the correct element. Oh, this is the problem - we're getting back an empty array. That's not what we wanted. If we look back at our HTML, we can see that our inputs have IDs, not classes, so we should be using #s, not .s in our jQuery selector. Let's try changing that in the debugger console: sure enough,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"input#\" + blank);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the proper element. If we go back to our code, remove the debugger and update our selector, our page now works.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOne last helpful JavaScript debugging tool I'll tell you about is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e. Let's go back to before we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger\u003c/code\u003e, and try\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(userInput);\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we submit our form, the JavaScript console now says\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e6 undefined scripts.js:7\u003c/code\u003e. In other words, undefined was logged 6 times from line 7 of scripts.js. If we fix our code but leave the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein, the proper values get logged to the console.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eGenerally, I use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen there's a little piece of information I need to know that will help me debug, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen I need to explore my code to know what's going wrong.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eJust as a reminder, a useful debugging technique we explored before is changing the background color of an element to make sure you correctly selected what you were trying to, or checking in the Chrome developer tools under\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEvent Listeners\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAnd those are the most important tricks of the trade for debugging.\u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-block-elements","title":"Monday: Practice: Block Elements","type":"WikiPage","content":"\u003ch1\u003ePractice: Block Elements\u003c/h1\u003e\r\n\u003cp\u003eGoal: Practice creating web pages, and start using block elements. Continue to track your process in Git, and pay special attention to indentation and spacing.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003cp\u003eDiscuss the following questions with your partner:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhy is indentation and spacing important?\u003c/li\u003e\r\n\u003cli\u003eWhat is an opening tag? What is a closing tag?\u003c/li\u003e\r\n\u003cli\u003eWhat does it mean when an element is nested within another? Can you give an example of when we would use nested elements?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFirst, follow along with the lesson and add the block elements to the page. Then, open up the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand add some block elements. Some to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtaining the page title\u003c/li\u003e\r\n\u003cli\u003eAdd an unordered list (\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e) of your best friends\u003c/li\u003e\r\n\u003cli\u003eAdd an ordered list (\u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e) ranking your favorite foods\u003c/li\u003e\r\n\u003cli\u003eAdd a paragraph (\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e) about some of your favorite things\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003ePet Website\u003c/h3\u003e\r\n\u003cp\u003eNow it's your turn to start creating!\u003c/p\u003e\r\n\u003cp\u003eMake a homepage for your pet or a blog for a fictional animal. Get creative here! Maybe include information about their favorite toys and their favorite activities.\u003c/p\u003e\r\n\u003cp\u003eDon't forget to make a new project folder, commit regularly, and push to a remote repository on GitHub. Continue to pay close attention to indentation and closing all tags you open.\u003c/p\u003e\r\n\u003cp\u003eOf course, you're more than welcome to make web pages about anything you want - these are just suggestions.\u003c/p\u003e\r\n\u003cp\u003eHave a TM check the indentation and spacing of this project before you move on.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-forms","title":"Thursday: Forms","type":"WikiPage","content":"\u003ch2\u003eForms\u003c/h2\u003e\r\n\u003cp\u003eSo far, the only way we've been able to capture user input is by using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e. Let's learn about forms so that we can build more interesting pages.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHave you ever played Mad Libs? You're prompted to fill out a list of nouns, verbs, adjectives, etc., and then copy them onto another piece of paper that contains a story, missing those crucial words that you are now providing. The idea is to pick bizarre words without knowing what the story is, and then when you fill them in, the results can be hilarious.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's make a page that mimics the Mad Libs format:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eA fantastical adventure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eFill in the blanks to write your story!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"blanks\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAnother name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAn animal\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAn exclamation\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA past tense verb\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA noun\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eShow me the story!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"story\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eA fantastical adventure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eOne day, \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e and \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e were walking through the woods, when suddenly a giant \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e appeared. \"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\", \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e cried. The two of them \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e as quickly possible, and when they were safe, \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e and \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e gave each other a giant \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, I've used some Bootstrap classes to make the form look nice; you can read more about them in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#forms\" target=\"_blank\"\u003eBootstrap Form Documentation\u003c/a\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's make the story hidden to start:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-id\"\u003e#story\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, our JavaScript needs to get the value from the form inputs, insert them into the \u0026lt;span\u0026gt;s where the information should go, and then un-hide the story itself. We know how to insert text into our pages, so let's get that working before we try to get the data from the form:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person1\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person2\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".animal\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".exclamation\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".verb\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".noun\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esubmit()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction attaches an event listener for when a form is submitted. It's different from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction because a form can be submitted by clicking the submit button, of course, but it can also be submitted by pressing Enter while a form field is selected. But when we submit the form, the story briefly flashes and then disappears. What's happening is that, by default, forms try to send the information somewhere, and since we haven't told it where to submit to, the page just refreshes and erases our hard work. If you look in the URL bar, you can see that there's a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e?\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the end of the address now. This is your clue that the form has been submitted to nowhere and the page refreshed. We need to prevent the default action for the form:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person1\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person2\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".animal\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".exclamation\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".verb\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".noun\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"blah blah\"\u003c/span\u003e);\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that we've added a parameter event to the callback function we passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esubmit()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. When the form is submitted, jQuery runs the callback function and passes in something as an argument. We don't know what this \"something\" is - we just know that it somehow represents the event of the form being submitted, and so we give the parameter the name event. And we know that if we call the method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epreventDefault()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon this event thing, it will stop the form from submitting. This is a pretty confusing concept. If you aren't at least 70% clear on the previous paragraph, stop and re-read it, slowly and carefully. If you are at least 70% clear, come back and re-read it a couple more times after you finish this lesson. You might also re-visit the lesson on Writing functions, which includes an explanation of arguments and parameters. Now, we need to actually get the values from the form. If we open up the JavaScript console on the page and run:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; $(\u003cspan class=\"hljs-string\"\u003e\"input#person1\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can see that this jQuery method returns the value from the input as a string. Since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eappend()\u003c/code\u003emethod takes a string as an argument, we can update our code like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person1Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person1\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person2Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person2\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animalInput= $(\u003cspan class=\"hljs-string\"\u003e\"input#animal\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e exclamationInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#exclamation\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e verbInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#verb\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nounInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#noun\"\u003c/span\u003e).val();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person1\"\u003c/span\u003e).append(person1Input);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person2\"\u003c/span\u003e).append(person2Input);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".animal\"\u003c/span\u003e).append(animalInput);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".exclamation\"\u003c/span\u003e).append(exclamationInput);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".verb\"\u003c/span\u003e).append(verbInput);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".noun\"\u003c/span\u003e).append(nounInput);\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow our page works. Hooray!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThere's one last thing to fix, though. If you don't refresh the page and you change the value of one of the inputs, it just adds it after the first value, instead of replacing it. We need to replace the existing text rather than just appending to it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person1Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person1\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person2Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person2\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animalInput= $(\u003cspan class=\"hljs-string\"\u003e\"input#animal\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e exclamationInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#exclamation\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e verbInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#verb\"\u003c/span\u003e).val();\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nounInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#noun\"\u003c/span\u003e).val();\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person1\"\u003c/span\u003e).text(person1Input);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".person2\"\u003c/span\u003e).text(person2Input);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".animal\"\u003c/span\u003e).text(animalInput);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".exclamation\"\u003c/span\u003e).text(exclamationInput);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".verb\"\u003c/span\u003e).text(verbInput);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\".noun\"\u003c/span\u003e).text(nounInput);\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePractice: Forms\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePractice using jQuery elements with HTML forms:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse the HTML structure of a form\u003c/li\u003e\r\n\u003cli\u003eImplement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.submit()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction\u003c/li\u003e\r\n\u003cli\u003eGather the input values from the form\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-dom-manipulation-and-traversal","title":"Wednesday: DOM Manipulation and Traversal","type":"WikiPage","content":"\u003ch2\u003eDOM Manipulation and Traversal\u003c/h2\u003e\r\n\u003cp\u003eIn this lesson, we are going to explore manipulating DOM elements by inserting new text with the jQuery\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Then we'll look at how to traverse the DOM in search of a specific element to remove it. Let's take a look at a visual representation of the DOM that you can use as reference for manipulation and traversal. Each element in the DOM, represented in each box below, can be a parent, child or sibling to other elements. Understanding the position of elements in the DOM will help you insert, locate and remove elements, as needed.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/dom-visual-reference.png\" alt=\"dom visual reference\"\u003e\r\n\u003cp\u003eIn the last lesson, we explored how to simply show and hide elements of the DOM. Now, let's get a little more advanced and insert content into the DOM. Here's some HTML we'll start with:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.10.2.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eTalk to the web page\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eTalk to the web page\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eClick a button to say something to the web page. See what it says back!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-primary\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"hello\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSay \"hello\"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-inverse\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goodbye\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSay \"goodbye\"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-danger\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stop\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSay \"stop copying me!\"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eYou said:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unstyled\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eThe web page said back:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unstyled\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, here's the JavaScript to make the buttons work:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Hello!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#goodbye\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Goodbye!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#stop\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Stop copying me!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will insert the text of the argument it's given into to the top of \u0026lt;ul\u0026gt; as the first child of the \u0026lt;ul\u0026gt;. (As you might guess, there's also a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that would insert at the bottom as the last child of the \u0026lt;ul\u0026gt;; there are also\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.before()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.after()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods that would add the argument before or after the \u0026lt;ul\u0026gt; tag as siblings, rather than within it as children.) This is nice, but not a very fun conversation. Let's have the webpage say something different back to the user:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Hello!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Why hello there!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#goodbye\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Goodbye!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Goodbye, dear user!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#stop\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Stop copying me!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Pardon me. I meant no offense.\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOf course, we need to change the \u0026lt;ul\u0026gt; tags to have IDs for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewebpage\u003c/code\u003e. For the sake of brevity, I won't bother showing the updated HTML here. Go ahead and do that yourself.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eTHE CODE BELOW IS TRICKY. WE JUST WANT YOU TO KNOW THE STUFF ABOVE THIS POINT.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eNow that we know how to add to the DOM, let's learn how to remove from it. Let's make it so that when a user clicks a message, it disappears. First, we need to select each message. When I'm working on some tricky DOM manipulation, I usually start by selecting the element and changing its background color to green, just so that I know I have my selector working properly. You might think this bit of jQuery would work:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// previous code...\u003c/span\u003e\r\n        $(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e).css(\u003cspan class=\"hljs-string\"\u003e'background-color'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'green'\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut it doesn't do what we want. This code is run right after the web page finishes loading\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e($(document).ready())\u003c/code\u003e. And after the page finishes loading, there are no \u0026lt;li\u0026gt; elements. The elements are only added after we click a button. So we need to move our new code to within the callback passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e. Let's start by just adding it to one of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Hello!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Why hello there!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e).css(\u003cspan class=\"hljs-string\"\u003e'background-color'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'green'\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we click Say\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"hello\"\u003c/em\u003e, the messages are\u003cspan\u003e \u003c/span\u003e\u003cem\u003egreen\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's move to the next step - attaching an event handler in place of changing the background color. Again, in the spirit of taking one step at a time, we're not going to actually try to get the click to delete the element - instead, we're going to simply open a dialog box:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;Hello!\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;Why hello there!\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we click Say\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"hello\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand then the message, we get our alert! But there's a problem: if we click the button twice, clicking the last message will open the alert twice. And if we click the button again, the last message will open the alert three times, and the middle message will open it twice. What's happening is that the first time we click the button,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$('li')\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eonly finds a single message in each list, and attaches an event handler. But the next time we click the button, that first message is already on the page, and a second event handler is attached to it. And each time we click the button again, another event handler is attached to every message on the page. What we want is to only attach handlers to the message we most recently inserted. Since we're inserting them at the top of each list, we can select one of the \u0026amp;li;ul\u0026gt;s, look through its child elements (the \u0026lt;li\u0026gt;s), and select the first one of them:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n      });\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, each of the messages only opens a single dialog box when clicked.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eFinally, we should replace our callback with the actual code to delete the message:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).remove();\r\n      });\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).remove();\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eremove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis pretty straightforward, but what is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e?\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a bit of a tricky concept in JavaScript, and I'm not going to give it a full explanation here. For now, you can think of it as referring to whatever was clicked on. We're done with this rather long lesson. Congrats on making it through!\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: DOM Manipulation and Traversal\u003c/h2\u003e\r\n\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the DOM manipulation video, we learned:\r\n\u003cul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe visual representation of the DOM's parent, child and sibling relationships\u003c/li\u003e\r\n\u003cli\u003eHow a child element will be inserted at the top of a \u0026lt;ul\u0026gt; tag with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand at the end with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow to correctly select DOM elements and delete them\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice manipulating the DOM with your partner by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e. Describe an example of using each.\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.before()\u003c/code\u003e? What about\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.after()\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWrite a line of jQuery that selects an element on the DOM with the id of \"salad\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eDOM Manipulation Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice adding some interactivity to your web pages:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFollow along with the video and build a page that \"talks\" to the user.\u003c/li\u003e\r\n\u003cli\u003ePractice selecting certain HTML elements and changing the background color to green.\u003c/li\u003e\r\n\u003cli\u003eNow practice removing those elements, just like in the video.\u003c/li\u003e\r\n\u003cli\u003eMake a \"cat vs dog\" page - if you click a button for the cat to meow, the dog should bark back, and vice versa. Use Bootstrap to style your pages!\u003c/li\u003e\r\n\u003cli\u003eIn addition to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e, you can add content before or after the selected tags (rather than within them) with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.before()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.after()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eMake a page where if a user clicks on an element some sort of image gets inserted into the page before or after that element. Allow the new image to be removed by a click as well.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-jquery-add-or-remove-classes","title":"Wednesday: JQuery: Add or Remove Classes","type":"WikiPage","content":"\u003ch2\u003ejQuery: Add \u0026amp; Remove Classes\u003c/h2\u003e\r\n\u003cp\u003eAdding and removing classes can be a helpful tool. Let's start with this HTML:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.9.1.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eColors\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat's your favorite color?\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eClick a button to choose what color you'd like this page to be:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-success\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"green\"\u003c/span\u003e\u0026gt;\u003c/span\u003eGreen\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-warning\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"yellow\"\u003c/span\u003e\u0026gt;\u003c/span\u003eYellow\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-danger\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"red\"\u003c/span\u003e\u0026gt;\u003c/span\u003eRed\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, some JavaScript:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#green\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"green-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#yellow\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"yellow-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#red\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"red-background\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we click the green button, for example, jQuery will add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreen-background\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the \u0026lt;body\u0026gt;. Now, let's create the CSS classes to actually give the page the background color we want:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-class\"\u003e.green-background\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e green\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-class\"\u003e.yellow-background\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e yellow\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-class\"\u003e.red-background\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e red\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd our page works! But there's a problem. If we click any one button, everything is fine. But if we then click a button of a lighter color, it won't change the background. So if we click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eYellow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand then Red, it works. But if we click then click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGreen\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eafter\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRed\u003c/em\u003e, nothing happens. We need to remove the other classes before applying the new class. Fortunately, that's easy:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#green\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).removeClass();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"green-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#yellow\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).removeClass();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"yellow-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#red\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).removeClass();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"red-background\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd now everything works perfectly!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003ccode\u003eremoveClass()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithout an argument removes all classes from the selected element; if you'd like to just remove a specific class, you can pass it in as an argument (or pass in multiple classes separated by spaces).\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThere is another way to change the CSS of an element with jQuery:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"button#green\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).css(\u003cspan class=\"hljs-string\"\u003e\"background-color\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"green\"\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, this is a bad approach for real code, for two reasons. First, it's mixing our concerns. JavaScript is responsible for how the page behaves; CSS is responsible for how the page looks. Here, we've put something about how the page looks in our JavaScript. This makes it difficult for other programmers who might need to change this page in the future to know where to look for the appropriate code. Second, you lose one of the biggest powers of CSS: the ability to create a class and re-use that style across elements and pages. Here, when we've put a style in our JavaScript, it can't be re-used. So, when you want to change the style of your page, stick to adding and removing classes.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Add \u0026amp; Remove Classes\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue to familiarize yourself with jQuery, and explore these important methods by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat can be accomplished by dynamically adding and removing classes with jQuery? Why would we want to do this?\u003c/li\u003e\r\n\u003cli\u003eWhen should we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.css()\u003c/code\u003e? Why do we use this particular method?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eAdding and removing classes with jQuery (Pair sprint)\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMost people like dark text on a light background, but some people prefer light text on a dark background. Update your dog blog or cat homepage to include a button that lets your users switch to light on dark.\u003c/li\u003e\r\n\u003cli\u003eNow, update this page so that users can switch back to the original color scheme.\u003c/li\u003e\r\n\u003cli\u003eUpdate your boring lecture page so that when somebody clicks on a paragraph, it highlights it and adds a box around the edges.\u003c/li\u003e\r\n\u003cli\u003eGet an instructor to look at your work\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eMore jQuery Basics Practice\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePractice jQuery basics by both creating a website that hides/shows various elements, and contains definitions of common jQuery and JavaScript terms.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a function? How do we create one? How do we call one?\u003c/li\u003e\r\n\u003cli\u003eWhat does it mean when we say \"Business Logic\" when referring to JavaScript?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between JavaScript and jQuery?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eFlashcard Site\u003c/h3\u003e\r\n\u003cp\u003eMake a webpage that is a flashcard site for learning JS \u0026amp; jQuery. On your site, a user should be able to click on a term or concept to see the definition appear. When they click on the definition, the original term should appear again. Here is a list of (some) terms and concepts that you have learned so far:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eJavascript (JS)\u003c/li\u003e\r\n\u003cli\u003eOperators\u003c/li\u003e\r\n\u003cli\u003eVariables\u003c/li\u003e\r\n\u003cli\u003eVariable naming conventions\u003c/li\u003e\r\n\u003cli\u003eFunctions\u003c/li\u003e\r\n\u003cli\u003eStrings\u003c/li\u003e\r\n\u003cli\u003eMethods\u003c/li\u003e\r\n\u003cli\u003eArguments\u003c/li\u003e\r\n\u003cli\u003eParameters\u003c/li\u003e\r\n\u003cli\u003eReturn\u003c/li\u003e\r\n\u003cli\u003eChaining methods\u003c/li\u003e\r\n\u003cli\u003eStrings\u003c/li\u003e\r\n\u003cli\u003eBooleans\u003c/li\u003e\r\n\u003cli\u003eUndefined\u003c/li\u003e\r\n\u003cli\u003eNaN\u003c/li\u003e\r\n\u003cli\u003eEscape\u003c/li\u003e\r\n\u003cli\u003eAlert\u003c/li\u003e\r\n\u003cli\u003eComments\u003c/li\u003e\r\n\u003cli\u003ejQuery\u003c/li\u003e\r\n\u003cli\u003eAttributes\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eRemember to start this project in its own directory, make it a Git repository and make frequent commits as you are building your site. Use Bootstrap as well. Feel free to add to this site later to help you study and remember key ideas of JavaScript and jQuery.\u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-inline-elements","title":"Monday: Practice: Inline Elements","type":"WikiPage","content":"\u003ch1\u003ePractice: Inline Elements\u003c/h1\u003e\r\n\u003cp\u003eGoal: Practice using common inline elements in webpages, and get comfortable with some of the most common ones.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following questions with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a block element and an inline element?\u003c/li\u003e\r\n\u003cli\u003eWhat does it mean to provide a relative path?\u003c/li\u003e\r\n\u003cli\u003eWhat is an HTML attribute? Can you give some examples of ones that we have seen so far?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eAdd some inline elements to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e. Some to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd some images to represent your favorite things\u003c/li\u003e\r\n\u003cli\u003eList your favorite websites and provide links to them\u003c/li\u003e\r\n\u003cli\u003eAdd some\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags at appropriate places\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNext, update your pet's website to include images, links,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estrong\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eem\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIn Moringa School exercises, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFurther Exploration\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esection contains additional activities and exercises to explore if all of the coursework for the day has been completed. Make sure that you and your partner have completed the day's exercises and understand them well with time to spare before proceeding.\u003c/p\u003e\r\n\u003ch4\u003ePet Website\u003c/h4\u003e\r\n\u003cp\u003eAdd additional pages to your pet website. This could include pages for other pets, a play date calendar, a biography or 'about me' page, a blog, a contact page, or anything else you can think up!\u003c/p\u003e\r\n\u003ch4\u003eOther HTML Website\u003c/h4\u003e\r\n\u003cp\u003eCreate an additional HTML website for any topic of your choosing. This could include your friend's local business, your favorite vacation spot, or something dedicated to a hobby you and your partner share. Create multiple pages for the site.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-box-model","title":"Wednesday: Box Model","type":"WikiPage","content":"\u003cp\u003eThere's one more essential piece of HTML and CSS we need to cover: the box model. You can think of every element on a web page as a rectangular box that takes up space, and it's made of four parts: content, padding, border, and margin. This is easiest to see in a diagram:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D3-01-box_model.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eWhen you see height and width used in CSS, those values apply to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtent\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's use some CSS to demonstrate the box model on a web page. Start with some unstyled text contained in a div:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBox model\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"test-box\"\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a border using CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can actually give each side a different value if we'd like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-right\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e4px\u003c/span\u003e solid blue\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-top\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e solid orange\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-bottom\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8px\u003c/span\u003e solid black\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor the sake of space, I'll keep the border uniform for the rest of these examples.\u003c/p\u003e\r\n\u003cp\u003eNow let's increase the space between the text and the border:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFinally, let's make some room between the border and the elements around it (which are, in this simple case, just the edges of the page):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e20px\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's see what happens when we give the div a background color:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e20px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellow\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe color applies to the box\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003cem\u003epadding\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can see the box model for an element in the DevTools\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epanel. For this example, it looks something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D3-02-box_model_inspect.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eYou'll run into the box model a lot when building web pages, so spend some time getting familiar with it.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-jquery-simple-effects","title":"Wednesday: JQuery: Simple Effects","type":"WikiPage","content":"\u003ch1\u003ejQuery\u003c/h1\u003e\r\n \r\n\u003ch2\u003eSimple effects\u003c/h2\u003e\r\n\u003cp\u003ePopping up dialogue boxes isn't very interesting, so let's move on to actually manipulating our web page by showing and hiding elements. Here's the HTML for the page we'll work on:\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003csmall\u003e\u003cem\u003eYou can use any walrus image of your choice\u003c/em\u003e\u003c/small\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-attribute\"\u003ebrikicho\u003c/span\u003e\u0026lt;/\u003cspan class=\"hljs-attribute\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003epeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. Click here to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMake sure that you have downloaded and correctly linked bootstrap and jquery. You will need these for pretty much every project.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eObviously, this doesn't work yet. The first thing we should do is to hide the walrus with a bit of CSS. As usual, we'll make a file called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyles.css\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecss\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder. Then, we'll add a CSS rule to hide the image:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we can use jQuery to show the walrus when you click the paragraph above it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).show();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eVery nice! Here, we've used another jQuery function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.show()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will, obviously, show a hidden element.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBut wouldn't it be nicer if the text of the paragraph changed, so after you clicked it, it said \"What a cute walrus! Click here to hide her again.\" Let's do that now. First, we need to make a couple changes to our HTML:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003epeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. Click here to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! Click here to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we've wrapped our page in two\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es: one for when the walrus is hidden, and one for when she's showing. Let's update our CSS to hide the walrus at first:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-class\"\u003e.walrus-showing\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-showing\"\u003c/span\u003e).show();\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-hidden\"\u003c/span\u003e).hide();\r\n      });\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne of the cool things about jQuery is that it uses the exact same selectors as CSS.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eNow, our code successfully changes the text that is shown above the walrus! Of course, it doesn't switch back and hide her again, so let's update our code once more to take care of that:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-showing\"\u003c/span\u003e).toggle();\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-hidden\"\u003c/span\u003e).toggle();\r\n      });\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNice. Now everything works as planned.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThere's something I don't like about this page, though. Most users expect that when an element is clickable, it's a different color, and that when they hover their mouse over it, the cursor will change to a hand and the text will be underlined. Fortunately, this is easy to implement with CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecursor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e pointer\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-hexcolor\"\u003e#0088cc\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ep\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003ehover {\r\n        text-decoration: underline\u003c/span\u003e\u003c/span\u003e;\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, this works, and it looks much better. But I'm still not satisfied. Here's why. Let's add another paragraph to this page:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e is an ancient game riddled in mystery and deceit. Though it appears to be an innocent children's pastime, you may change your mind when you learn of its treacherous history.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. Click here to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! Click here to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGross! Our styling has run amok and is applied to the intro paragraph, which really shouldn't be clickable. And even worse: if you click it, it toggles the walrus! We really need to limit the scope of our CSS and JavaScript. Let's add some\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags to clean this up:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e is an ancient game riddled in mystery and deceit. Though it appears to be an innocent childrens' pastime, you may change your mind when you learn of its treacherous history.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we can update our CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-class\"\u003e.walrus-showing\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-class\"\u003e.clickable\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecursor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e pointer\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-hexcolor\"\u003e#0088cc\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003e.clickable\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003ehover {\r\n        text-decoration: underline\u003c/span\u003e\u003c/span\u003e;\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd JavaScript:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".clickable\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-showing\"\u003c/span\u003e).toggle();\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-hidden\"\u003c/span\u003e).toggle();\r\n      });\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAh, that's much better now. When you're writing JavaScript (and CSS), it's a good idea to use classes to be specific about the elements you want to select. But keep in mind, if you have more than one thing on the page that can change, you might want to use one class for your CSS and another class for of each of the actions. For example, if your page had one place that let you show and hide a walrus, and another place that let you show and hide an ostrich, you might have both clickable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003es styled with the clickable class, but one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoggle-walrus\u003c/code\u003e, and the other with a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoggle-ostrich\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. Speaking of being specific, it feels wrong to me to use the classes\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-hidden\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-showing\u003c/code\u003e. We're supposed to use classes to identify similar parts of our pages that should look and act the same. For our clickable span, using a class makes perfect sense: we have two places on the page where we use it, and I can imagine that our website could potentially use it in many, many more places. But\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-hidden\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-showing\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereally couldn't be re-used anywhere else on this page - these sections should be unique. Often, this is the case with JavaScript: we want to identify a unique part of the page that should be changed when a unique event happens. For this case, we can use an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e. Check it out:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e is an ancient game riddled in mystery and deceit. Though it appears to be an innocent childrens' pastime, you may change your mind when you learn of its treacherous history.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we change our CSS like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-id\"\u003e#walrus-showing\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd our JavaScript like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".clickable\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#walrus-showing\"\u003c/span\u003e).toggle();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#walrus-hidden\"\u003c/span\u003e).toggle();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSo, what's the difference between a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eID\u003c/code\u003e, except that we use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto select a class and a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#\u003c/code\u003eto select an ID? Nothing, really, except that you can only use an ID once on a page, and you can use a class as many times as you want. But by using an ID, you can be clear that you're referring to one particular thing, rather than potentially referring to several. We could actually go one step further in thinking about how to make our code re-usable. Instead of calling the IDs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-showing\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-hidden\u003c/code\u003e, we could call them\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einitially-hidden\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einitially-showing\u003c/code\u003e. That way, we could re-use this code on other pages that have the same kind of toggling functionality. Now, a quick lecture before you move on to practicing all that you've just learned. When we use JavaScript to manipulate the page, we haven't changed the source code. No matter how much we change the page with JavaScript, if you hit the Refresh button in your browser, it will go back to the initial state. What JavaScript is doing is manipulating the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDocument Object Model\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDOM\u003c/strong\u003e. The DOM is your browser's interpretation of the HTML it reads. If you inspect an element of the page, you're actually seeing the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDOM\u003c/strong\u003e, not the HTML. Try inspecting the page we've been working on, and then click the click here part that changes the page. You can see in the inspector that the DOM changes. Now, try these concepts out on your own pages. Add JavaScript to hide and show various elements. Use id's and classes to keep things neat and tidy. Additionally, here are a few other jQuery methods to try out:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003efadeIn()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003efadeOut()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003efadeToggle()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eslideDown()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eslideUp()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eslideToggle()\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePlay around with them to get practice using these simple jQuery effects!\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-practice-responsive-design-and-media-queries","title":"Wednesday: Practice: Responsive Design and Media Queries","type":"WikiPage","content":"\u003cp\u003eGoal: Practice implementing responsive design into your projects to make them easily readable on multiple screen sizes.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following questions with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is meant by mobile first design?\u003c/li\u003e\r\n\u003cli\u003eWhat is a breakpoint?\u003c/li\u003e\r\n\u003cli\u003eWhy do media queries need to be placed after the traditional CSS rules?\u003c/li\u003e\r\n\u003cli\u003eWhat are some of the benefits to using responsive design?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eGo back to a past project and add some media queries to the styles to make the sites responsive. Feel free to use the viewport ranges from this lesson, or see the ones listed in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://css-tricks.com/snippets/css/media-queries-for-standard-devices/\"\u003eCSS Tricks\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ereference.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-customizing-bootstrap-styles","title":"Thursday: Customizing Bootstrap Styles","type":"WikiPage","content":"\u003cp\u003eNow that we've been working with Bootstrap for the past few lessons, hopefully you can see the benefits for a front-end framework in getting a website up and running quickly. However, you may have noticed that because Bootstrap applies the same styles across the board, all of your webpages look pretty similar. You probably want some way to customize Bootstrap styles to make your site more your own.\u003c/p\u003e\r\n\u003cp\u003eIt's common to start with a framework like Bootstrap and then add your own styles to customize it. You could go into bootstrap.css and add your custom styles there. But it's a huge file with a lot of CSS to dig through, and often styles come from more than one location. Additionally, if Bootstrap came out with a new version, you would have to remember all the changes you made, and add them to the new stylesheet.\u003c/p\u003e\r\n\u003cp\u003eA better option is to leave the original file as it is, and create your own stylesheet to override Bootstrap's styles.\u003c/p\u003e\r\n\u003cp\u003eLet's try it out. Here's an example of how we could override Bootstrap's default styles to make our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003etags red and italicized:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello Bootstrap!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd our custom stylesheet:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe important thing to remember when adding styles is that your custom stylesheet needs to be linked below the Bootstrap stylesheet. Remember from our discussion on cascading, how when multiple styles apply to an element, the one that's the farthest down in the CSS file takes precedence? This applies when we're linking stylesheets in the head as well.\u003c/p\u003e\r\n\u003cp\u003eThis is because stylesheets load in the order they appear on the page. So the Bootstrap stylesheet loads and instructs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelements to look a certain way. Then the second stylesheet loads and also instructs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelements to look a certain way. The rules from the second stylesheet override Bootstrap's rules simply because it loads last.\u003c/p\u003e\r\n\u003cp\u003eWhat do you think will happen if we reverse the order of the stylesheets? Try it out:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello Bootstrap!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis black again, but the font style is still italic. Our custom styles are still loading, but Bootstrap's styles load last, so those are the styles that appear on the page. Bootstrap includes a rule for font color, but not for font style, which is why the font style remains but not the color.\u003c/p\u003e\r\n\u003cp\u003eThis is why we always link our custom stylesheets after Bootstrap!\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-git-branching","title":"Tuesday: Git Branching","type":"WikiPage","content":"\u003cp\u003eSo far we've learned what Git and GitHub are, how to set up a project, track changes, push code to GitHub, clone projects back down from GitHub into a local Git repository, and even publish websites on GitHub Pages.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll dive deeper into Git by exploring something called branching. We were introduced to branching briefly when we learned about GitHub pages. In this lesson, we'll learn more about what it is, how it works, what benefits it offers, and how to create and maintain branches in our own projects.\u003c/p\u003e\r\n\u003cp\u003eTo do this, we'll walk through creating an example project in the next two lessons. Together, we'll create and merge branches in this example project. Then, in an upcoming exercise you'll have the opportunity to work with branches on your own project with a partner.\u003c/p\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003cp\u003eIn Git, branching is the act of creating multiple copies of similar code in the same repository. There are many reasons developers do this. Here are a few of the most common:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMultiple branches allow a team of developers to work together without \"stepping on each others' feet\", so to speak. If a team was all working on the same files at the same time, things could get messy very quickly. Branches allow each developer their own copy of the project to work on. When part of the project is done, the team can merge multiple branches together into a completed final product.\u003c/li\u003e\r\n\u003cli\u003eBranching also allows us to experiment with changes without risking our final product. We can use branching to create a copy of our code separate from our final version to experiment with new features and code. If this new code causes any bugs, we can rest assured knowing our original code is still safe!\u003c/li\u003e\r\n\u003cli\u003eBranching allows us to pursue multiple options at once. Not sure which approach to a problem is preferable? With branching, you can always create multiple copies of your project, try implementing different code in each, and see which result is preferable.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eMaster Branch\u003c/h2\u003e\r\n\u003cp\u003eYou may be surprised to learn that you've been interacting with branches since the beginning of the course! At this point in the curriculum, you've most likely pushed several projects to GitHub already, and published at least one on GitHub Pages. Your current GitHub repositories should look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-07-github_repo_main.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice the dropdown menu on the left side labeled\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBranch\u003c/em\u003e. If we click this dropdown we see it contains one entry:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(if you've published a project to GitHub pages it will also contain a branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-08-github_branch_dropdown.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWhen you learned how to push a project to a remote GitHub repo yesterday, you pushed your local Git repositories to online GitHub repositories using a command like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e gh master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e(The initials\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the command above are just an example; your own initials would be placed here.)\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eportion of this command instructs Git to push the current master copy of your local repository to the remote repository under the nickname\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eal\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eBut what does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emean? Well, projects tracked in Git and GitHub may have multiple branches. The term master specifies that code should be pushed to the master branch on GitHub. Remember, we saw there was a branch named master in the dropdown menu on GitHub.\u003c/p\u003e\r\n\u003cp\u003eA branch is just another copy or version of the project's main code. Both Git and GitHub repositories may have multiple branches at once. There is always at least one branch in a project:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eMaster is the name of the default branch. If you don't create or navigate between branches in your project, you will have one branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, and you will be located in it by default. When you have multiple branches in a project, the master branch is like the \"final draft\".\u003c/p\u003e\r\n\u003cp\u003eBranches that are not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare often referred to as feature branches, because they allow developers to experiment with new features before integrating them into the \"final draft\"\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, you probably published a project to GitHub pages with a command like this in a previous lesson:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin gh-pages\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMuch like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis also a branch name. While master is responsible for containing the final product, gh-pages is responsible for publishing content to GitHub's special GitHub Pages tool.\u003c/p\u003e\r\n\u003ch2\u003eExample Project\u003c/h2\u003e\r\n\u003cp\u003eLet's walk through a basic example of branching together. We'll craft a small website. Then, we'll create multiple branches to experiment with different CSS styles. We'll compare the styles, choose which we like best, and integrate the favored styles into our \"final draft\" (that is, our master branch). You and your partner should begin following along at this time.\u003c/p\u003e\r\n\u003ch3\u003eProject Setup\u003c/h3\u003e\r\n\u003cp\u003eFirst, we'll set up our basic site. Everything in this section should be review from yesterday.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eFile This lesson assumes you have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile located in your home directory, as described in this lesson. As a reminder, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould look something like this:\u003c/p\u003e\r\n\u003cp\u003e.pairs\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-attribute\"\u003epairs\u003c/span\u003e:\r\n  \u003cspan class=\"hljs-attribute\"\u003egh\u003c/span\u003e: Grace Hopper\r\n  \u003cspan class=\"hljs-attribute\"\u003ejb\u003c/span\u003e: James Bond\r\n\u003cspan class=\"hljs-attribute\"\u003eemail\u003c/span\u003e:\r\n  \u003cspan class=\"hljs-attribute\"\u003egh\u003c/span\u003e: gracehopper\u003cspan class=\"hljs-property\"\u003e@gmail\u003c/span\u003e.com\r\n  \u003cspan class=\"hljs-attribute\"\u003ejb\u003c/span\u003e: bond\u003cspan class=\"hljs-property\"\u003e@jamesbond\u003c/span\u003e.com\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou should already have a .pairs file containing your and your partner's information. If you do not, create one at this time.\u003c/p\u003e\r\n\u003ch3\u003eProject Directory\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create a new project directory in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. Remember, whenever we start a new project we must create a new directory for it to reside in. First, we'll navigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e Documents\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll create a new directory called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-test-project\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-keyword\"\u003emkdir\u003c/span\u003e branching-test-project\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can see our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-test-project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory. Next, use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to navigate to the new project folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e branching-test-project\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRemember, if you're ever unsure of your location in the command line you can run the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand.\u003c/p\u003e\r\n\u003ch3\u003eGit Initialization\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll initialize our Git repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit init\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd configure it to use the information in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit pair gh jb\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the command above, replace\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejb\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith your and your partner's initials, as listed in your\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003eHTML File\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create an HTML file for our website's code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch branching-website.html\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll open our project directory in Atom:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003eatom .\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd add the following code to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cp\u003ebranching-website.html\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching Practice Site \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e A website to practice branching with Git. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e This page has been created in order to practice branching with Git and GitHub. By creating branches, we can work on different versions of the same code in the same repository simultaneously!  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eCommitting Changes\u003c/h3\u003e\r\n\u003cp\u003eOnce this code is in place, we can make our first commit. First, we'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto see there are new, uncommitted changes in our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git status\r\nOn branch master\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\nUntracked files:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e include \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e what will be committed)\r\n    branching-website.html\r\nnothing added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e but untracked files present (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e track)\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto add our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to Git so it will track this file's changes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add branching-website.html\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to see that our file is now being tracked, but has not yet been committed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git status\r\nOn branch master\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\nChanges \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be committed:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git rm --cached \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e unstage)\r\n    new file:   branching-website.html\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's save our new HTML to the permanent history of the project by committing it. Since we're working with a partner, we'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit-pair-commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to do this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Add initial HTML file with explanation of branching practice site.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run $ git log we can see a new commit has been added to the history of our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Ada Lovelace \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e Enrique de la Fuente \u0026lt;ada@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2016\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdding Styles with CSS\u003c/h2\u003e\r\n\u003cp\u003eGreat! Now, earlier today you learned about CSS. Before we begin branching, let's create a basic CSS stylesheet for our example project. We'll make a folder called css in our existing project directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-keyword\"\u003emkdir\u003c/span\u003e css\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll create a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewithin our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch css/styles.css\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur project structure should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-09-project_structure_branching.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNext, let's tell our HTML document to use this new file for its CSS. We will include a link to the new CSS file in the\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003etags of our \u003c/span\u003e\u003cem\u003ebranching-website.html file\u003c/em\u003e\u003cspan\u003e, like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003ebranching-website.html\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching Practice Site \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e A website to practice branching with Git. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e This page has been created in order to practice branching with Git and GitHub. By creating branches, we can work on different versions of the same code in the same repository simultaneously!  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add these new changes to our Git repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add .\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd commit them to the history of our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Create stylesheet, link in head of website.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll add a basic CSS rule to our stylesheet:\u003c/p\u003e\r\n\u003cp\u003estyles.css\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we open _branching-website.html_ file in our browser, we should see that the text in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003etags is blue:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-10-test_site_blue_headers.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's add and commit this new CSS rule to our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Add CSS rule to make H1 headers blue.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe will see we now have 3 commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that our basic website is set up, we can use it to learn about branching in the next section. Nice work!\u003c/p\u003e\r\n\u003ch3\u003eViewing a Project's Branches\u003c/h3\u003e\r\n\u003cp\u003eEverything we've done thus far should be review. Now, let's explore the new concept at hand: Branching. First we'll run the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand displays what branches are currently in our project. It also denotes which branch we're currently viewing with an asterisk\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*\u003c/code\u003e. After we execute this command, we should see this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-bullet\"\u003e* \u003c/span\u003emaster\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis informs us that there is only one branch:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. And, we know we're currently located in that branch because there is an asterisk next to it. Remember, master is the default branch. If we do not create any branches, or move between any branches, we will be on master.\u003c/p\u003e\r\n\u003ch3\u003eCreating a New Branch\u003c/h3\u003e\r\n\u003cp\u003eLet's pretend we're unsure how to style our site. We want to test a couple different stylistic approaches, and see which looks best. To do this, we'll create several versions of our project with branches. We'll implement different styles in each branch.\u003c/p\u003e\r\n\u003cp\u003eWe can create a new branch by running the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand and including the name of the new branch after it, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis creates a new branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e. Branch names should be short and meaningful, and describe the reason for the branch. In our case, this branch will contain styles that use the color blue throughout.\u003c/p\u003e\r\n\u003cp\u003e(Note that there are only two exceptions to these naming rules: The master branch will always be named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, and GitHub pages requires branches be named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein order to publish them using the GitHub pages tool.)\u003c/p\u003e\r\n\u003ch3\u003eNavigating Between Branches\u003c/h3\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain, we can see our project now contains two branches:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice the asterisk is still next to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. We created a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch, but we're still located on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. We can switch branches like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git checkout \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git checkout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand navigates to the specified branch. We can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to confirm we've successfully entered the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n* \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n  master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe asterisk is now next to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e, so we know we've successfully navigated to that branch. Now, let's look at our project in Atom. Despite being located in our new branch, everything should look the exact same.\u003c/p\u003e\r\n\u003cp\u003eWhen you create a branch, the new branch is \"branched off\" from the branch you are located in when the command to create a new branch is executed. This means the new branch will contain all code and commits from the branch it was branched off from. In our case, since we were located in master when we created\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtains all code and commits that master contained at the time of the new branch's creation.\u003c/p\u003e\r\n\u003cp\u003eWe can confirm this by running\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e. We should see our new branch contains the same commits we made on master:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eWorking on a Branch\u003c/h3\u003e\r\n\u003cp\u003eWe now have a separate, isolated version of our project to experiment with. We can safely test code in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithout risking the integrity of code in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. We can change, add, and commit whatever we'd like in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand master will remain completely unaffected. Let's add more CSS to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estylesheet:\u003c/p\u003e\r\n\u003cp\u003estyles.css\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: teal\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: gray\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: skyblue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we refresh our page in the browser, we can see these new styles:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-11-test_site_blue_theme.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs always, we'll add these changes to our Git repository and commit them:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Add styles to h1, h2, p, and body to fit blue theme.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eSeparation of Commits Between Branches\u003c/h3\u003e\r\n\u003cp\u003eLet's run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to see a summary of our commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e268363\u003c/span\u003eae7b81a7ee91540d93f82e3f9285c575dd\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e38\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit blue theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch now contains the commits it inherited from master, and the new commit we've just made. Before we continue, let's return to our master branch for a moment using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit checkout\u003c/code\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit checkout master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs always, we can double-check we're on master by running\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand confirming that master has an asterisk next to it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGreat. Now, let's look at the commits on our master branch again:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the new commit we just made on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not present in master! Our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003ebranch's most recent commit reads \"Add styles to h1, h2, p, and body to fit blue theme.\" Whereas master's most recent commit reads \"Add CSS rule to make H1 headers blue.\" And if we refresh our page in the browser again, we can see our blue styles are no longer present:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-12-no_blue_theme.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAlso, if you view the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estylesheet in Atom, you'll notice that the CSS rules we just added are gone! Don't worry; this is entirely normal. Because we switched branches, the version of the project we're seeing in Atom is different. The master branch does not have the same CSS rules as the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003cp\u003eRemember, when we create a branch the new branch will inherit all commits from the branch it is branched off from. That is, the branch we are located in when we create the new branch. However, when we make new commits on our new branch, they remain on that branch. The organization of our current commits between branches look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-13-flow_chart_1.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can see our first three commits on master. When we branched off of master to create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e, it inherited all of master's commits. However, when we made subsequent commits in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethey remained exclusive to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand were not shared with master.\u003c/p\u003e\r\n\u003ch3\u003eWorking with Multiple Branches\u003c/h3\u003e\r\n\u003cp\u003eLet's create another branch with a different set of CSS styles for our site. Remember, you may branch off from any existing branch. The new branch will contain all code and commits from whatever branch you were located within when the new branch was created.\u003c/p\u003e\r\n\u003ch3\u003eCreating a New Branch\u003c/h3\u003e\r\n\u003cp\u003eLet's branch from master again. We'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand confirm we're located in master:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll create another new branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to confirm our new branch has been created:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n  \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eNavigating Between Branches\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll switch to our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit checkout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit checkout red_theme\r\n\u003cspan class=\"hljs-constant\"\u003eSwitched\u003c/span\u003e to branch \u003cspan class=\"hljs-string\"\u003e'red_theme'\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto confirm we've successfully navigated into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n  master\r\n* \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, if we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can see\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas inherited all commits from master, as expected:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eWorking on a Branch\u003c/h3\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in Atom should currently look like this:\u003c/p\u003e\r\n\u003cp\u003estyles.css\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAgain, notice that it does not contain the CSS we just committed in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch. The new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003ebranch was branched off of master. Therefore, it contains all of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e's commits and code. It does not contain the code we committed on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch, only the master branch. Let's add styles to this branch's version of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile now:\u003c/p\u003e\r\n\u003cp\u003estyles.css\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: darkred\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: crimson\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: salmon\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we refresh our page in the browser, we can see our new CSS at work:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-14-test_site_red_theme.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe'll add these changes to our Git repository, and commit:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Add styles to h1, h2, p, and body to fit red theme.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs always, we can run $ git log to see a summary of our commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003ef2d9510cdc76736c7c5cf7e5d56264cd405fcd1\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit red theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ePerfect. We now have the commits that came along with the new branch when we branched from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, and the new commit we've just made on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch. Our organization of commits between branches currently looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-15-flow_chart_2.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNow, let's say we want to improve the styles in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eeven further by changing the site's text. We'll include the following additional CSS rules in\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003estyles.css\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: darkred\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: crimson\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: salmon\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-family\u003c/span\u003e: sans-serif\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we denote that everything located in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags should have sans-serif style font that is center-aligned. Because we're now styling everything in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags we can remove\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etext-align: center;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the existing h1 and h2 CSS rules. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags exist within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, so this rule will automatically apply to them too. We can save our changes and refresh the site to see our new styles:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-16-red_theme_sans_serif.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAgain, we'll add these changes to our Git repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd commit them with a descriptive message:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Make all font sans-serif style.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run $ git log. We can see that in addition to the 3 commits inherited from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003ebranch also has 2 of its own commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e d5bae6406669988e154608ce990e08fed51e9cb3\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e00\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    Make \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e font sans-serif style.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003ef2d9510cdc76736c7c5cf7e5d56264cd405fcd1\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit red theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe commits across all branches of the project currently look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-17-flow_chart_3.png\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eBenefits of Branching\u003c/h2\u003e\r\n\u003cp\u003eAre you beginning to see how branching can be beneficial? It allows us to experiment with code and ensure it works correctly before saving it to our \"final draft\" master branch. When developers integrate new features into projects, they commonly do so in a branch. This allows them to make a copy of the entire project, experiment with new code, and confirm it does what it is supposed to before saving it into the final version.\u003c/p\u003e\r\n\u003cp\u003eThis prevents bugs or issues from affecting the project. If the new code a developer adds or breaks anything, it won't cause issues on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, only on that isolated branch. This allows developers room to iron out any issues with code before integrating it into the final version of the project.\u003c/p\u003e\r\n\u003cp\u003eWhen code is fine-tuned and tested in the branch, and we know it works, we can add it into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. This process is called merging, and we'll explore it in detail in the next lesson as we continue to work with this example project.\u003c/p\u003e","frontPage":false},{"exportId":"monday-moringa-core-interest-form","title":"Monday: Moringa Core Interest Form","type":"WikiPage","content":"\u003ciframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdbkML8aC5PDalWxylCHjBeItKTdpq16VgJ0if9PHHFSgQU1g/viewform?embedded=true\" width=\"760\" height=\"500\" frameborder=\"0\"\u003eLoading...\u003c/iframe\u003e","frontPage":false},{"exportId":"weekend-practice-on-branching-control-flows","title":"Weekend: Practice on Branching (Control Flows)","type":"WikiPage","content":"\u003ch1\u003eObjectives\u003c/h1\u003e\r\n\u003cp\u003eSo far we have managed to learn about the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to use an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eif..else\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement to add logic to our webpages.\u003c/li\u003e\r\n\u003cli\u003eThe difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e===\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e=\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou will use branching\u003cspan\u003e \u003c/span\u003e\u003cem\u003every\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoften moving forward, no matter which programming language(s) you opt to explore in the future. Get the hang of basic branching now by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen do we use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e===\u003c/code\u003e? When do we use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead? What is the difference between the two?\u003c/li\u003e\r\n\u003cli\u003eHow many\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatements can one branch have?\u003c/li\u003e\r\n\u003cli\u003eHow many\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatements may one branch contain?\u003c/li\u003e\r\n\u003cli\u003eUnder what circumstances does an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement execute?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eBranching Practice\u003c/h3\u003e\r\n\u003cp\u003eNow, choose\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etwo\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof the following webpages to make that incorporates branching. If you are able to complete the first two, come back and work on the third option.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA page with information about voting that displays different information to minors. Add in links to websites where young voters can go to learn about the voting process.\u003c/li\u003e\r\n\u003cli\u003eA page with information about turtles, snakes, and insects that asks you which animal you'd like to learn about. When a user chooses which animal to learn about, take them to a page with information (including pictures) about that animal.\u003c/li\u003e\r\n\u003cli\u003eA page for an amusement park that only shows you information on rides that you're tall enough to go on. Then try showing a list of all of the rides in the park and just highlighting (with CSS) the ones that they can ride on. Make sure there are some rides that an adult can't ride on because they are too tall.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-practice-styling-with-classes","title":"Wednesday:Practice: Styling with Classes","type":"WikiPage","content":"\u003cp\u003eGoal: Practice using classes to style large portions of our webpages, and applying classes to multiple HTML tags.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat's the difference between styling using classes and styling elements directly?\u003c/li\u003e\r\n\u003cli\u003eWhat does a class selector in the stylesheet look like?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to create the page about giraffes that uses classes to style various sections of the page.\u003c/p\u003e\r\n\u003ch3\u003eTravel Agency\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHappy Trails Travel Agency\u003c/em\u003e. The page should have text, images, and links. Feature various travel destinations and get creative!\u003c/p\u003e\r\n\u003cp\u003eAdd a class named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etropical\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor tropical destinations. Give the headers the color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#f7325e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the text the color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#7dc410\u003c/code\u003e. Use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efantasy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efont family.\u003c/p\u003e\r\n\u003cp\u003eAdd a class named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epopular\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the most popular destination. Add some styling to distinguish it from the other destination listings. What happens when a popular destination is also a tropical destination? How can you make sure that the styles you want to see on the page are displayed?\u003c/p\u003e\r\n\u003ch3\u003eNews Article\u003c/h3\u003e\r\n\u003cp\u003eCreate a new project folder containing\u003cspan\u003e \u003c/span\u003e\u003cem\u003enews-article.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtaining a fake news article. Use lorem ipsum text with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags to give you paragraphs. Add a few images to illustrate the news, as well as headers to divide the page into sections.\u003c/p\u003e\r\n\u003cp\u003eLet the first section on the page be the introduction. Give it a subheader (\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e), a paragraph or two, and an image. Each element in this section should have the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintroduction\u003c/code\u003e. Create styles for all of the elements in this section to set them apart from the rest of the content on the page. Use the selectors\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2.introduction\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.introduction\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimg.introduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the styles.\u003c/p\u003e\r\n\u003ch3\u003eFavorite Things: More Practice\u003c/h3\u003e\r\n\u003cp\u003eGet some more practice styling with classes by adding classes and class selectors for your CSS rules to your copy of\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-divs-and-spans","title":"Wednesday: Divs and Spans","type":"WikiPage","content":"\u003cp\u003eClasses are useful for applying styles to parts of a page, but sometimes you have a style that you want to apply to an entire part of your page, and adding a class to every tag can be unwieldy. It can also result in an HTML file that is difficult to read. Here's a new page I made about wildcats.\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003ewildcats.html\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eI'm going to teach you all about wildcats. First, the important stuff:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTypes of wildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eThere are many types of wildcats. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some types of wildcats:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eTiger\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJaguar\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003euL\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMore important stuff\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eYou should also know this about wildcats. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eNow, for some less important stuff about wildcats.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats communicate with over a dozen different types of sound.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats make great dance partners\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's a little-known fact that wildcats are actually great dance partners. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSee all of the classes we had to add to make certain elements\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimportant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eunimportant\u003c/code\u003e? We can simplify this using the new tag,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003ewildcats.html\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eI'm going to teach you all about wildcats. First, the important stuff:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eTypes of wildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThere are many types of wildcats. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some types of wildcats:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eTiger\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJaguar\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eOther important stuff\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere is some other really important stuff about wildcats. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eNow, for some less important stuff about wildcats.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats communicate with over a dozen different types of sound.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats make great dance partners\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's a little-known fact that wildcats are actually great dance partners. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen we can style entire sections of the page using the selectors\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.important\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.unimportant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our CSS:\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003estyles.css\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.important\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.unimportant\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag does not actually do anything on its own - it simply defines a section of a page. It acts as a container to separate the content of a page, so that when used with CSS, styles can be applied to an entire section. Remember, good code is code that is easy to change: When we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es and want to change a class name, we only need to change one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of all of the elements inside of it.\u003c/p\u003e\r\n\u003cp\u003eThere is a similar tag for inline elements called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003ewildcats.html\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;Wildcats are versatile creatures that can live \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"important\"\u003c/span\u003e\u0026gt;many different climates\u0026lt;/span\u0026gt;. They can live \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cat-climate\"\u003c/span\u003e\u0026gt;the jungle\u0026lt;/span\u0026gt;, \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cat-climate\"\u003c/span\u003e\u0026gt;the mountains\u0026lt;/span\u0026gt;, and even \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cat-climate\"\u003c/span\u003e\u0026gt;the desert\u0026lt;/span\u0026gt;. Look carefully, and you may find one \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"important\"\u003c/span\u003e\u0026gt;your own backyard\u0026lt;/span\u0026gt;!\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow let's add some style for our new class,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.cat-climate\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003estyles.css\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.important\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.unimportant\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.cat-climate\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellow\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe same class can be used to apply the same styles to both spans and divs, as we did with `.important`.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-practice-cascading-and-inheritance","title":"Wednesday:Practice: Cascading and Inheritance","type":"WikiPage","content":"\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003eDiscuss the following questions with your partner:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhy is it a bad idea to use inline styling?\u003c/li\u003e\r\n\u003cli\u003eWhat is meant by specificity? How is it related to cascading?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCSS Diner\u003c/h3\u003e\r\n\u003cp\u003e\u003ca href=\"http://flukeout.github.io/\"\u003eCSS Diner\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis a game that will let you hone your chops at using CSS selectors. Click the link and proceed through the game with your partner, switching places each level.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eAnimal Shelter\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage for an animal shelter that features the animals available for adoption on the home page. Use divs and floats to give each animal its own profile section. Change the styles of the elements on the page using cascading.\u003c/p\u003e\r\n\u003ch3\u003ePast Projects\u003c/h3\u003e\r\n\u003cp\u003eTake a look at some of your past projects and try to find places where you could rewrite the page using cascading.\u003c/p\u003e","frontPage":false},{"exportId":"monday-looping-in-arrays","title":"Monday: Looping in Arrays","type":"WikiPage","content":"\u003ch2\u003eLooping\u003c/h2\u003e\r\n\u003cp\u003eNow that you've got the basics of arrays under your belt, let's turn to a more advanced concept:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eLooping\u003c/strong\u003e. Here's a very simple loop. Try it out in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'JavaScript'\u003c/span\u003e];\r\n  languages.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(language)\u003c/span\u003e \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e'I love '\u003c/span\u003e + language + \u003cspan class=\"hljs-string\"\u003e'!'\u003c/span\u003e);\r\n  });\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's step through how this works:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate an array of strings.\u003c/li\u003e\r\n\u003cli\u003eCall the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the array.\u003c/li\u003e\r\n\u003cli\u003ePass in a callback function to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e, with a parameter called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguage\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eTake the first element in the array,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e'HTML'\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand assign it to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguage\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003ePop up an alert that says you love HTML.\u003c/li\u003e\r\n\u003cli\u003eRepeat 4 and 5 for the other elements in\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003eAdding Numbers with Loops\u003c/h2\u003e\r\n\u003cp\u003eWe can use loops for more interesting problems, too. For example, we've written code to add two numbers, but what if we wanted to add an arbitrary amount of numbers?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e total = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e summands = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e];\r\n  summands.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(summand)\u003c/span\u003e \u003c/span\u003e{\r\n    total += summand;\r\n  });\r\n  alert(total);  \u003cspan class=\"hljs-comment\"\u003e// 15\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a variable named\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set it to start out at 0. Each time through the loop we will increase its value so that this variable keeps track of the running total. The first time through the loop, the variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecomes 1, the second time it becomes 2, and so on.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/1nf3aey8izv87ej/forEach-loop-summands.png\" alt=\"forEach loop chart\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIt's conventional that an array name is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eplural\u003c/em\u003e, and that the parameter to the function passed into\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehave a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esingular name\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(e.g.,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummands\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the array and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the argument to the function). But for all JavaScript cares, the array\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummands\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the argument to the function could be called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esofa\u003c/code\u003e, but that would make it slightly more difficult for other developers to pick up your code. Remember, we want to write clean, professional, easy-to-understand JavaScript.\u003c/p\u003e\r\n\u003ch2\u003eRefactoring with Loops\u003c/h2\u003e\r\n\u003cp\u003eLet's go back to our Mad Libs JavaScript project. One thing I didn't particularly like about our code was all the duplication:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003escripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person1Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person1\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person2Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person2\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animalInput= $(\u003cspan class=\"hljs-string\"\u003e\"input#animal\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e exclamationInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#exclamation\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e verbInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#verb\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nounInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#noun\"\u003c/span\u003e).val()\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".person1\"\u003c/span\u003e).text(person1Input);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".person2\"\u003c/span\u003e).text(person2Input);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".animal\"\u003c/span\u003e).text(animalInput);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".exclamation\"\u003c/span\u003e).text(exclamationInput);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".verb\"\u003c/span\u003e).text(verbInput);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".noun\"\u003c/span\u003e).text(nounInput);\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n      event.preventDefault();\r\n    });\r\n  });\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's refactor this using arrays and looping:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003escripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n      blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#\"\u003c/span\u003e + blank).val();\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput);\r\n      });\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n      event.preventDefault();\r\n    });\r\n  });\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou might be getting tired of me pointing out the indentation, but I'm going to do it again because it's something worth taking your time to do right: Everything inside the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is indented two spaces, because it's code that's inside the callback function, and everything in a function gets indented so that it's obvious what's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ein\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe function and what's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoutside\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit.\u003c/p\u003e\r\n\u003ch2\u003eThe Importance of DRY Code (\"Don't Repeat Yourself!\")\u003c/h2\u003e\r\n\u003cp\u003eI'm going to end this lesson with a short lecture. One of the best definitions of \"good code\" I've heard states that the one thing that's certain about software, is that it changes. There will always be new features to add and bugs to fix. Often, the people working on the software will change, and even if they don't, the original developers will need to modify code they wrote months or years ago, code that they sometimes can't even remember writing.\u003c/p\u003e\r\n\u003cp\u003eOne of things I really like about the new, looping version of the Madlibs JavaScript is that there's no repetition in the code, which makes it easy to change. Before, we did the same thing 6 times: get the value of the input, then put in in the appropriate blank space. If we want to change something - like, I don't know, capitalize all the text before inserting it onto the page (obviously this is contrived, but hopefully you get the idea) - then we have to change all 6 places. In this small example, the only room for error is maybe forgetting to update one line, although that would be embarrassing. But as your programs get more complex, you'll see that, if you have repetitive code, it becomes very difficult to maintain, and you will regularly update one place and fail to update another - or worse yet, update them in different ways that cause incompatibilities down the road.\u003c/p\u003e\r\n\u003cp\u003eThere's a principle in software development called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDon't Repeat Yourself\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDRY\u003c/strong\u003e. DRY code is easy to change, because you only have to make any change in one place. One way we DRY up our code is by taking repetitive bits of code and extracting them into a function. Another way is by taking something we do several times and by turning it into a loop. Whenever you finish writing some code, you should always look back to see if there is any way you can DRY it up.\u003c/p\u003e\r\n\u003cp\u003eAlso, remember how I harped on about using descriptive variable names? \"Easy to change\" doesn't just mean clean code - if you can't figure out what a variable is for or what a function does based on its name, then it's harder to change it down the road, when you might not remember exactly how your code works (or when somebody else is trying to change your code).\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Looping\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Looping section, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to use a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop\u003c/li\u003e\r\n\u003cli\u003eNaming conventions for arrays and the parameter in a loop\u003c/li\u003e\r\n\u003cli\u003eThe importance of DRY code\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAs you saw, loops can be really powerful! They're an incredibly important programming concept, and we'll be using them from here on out. Begin becoming comfortable utilizing loops by completing the exercises listed below. We'll begin with several exercises in the console, and move on to creating and updating small projects.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow can loops contribute toward DRY code? Why is DRY code important?\u003c/li\u003e\r\n\u003cli\u003eIf we used\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto loop through an array called \"kittens\", what should we call the parameter in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction? Why?\u003c/li\u003e\r\n\u003cli\u003eWhat does the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator do?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eLooping Practice in the Console\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake an array of your friends' names. Loop through it and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ea greeting to each.\u003c/li\u003e\r\n\u003cli\u003eWrite a loop to multiply an arbitrary amount of numbers. This should look similar to the code to sum numbers from the lesson.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eRefactoring Existing Projects with Loops\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eRefactor your Mad Libs page we created in this exercise to use a loop.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringa-prep.herokuapp.com/#08.html\" target=\"_blank\"\u003eIntroduction to jQuery\u003c/a\u003e\u003cspan\u003e \u003c/span\u003elesson we created a web page that triggered alerts containing information about a particular HTML tag whenever a user clicked on an HTML element. Try to refactor this page's multiple, similar event listeners using a loop.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eWebpages with Looping\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake a web page that lists out your favorite ice cream flavors. Rather than writing the flavors in the HTML, use a JavaScript loop to insert the flavors into the page from an array.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eRemember\u003c/strong\u003e: When choosing a name for the variables in your loop, remember that it is good practice to use a plural for the array and the singular form of that word for the loop.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\r\n  \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'JavaScript'\u003c/span\u003e];\r\n  \u0026gt; languages.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(language)\u003c/span\u003e \u003c/span\u003e{\r\n      alert(\u003cspan class=\"hljs-string\"\u003e'I love '\u003c/span\u003e + language + \u003cspan class=\"hljs-string\"\u003e'!'\u003c/span\u003e);\r\n    });\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe array is named\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the parameter is the singular\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguage\u003c/code\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"monday-web-page","title":"Monday: Web Page","type":"WikiPage","content":"\u003ch1\u003eCreating a Web Page\u003c/h1\u003e\r\n\u003cp\u003eNow that we have an understanding of what HTML is, let's write some! In this lesson, we will create our first webpage. It will look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-09-my_first_webpage.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's create a project directory and initialize a Git repository for a new project called\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eAs a review, here are the steps:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eOpen Terminal.\u003c/li\u003e\r\n\u003cli\u003eMake a project directory called my-first-website in your Desktop directory:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mkdir my-first-website\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate into the project directory you just created:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd my-first-website\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eIf you type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein Terminal now, you should see that you are in your project directory at /Users/Guest/Desktop/my-first-webpage.\u003c/li\u003e\r\n\u003cli\u003eWithin your project directory, initialize your Git repository:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git init\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eAdd the authors of the project (\u003ccode\u003e$ git pair ___ ___\u003c/code\u003e)\r\n\u003cul\u003e\r\n\u003cli\u003eSkip this if you are working solo\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eCreate an empty file:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch my-first-webpage.html\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eOpen the project directory in Atom:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom .\u003c/code\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eatom .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eopens the entire directory you are currently in because the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erefers to current directory. If you only want to open the single file, you could instead type:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom my-first-webpage.html\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA note here about the name of the file. When you open a file on your computer, it knows what program to use to open the program by checking its\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eextension\u003c/strong\u003e. This is the group of letters that come after the name of the file, and indicates its file format. So, for example,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eexample.mp3\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill open in a program that plays music, because the \".mp3\" extension indicates an audio file.\u003c/p\u003e\r\n\u003cp\u003eWe gave our HTML document the file extension \".html\", which tells our computer that it is an HTML file, and that it shouldopen the file in a web browser.\u003c/p\u003e\r\n\u003cp\u003eThe name of the file can consist of any combination of letters, numbers or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(underscore) and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(hyphen) characters. It is a good practice to start the file name with a letter and use lowercase letters to avoid capitalization errors.\u003c/p\u003e\r\n\u003cp\u003eNow, with\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eopen in Atom, let's start by typing the following code (no more copying and pasting!):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs apache\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese two tags are the standard start and end tags on any page. They need to be there. HTML elements can contain text and other HTML elements inside them, and these two tags will contain the rest of the HTML that makes up the page.\u003c/p\u003e\r\n\u003cp\u003eNow let's add the rest of the page structure. Modify the page so that it looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe've created our first web page - let's commit it!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add initial page structure\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSo, what's going on here?\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag at the top tells the browser that this document contains HTML, and specifically that it contains the newest version of HTML, HTML5. (An example of a doctype for an older version of HTML is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u0026gt;\u003c/code\u003e) Without the the doctype declaration, your HTML code will likely still work, as HTML5 is the current standard. In the future, however, a new standard will override HTML5. Future browsers may assume you're using a different, newer standard, in which case your document will be interpreted incorrectly. To make sure your document is forever interpreted correctly, always include at the very beginning of your HTML documents.\u003c/p\u003e\r\n\u003cp\u003eHTML pages are made up of two distinct parts - the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehead\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epart, and the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebody\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epart. The head contains things that won't appear on your page. Many of the elements that go in the head are advanced stuff to tell search engines and browsers about the page, so the only one you need to know for now is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e. We will see more in upcoming lessons.\u003c/p\u003e\r\n\u003cp\u003eThe text inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etitle\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement is the text that appears at the very top of your browser window when you view the page. We decided to call this page \"My first webpage!\", but you can type whatever you want.\u003c/p\u003e\r\n\u003cp\u003eThe body section is the main part of your page. Everything between those two tags will be visible on your page. Let's type something there now.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  Hello, world!\r\n  Welcome to my first webpage!\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThat's it - we've written our first web page!\u003c/p\u003e\r\n\u003cp\u003eNow let's see what that looks like in a web browser, such as Google Chrome or Internet Explorer. You may have seen some of these before:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-10-web_browser_logos.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eRemember in the last lesson how we said that when you put a web site's address into your browser, you are just requesting to see a particular file? As it turns out, we can use web browsers to display files on our computers as well.\u003c/p\u003e\r\n\u003cp\u003eOpen the file location in your file explorer and double-click the icon for\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e. The page should open in a web browser and look like the image at the beginning of this lesson:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-09-my_first_webpage.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eOkay, that's not very fancy - it's just some text in the corner of the screen. Over the next lessons, we will learn how to use HTML (and more) to format our pages.\u003c/p\u003e\r\n \r\n \r\n\u003ch1\u003ePractice: Creating a Web Page\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: familiarize yourself with the basic building blocks of a webpage by creating a basic website.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWork through the above lesson with your partner to create your first web page. Remember to document your process in Git!\u003c/li\u003e\r\n\u003cli\u003eCreate a second web page in the same project folder, and this one will be all about your favorite things. Name it\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e. We can't do too much with the page right now, but go through the process of creating the page and give it an appropriate title all the same. You will be practicing your skills and adding to this page in upcoming lessons.The folder structure of\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould look like this:\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-18-hello_world_folder_structure_initial.png\"\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n \r\n \r\n\u003ch1\u003eBlock Elements\u003c/h1\u003e\r\n\u003cp\u003eWe're going to start adding content to our page by working with\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eblock elements\u003c/strong\u003e. These are HTML elements that start on their own line when displayed, like a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eblock\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon the page. In this lesson, we will learn how to add paragraphs, headers, and lists to our pages.\u003c/p\u003e\r\n\u003cp\u003eOpen up\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand modify it so that it looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe formatting instructions around the text are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etags\u003c/strong\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ep tag\u003c/strong\u003e. It means that everything that follows is a paragraph, until\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis reached. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eclosing tag\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eend tag\u003c/strong\u003eand indicates the end of the paragraph. Closing tags always match the header but have a backslash in front.\u003c/p\u003e\r\n\u003cp\u003eWhen we viewed this page without the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags in the last lesson, all of the text appeared on the same line, despite being written on different lines. When we load up the page now, the lines appear as separate paragraphs.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-12-webpage_screenshot_paragraphs.png\"\u003e\u003cbr\u003e\u003cbr\u003e\r\n\u003cp\u003eWe've just made a change to our code. Time to commit!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n  \u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add paragraph block elements to the page\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's try some more tags:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy First Webpage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from Moringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've added a main\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eheader\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(\u003ccode\u003e\u0026lt;h1\u0026gt;My First Webpage\u0026lt;/h1\u0026gt;\u003c/code\u003e) and a subheader (\u003ccode\u003e\u0026lt;h2\u0026gt;Written with a little guidance from Moringa School\u0026lt;/h2\u0026gt;\u003c/code\u003e). Here's how it looks in the browser:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-13-webpage_screenshot_headers.png\"\u003e\u003cbr\u003e\u003cbr\u003e\r\n\u003cp\u003eThere are six different levels of headers you can add using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethrough\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e. Like the paragraph tags, we have an opening tag that indicates where the header begins (\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e) and a closing tag that indicates where it ends (\u003ccode\u003e\u0026lt;/h1\u0026gt;\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eHTML ignores empty spaces and blank lines, which is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewhitespace\u003c/strong\u003e. That's why the extra line we might add between our headers and paragraphs doesn't do anything when the HTML is displayed. We could take it out, or make it three spaces, and it would look exactly the same in the browser.\u003c/p\u003e\r\n\u003cp\u003eLet's commit again!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n  \u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add header block elements\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a little bit more:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy First Webpage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from Moringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some things I'm going to learn about coding:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eCSS\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJavaScript\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eAnd a lot more!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we've added an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eunordered list\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e) with four\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elist items\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e). Here's the page with the unordered list:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-14-webpage_screenshot_unordered_list.png\"\u003e\u003cbr\u003e\u003cbr\u003e\r\n\u003cp\u003eIf we wanted to make an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eordered list\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat uses numbers and letters instead of bullets, we would use an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eol\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eCSS\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJavaScript\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eAnd beyond!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eol\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's the list now:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-15-webpage_screenshot_ordered_list.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice in the code how I've indented the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003es within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003es. This makes it much easier to read which tags are nested, and makes it easy to see where the closing tag goes when it's not on the same line. It's a good idea to write your closing tag just after you write your opening tag, and then go back and fill in whatever comes in the middle. This way, you won't forget to close a tag after opening it.\u003c/p\u003e\r\n\u003cp\u003eLet's commit again!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add list elements\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe're done with this page for the moment. Now is a good time to push the project to GitHub. As a reminder, here are the steps (which should be done by both you and your pair, since you each want a copy of the repository on your GitHub):\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erepository on GitHub\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git remote add [remote nickname] [remote url]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing [remote nickname] with your initials or another good nickname and [remote url] with the URL to the GitHub repository you just created)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git push [remote nickname] master\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing [remote nickname] with the same nickname you used when you added the remote link)\u003c/li\u003e\r\n\u003cli\u003eCheck on GitHub that your code uploaded successfully\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch1\u003ePractice: Block Elements\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice creating web pages, and start using block elements. Continue to track your process in Git, and pay special attention to indentation and spacing.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFirst, follow along with the lesson and add the block elements to the page. Then, open up the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand add some block elements. Some to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtaining the page title\u003c/li\u003e\r\n\u003cli\u003eAdd an unordered list (\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e) of your best friends\u003c/li\u003e\r\n\u003cli\u003eAdd an ordered list (\u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e) ranking your favorite foods\u003c/li\u003e\r\n\u003cli\u003eAdd a paragraph (\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e) about some of your favorite things\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003ePet Website\u003c/h3\u003e\r\n\u003cp\u003eNow it's your turn to start creating!\u003c/p\u003e\r\n\u003cp\u003eMake a homepage for your pet or a blog for a fictional animal. Get creative here! Maybe include information about their favorite toys and their favorite activities.\u003c/p\u003e\r\n\u003cp\u003eDon't forget to make a new project folder, commit regularly, and push to a remote repository on GitHub. Continue to pay close attention to indentation and closing all tags you open.\u003c/p\u003e\r\n\u003cp\u003eOf course, you're more than welcome to make web pages about anything you want - these are just suggestions.\u003c/p\u003e\r\n\u003cp\u003eHave a TM check the indentation and spacing of this project before you move on.\u003c/p\u003e\r\n \r\n \r\n\u003ch1\u003eInline Elements\u003c/h1\u003e\r\n\u003cp\u003eAll of the tags we learned about in the previous lessons are block elements, meaning that each element is displayed on a new line. In this lesson, we are going to look at elements that do not appear on their own line but share a line with other elements. These are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einline elements\u003c/strong\u003e. We will see how to add text emphasis, links, and images to our pages. At the end of this lesson,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill look like this:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-17-my_first_webpage_inline_elements.png\"\u003e\u003cbr\u003e\u003cbr\u003e\r\n\u003cp\u003eOpen up\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e. We're going to modify it to include an inline element:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003efirst web page\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag indicates that something is important. By default, it will make the text inside it bold (although we'll learn how to customize this soon), like the text below:\u003c/p\u003e\r\n\u003cp\u003eWelcome to my\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efirst web page\u003c/strong\u003e!\u003c/p\u003e\r\n\u003cp\u003eIf we want to emphasize something, we'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, which will italicize it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eem\u003c/span\u003e\u0026gt;\u003c/span\u003eMoringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eem\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how the HTML should render in the browser:\u003c/p\u003e\r\n\u003cp\u003eWritten with a little guidance from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringa School\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eLinks\u003c/h3\u003e\r\n\u003cp\u003eAnd now let's learn about one of the most useful HTML tags. Add the following line to the end of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eCheck out \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://moringaschool.com/\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMoringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e. It's a great place to learn web development skills!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eanchor tag\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e, creates a link to the address at the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehref\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute, or\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehypertext reference\u003c/em\u003e. An attribute is something that further defines what a tag does - in this case, it tells the link where to go.\u003c/p\u003e\r\n\u003cp\u003eHere's how the link should render in the browser:\u003c/p\u003e\r\n\u003cp\u003eCheck out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaschool.com/\"\u003eMoringa School\u003c/a\u003e. It's a great place to learn web development skills!\u003c/p\u003e\r\n\u003cp\u003eWe can also use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag to link from one document to another. For example, if you've been following along with the exercises and have\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein your project directory, you can link to it from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere is a link to my \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"favorite-things.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003efavorite things\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this link, instead of supplying a full path, we've provided a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003erelative path\u003c/strong\u003e. In other words, if a link doesn't start with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://\u003c/code\u003e, or a few other specific protocols you may come across), your web browser will look in the same folder as the HTML document folder for the file in the link.\u003c/p\u003e\r\n\u003cp\u003eThis brings up a pitfall you should be careful to avoid: if you write a link like this:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a href=\"www.moringaschool.com\"\u0026gt;link\u0026lt;/a\u0026gt;\u003c/code\u003e, it will look for a file named \"www.moringaschool.com\" in the current directory. If you're linking to another website, remember to start it with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eImages\u003c/h3\u003e\r\n\u003cp\u003eLet's learn about one more inline tag, which will allow us to add images to the page. Find an image of an elephant online, save it in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder with the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelephant.jpg\u003c/code\u003e, and then display it on our page like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"elephant.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A photo of an elephant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag is a little different than the other tags that we've seen: it's\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eself-closing\u003c/strong\u003e, meaning that it does not need a closing tag - in other words, it doesn't need one of these:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/img\u0026gt;\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc\u003c/code\u003eattribute tells the tag where to find the image, and is required.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute is typically a description of the image, and is optional. However, it's a good idea to include for a few reasons. First, if the image fails to load, the user can hover the mouse over the image's area and read the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etext for a description of the image. Second, visually impaired users often browse the web with the aid of screen reading software. When you include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute, the screen reading software can read the image's description out loud to the user.\u003c/p\u003e\r\n\u003cp\u003eTypically, websites will store their images in a separate folder from the rest of the HTML. Create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the main project directory and move the image there.\u003c/p\u003e\r\n\u003cp\u003eThe project directory should look like this:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-16-hello_world_folder_structure.png\"\u003e\u003cbr\u003e\u003cbr\u003e\r\n\u003cp\u003eNow let's update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag so that knows where to find the image:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"images/elephant.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A photo of an elephant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eimages/elephant.jpg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells the browser to look in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder in the current directory and then look for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eelephant.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eRemember to commit and push to GitHub after updating!\u003c/p\u003e\r\n \r\n \r\n\u003ch1\u003ePractice: Inline Elements\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice using common inline elements in webpages, and get comfortable with some of the most common ones.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003e\u003c/h2\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eAdd some inline elements to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e. Some to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd some images to represent your favorite things\u003c/li\u003e\r\n\u003cli\u003eList your favorite websites and provide links to them\u003c/li\u003e\r\n\u003cli\u003eAdd some\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags at appropriate places\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNext, update your pet's website to include images, links,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estrong\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eem\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIn Moringa School exercises, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFurther Exploration\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esection contains additional activities and exercises to explore if all of the coursework for the day has been completed. Make sure that you and your partner have completed the day's exercises and understand them well with time to spare before proceeding.\u003c/p\u003e\r\n\u003ch4\u003ePet Website\u003c/h4\u003e\r\n\u003cp\u003eAdd additional pages to your pet website. This could include pages for other pets, a play date calendar, a biography or 'about me' page, a blog, a contact page, or anything else you can think up!\u003c/p\u003e\r\n\u003ch4\u003eOther HTML Website\u003c/h4\u003e\r\n\u003cp\u003eCreate an additional HTML website for any topic of your choosing. This could include your friend's local business, your favorite vacation spot, or something dedicated to a hobby you and your partner share. Create multiple pages for the site.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-practice-bootstrap-basics","title":"Thursday: Practice: Bootstrap Basics","type":"WikiPage","content":"\u003cp\u003eGoal: Start exploring Bootstrap by creating a web page that uses Bootstrap components.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eHow do we add Bootstrap to a project?\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a CDN?\u003c/li\u003e\r\n\u003cli\u003eWhat are some benefits of using Bootstrap?\u003c/li\u003e\r\n\u003cli\u003eHow do we add Bootstrap features to our own projects?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eYour friend has a catering company and needs a website to get some more business. Design a website using Bootstrap. Pay attention to how the page is responsive right out of the box.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse a container to house the page content.\u003c/li\u003e\r\n\u003cli\u003eInclude a jumbotron to display the company's name and slogan.\u003c/li\u003e\r\n\u003cli\u003eUse panels to hold the meals offered by the company.\u003c/li\u003e\r\n\u003cli\u003eUse helper classes to highlight and emphasize various parts of the page.\u003c/li\u003e\r\n\u003cli\u003eBonus: see the notes on Bootstrap\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#type-blockquotes\" target=\"_blank\"\u003eblockquotes\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand see if you can figure out how to add some to the page to display customer testimonials.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-bootstrap-grid-system","title":"Thursday: Bootstrap Grid System","type":"WikiPage","content":"\u003cp\u003eLining up a page exactly the way we want using only HTML and CSS can prove to be a challenging task. And then, making the layout responsive adds another level of complexity. For this reason, one of the most commonly-used features of Bootstrap is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#grid\" target=\"_blank\"\u003eGrid System\u003c/a\u003e. The grid system allows us to set up our page layout with an invisible grid to space and line up page content. As with other Bootstrap elements, the grid system is also responsive!\u003c/p\u003e\r\n\u003cp\u003eIn this lesson, we will learn how to implement this powerful feature in our own pages.\u003c/p\u003e\r\n\u003cp\u003eThe grid system consists of two parts: rows and columns. As with other Bootstrap features, they are simply div tags with either a row or column class.\u003c/p\u003e\r\n\u003ch2\u003eRows\u003c/h2\u003e\r\n\u003cp\u003eTo create a row in your page layout, add a div with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    ...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSome important points to note about rows:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRows\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe placed inside of a container. The margins of the Bootstrap\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass are set in such a way that they do not work properly outside of a Bootstrap container.\u003c/li\u003e\r\n\u003cli\u003eRows act as wrappers for columns, and columns\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe be located inside of a row. Much like the relationship between the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, the padding of the Bootstrap\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolumn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass do not work properly when placed outside of a Bootstrap row. We will see how to use columns in the next section.\u003c/li\u003e\r\n\u003cli\u003eAny page content must be placed in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecolumns\u003c/em\u003e, not directly in rows.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eColumns\u003c/h2\u003e\r\n\u003cp\u003eWhen using the Bootstrap grid system, any content on the page needs to reside inside of a column. Columns can display any valid HTML, including images, headers, panels, wells, and other divs.\u003c/p\u003e\r\n\u003cp\u003eColumns are customizable and give us flexibility with page layout, so they require some explanation.\u003c/p\u003e\r\n\u003cp\u003eThe pattern followed for column class names looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003ecol-\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emedia\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003equery\u003c/span\u003e\u0026gt;\u003c/span\u003e-\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ewidth\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe class always starts with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol\u003c/code\u003e, which stands for \"column\".\u003c/p\u003e\r\n\u003cp\u003eThe other two sections are placeholders:\u003c/p\u003e\r\n\u003ch3\u003eMedia Query\u003c/h3\u003e\r\n\u003cp\u003eThe media query portion of the class name has several options:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003exs\u003c/code\u003e: \"extra small\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003esm\u003c/code\u003e: \"small\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003emd\u003c/code\u003e: \"medium\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003elg\u003c/code\u003e: \"large\"\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThese refer to built-in Bootstrap media query values that can be applied to columns, which we will cover in more detail shortly.\u003c/p\u003e\r\n\u003ch3\u003eWidth\u003c/h3\u003e\r\n\u003cp\u003eBootstrap's grid system allows up to 12 columns across the page. Accordingly, the width portion of the class name may be any number from 1 to 12. The number represents the number of units that column takes up, out of a total 12 units. So for example, a row could fit 12 columns with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1\u003c/code\u003e, 6 columns with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e2\u003c/code\u003e, 4 columns with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3\u003c/code\u003e, and so on.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eLet's start with a column that spans the full width of a row. Since it will be the only column in its row, it needs to be 12 units wide, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\r\n  \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\u0026gt;\r\n     \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-12\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n  \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow let's look at an example on the opposite end, with 12 columns each with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\r\n   \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n   \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis HTML look appear something like this on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-09-html_grid.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf you do not want to use all 12 columns individually, you can group the columns together to create wider columns. For example, one row could contain a column with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e7\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand a column with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e, since 7 + 5 = 12. Here's some sample HTML to create these columns:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\r\n   \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-7\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-5\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n   \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how that HTML would appear on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-10-html_grid_02.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eKeep in mind that the width values should add up to a total of 12 for a single row. If they add up to more than 12, then the columns will stack no matter the viewport size.\u003c/p\u003e\r\n\u003ch2\u003eAdding a grid to an existing page\u003c/h2\u003e\r\n\u003cp\u003eLet's get some practice using Bootstrap's grid system in a webpage. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epage from our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-practice\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eproject from the previous lesson contains five sections that lend themselves well to the grid system. Let's organize those now, into two rows: the first one with 2 columns, and the second one with 3 columns.\u003c/p\u003e\r\n\u003cp\u003eIn this case, we want our columns to be equal.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor our first row, we want 2 columns. The full width of a Bootstrap grid row is 12 units, so we can divide 12 by 2 to give us 6. This means that each column should be 6 units wide.\u003c/li\u003e\r\n\u003cli\u003eFor our second row, we want 3 columns. Again, divide the total width of 12 by 3, which gives us 4. Each column should be 4 units wide.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFirst, we need to add two divs with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to give us our two rows. The first one will include the first two sections, and the second one will include the last three. Here's what that looks like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that when we refresh the page, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass by itself doesn't actually change the layout of our page. We still need to add columns. Let's format the first row:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we refresh the page, the first two sections should be next to each other in a row, each the width of half the page. The last three sections are still stacked on top of each other, so let's put those in columns. The entire page should now look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow our content is spaced neatly into two rows!\u003c/p\u003e\r\n\u003cp\u003eBecause we're experimenting, let's see what happens when we try to fill a row with columns that exceed 12 units. Looking at the second row, let's change the width of the last column to 6 instead of 4:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we refresh the page, we see that the last column has created another row.\u003c/p\u003e\r\n\u003cp\u003eWhat happens when the column widths total less than 12? Let's try it out! I will change the widths to 2, 2, and 4:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, the columns in the row do not span the width of the entire page, and are condensed to the left side of the page. This takes some degree of control away from our page layout, which is one of the great advantages of using the grid system in the first place. As you use the grid system in your own projects, try experimenting with the layout of the page by using different column sizes.\u003c/p\u003e\r\n\u003cp\u003eLet's revisit those media queries in the class name. How do we know which one we want to use?\u003c/p\u003e\r\n\u003cp\u003eBootstrap has four options for media queries, each corresponding to a standard size of device:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003exs\u003c/code\u003e: phones\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003esm\u003c/code\u003e: tablets\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003emd\u003c/code\u003e: desktops\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003elg\u003c/code\u003e: large desktops\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThese sizes instruct how narrow the page can be before the columns stack on top of one another. They refer to built-in breakpoints that are common for the viewport sizes listed above.\u003c/p\u003e\r\n\u003cp\u003eWhat does this look like? Remember how we used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia query for the columns in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e? The columns are side by side when the page is full size.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-10-responsive_grid_01.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eHowever, start decreasing the width of your browser window. Once the page width is less than 992 pixels (the built-in value for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia query), the columns stack on top of each other, like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-11-responsive_grid_02.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eSee the Bootstrap Grid documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#grid-media-queries\"\u003eMedia Queries\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor the specifics of how media queries are applied.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-practice-roman-numerals-and-cryptosquare","title":"Wednesday: Practice: Roman Numerals and Cryptosquare","type":"WikiPage","content":"\u003ch2\u003ePractice\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Focus for these exercises (and all exercises going forward) on breaking your project down into small behavior examples and coding\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eone behavior at a time\u003c/strong\u003e. Make behavior grids before writing any code. Make sure to separate business logic and user interface logic.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eExplain what behavior-driven development is. Why is it so beneficial?\u003c/li\u003e\r\n\u003cli\u003eReview the specifications each partner wrote yesterday and discuss the following:\r\n\u003cul\u003e\r\n\u003cli\u003eIs each individual behavior listed as specific as possible? Does each represent\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehavior, or multiple behaviors?\u003c/li\u003e\r\n\u003cli\u003eIs the simplest possible behavior listed first? If so, how do you know it's the simplest? If not, which one should come first?\u003c/li\u003e\r\n\u003cli\u003eHow did you ensure you wrote the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eleast\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eamount of code possible to make each pass? What did that look like?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eRoman Numerals\u003c/h3\u003e\r\n\u003cp\u003eWrite a method to convert numbers into Roman numerals. Roman numerals are based on seven symbols:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs javascript\"\u003e\u003cspan class=\"hljs-built_in\"\u003eSymbol\u003c/span\u003e  Value\r\n      I       \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\r\n      V       \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n      X       \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n      L       \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e\r\n      C       \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e\r\n      D       \u003cspan class=\"hljs-number\"\u003e500\u003c/span\u003e\r\n      M       \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e000\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe most basic rule is that you add the value of all the symbols: so II is 2, LXVI is 66, etc.\u003c/p\u003e\r\n\u003cp\u003eThe exception is that there may not be more than three of the same characters in a row. Instead, you switch to subtraction. So instead of writing IIII for 4, you write IV (for 5 minus 1); and instead of writing LXXXX for 90, you write XC.\u003c/p\u003e\r\n\u003cp\u003eYou also have to separate ones, tens, hundreds, and thousands. In other words, 99 is XCIX, not IC. You cannot count higher than 3,999 in Roman numerals.\u003c/p\u003e\r\n\u003cp\u003eDraft some specifications and input-output examples to brainstorm the behaviors that you'll want to capture in your application. Tackle them one-by-one, worrying only about the future behaviors once the current example is implemented. All specifications should be listed in the project's README.md file.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not move on to the next exercise until you've completed the previous one\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003eCryptosquare\u003c/h3\u003e\r\n\u003cp\u003eA classic method for composing secret messages is called a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esquare code\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe spaces and punctuation are removed from the English text and the characters are written into a square (or rectangle) and the entire message is downcased. For example, the sentence \"don't compare yourself to others, compare yourself to the person you were yesterday\" is 69 characters long, so it is written into a rectangle with 9 rows and 8 columns.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/zutqzcmipdxu5rs/cryptosquare.png?raw=1\" alt=\"Cryptosquare Image\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe coded message is obtained by reading down the columns going left to right. For example, the message above is coded as:\u003c/p\u003e\r\n\u003cp\u003e\"daeer leweo rlref rerne fsyts rdtyt coooe acooo utnyy ouomr hyemr tpseo spsha eput\"\u003c/p\u003e\r\n\u003cp\u003eWrite a program that outputs the encoded version of a given block of text. Again, identify each individual behavior this application should demonstrate, and write a specification (including an input/output example) for each. Tackle writing code for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehavior at a time, and ensure your spec \"passes\" (you receive the correct output when you provide your input example) before moving to the next specification. List all specifications in the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eThe size of the square (number of columns) should be decided by the length of the message. If the message is a length that creates a perfect square (e.g. 4, 9, 16, 25, 36, etc), use that number of columns. If the message doesn't fit neatly into a square, choose the number of columns that corresponds to the smallest square that is larger than the number of characters in the message.\u003c/p\u003e\r\n\u003cp\u003eOutput the encoded text in groups of five letters. For example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003eencrypt(\u003cspan class=\"hljs-string\"\u003e\"Have a nice day. Feed the dog \u0026amp; chill out!\"\u003c/span\u003e);\r\n      # =\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hifei acedl v...\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eGo back and tackle any\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFurther Exploration\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eexercises from previous days this week that you have not yet completed.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs code broken down into plain English specs? Do these specs accurately represent the behaviours required of the program?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive, and in lower camelCase?\u003c/li\u003e\r\n\u003cli\u003eIs code indented properly throughout?\u003c/li\u003e\r\n\u003cli\u003eIs the business and user interface logic well-separated?\u003c/li\u003e\r\n\u003cli\u003eDoes the application work as expected?\u003c/li\u003e\r\n\u003cli\u003eIs the code clean, well-refactored, and generally easy to follow?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"resource-cheat-sheet-git-commands","title":"Resource: Cheat Sheet: Git Commands","type":"WikiPage","content":"\u003ch2\u003eCheat Sheet\u003c/h2\u003e\r\n\u003ch3\u003eDaily Git Workflow\u003c/h3\u003e\r\n\u003ch4\u003eSet Name and Email\u003c/h4\u003e\r\n\u003ch5\u003ePair Programming\u003c/h5\u003e\r\n\u003cp\u003eAdd\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto home directory (changing name, initials and emails to your own):\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e.pairs\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-attribute\"\u003epairs\u003c/span\u003e:\r\n  \u003cspan class=\"hljs-attribute\"\u003egh\u003c/span\u003e: Grace Hopper\r\n  \u003cspan class=\"hljs-attribute\"\u003ejb\u003c/span\u003e: James Bond\r\n\u003cspan class=\"hljs-attribute\"\u003eemail\u003c/span\u003e:\r\n  \u003cspan class=\"hljs-attribute\"\u003egh\u003c/span\u003e: gracehopper\u003cspan class=\"hljs-property\"\u003e@gmail\u003c/span\u003e.com\r\n  \u003cspan class=\"hljs-attribute\"\u003ejb\u003c/span\u003e: bond\u003cspan class=\"hljs-property\"\u003e@jamesbond\u003c/span\u003e.com\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eThen after the Git repository has been initialized, use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit pair\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to set the pair:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit pair [initials \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] [initials \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUsing the initials from the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in the home directory in place of \"[initials 1]\" and \"[initials 2]\", this command sets the user names and emails of PAIRS on a project.\u003c/p\u003e\r\n\u003ch5\u003eSolo Programming\u003c/h5\u003e\r\n\u003cp\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit config\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to set your name and email for your local computer. This only needs to be done once.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ git config --\u003cspan class=\"hljs-built_in\"\u003eglobal\u003c/span\u003e user.name \u003cspan class=\"hljs-string\"\u003e\"Santa Claus\"\u003c/span\u003e\r\n  $ git config --\u003cspan class=\"hljs-built_in\"\u003eglobal\u003c/span\u003e user.email santa\u003cspan class=\"hljs-property\"\u003e@northpole\u003c/span\u003e.com\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003eTracking Changes\u003c/h4\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new project directory with Git repository\r\n\u003cp\u003eIn the terminal type these commands:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir project-name\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd project-name\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit init\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit pair gh jb\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote: for solo work, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit pair\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand is unnecessary. Replace\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejb\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit pair\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand above with your own initials.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAfter adding files or making changes, track the changes.\r\n\u003cp\u003eUse this command to add all changes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add .\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUse this command to add a specific file (replace\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efilename.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the name of the file to add):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add filename.html\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eCommit the changes.\r\n\u003cp\u003eIn terminal (pair programming):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add a short, descriptive present-tense message here describing the changes made\"\u003c/span\u003e\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote: when working solo, use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein place of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit-pair-commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the above command.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCreate repository for project on GitHub at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/new\"\u003ehttps://github.com/new\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAdd the remote to the project.\u003c/p\u003e\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit remote add [remote name] [remote \u003cspan class=\"hljs-constant\"\u003eURL\u003c/span\u003e]\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[remote name]\u003c/code\u003e: Name of the remote. When working in pairs, it's a good idea to use your initials. When working solo, use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[remote URL]\u003c/code\u003e: The URL of the remote on GitHub.\u003c/li\u003e\r\n\u003cli\u003eFor example, this command adds a remote named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the repository at\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehttps://github.com/moringaschool/hello-world\u003c/em\u003e:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cpp\"\u003e$ git remote add gh https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003ePush the changes to GitHub.\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e [remote name] [branch name]\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[remote name]\u003c/code\u003e: Name of the remote. In these lessons, either your initials when pair programming, or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen working solo.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[branch name]\u003c/code\u003e: Name of the branch you're working on.\u003c/li\u003e\r\n\u003cli\u003eFor example, this command pushes to the remote named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e gh master\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eClone repository from GitHub.\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ git \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003e [remote URL]\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor example, this command clones the repository at\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehttps://github.com/moringaschool/hello-world\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003eclone\u003c/span\u003e https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eGit Commands Overview\u003c/h3\u003e\r\n\u003cp\u003eIn this reference, examples in brackets [xxx], should be entirely replaced by what is indicated (do not leave brackets).\u003c/p\u003e\r\n\u003ch4\u003eProject Setup\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git init\u003c/code\u003e: Initializes new local Git repository in the current directory.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git about\u003c/code\u003e: Verifies the current pair assignment.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git pair [initials1] [initials2]\u003c/code\u003e: Sets the pair for a repository.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eTracking Files\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git add .\u003c/code\u003e: Adds ALL files with changes to be committed.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git add [file]\u003c/code\u003e: Adds the named file to be committed.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git-pair-commit -m \"[message]\"\u003c/code\u003e: FOR PAIRS records all of the added files/changes permanently to the version history; message should describe the changes finishing the phrase \"This commit will…\".\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git commit -m \"[message]\"\u003c/code\u003e: FOR SOLO WORK records all of the staged files permanently to the version history; message should describe the changes finishing the phrase \"This commit will…\".\r\n\u003cul\u003e\r\n\u003cli\u003eExample:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git commit -m \"add submit functionality for the form\"\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eRemote Repositories\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git remote add [remote name] [remote URL]\u003c/code\u003e: Adds a remote with the name specified for the repository to the remote URL provided.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git remote -v\u003c/code\u003e: Shows the names and URLs for all of the remote repositories that the project's Git repository has stored.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git push [remote name] [branch name]\u003c/code\u003e: Copies the code to the remote repository from the local Git repository.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git clone [remote URL]\u003c/code\u003e: Copies the code and commit history from a remote repository to a local repository.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eReviewing Git Info\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git log\u003c/code\u003e: Lists commit history for the current branch.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git log --oneline\u003c/code\u003e: Lists a condensed format of the commit history for the current branch.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git status\u003c/code\u003e: Lists the files where changes have been made to be committed.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git about\u003c/code\u003e: Lists the information about the currently assigned pair's names.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCommon error messages\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e/usr/\u003cspan class=\"hljs-built_in\"\u003elocal\u003c/span\u003e/lib/ruby/gems/\u003cspan class=\"hljs-number\"\u003e2.4\u003c/span\u003e.\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e/gems/pivotal_git_scripts-\u003cspan class=\"hljs-number\"\u003e1.4\u003c/span\u003e.\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e/lib/pivotal_git_scripts/git_pair.rb:\u003cspan class=\"hljs-number\"\u003e167\u003c/span\u003e:\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e `block \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eread\u003c/span\u003e_author_info_from_config\u003cspan class=\"hljs-string\"\u003e': undefined method `[]'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e nil:NilClass (NoMethodError)\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis means that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit-pairs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003escripts is unable to run. Check the spacing and indentation of your\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003efile.\u003c/p\u003e","frontPage":false},{"exportId":"monday-block-elements","title":"Monday: Block Elements","type":"WikiPage","content":"\u003ch1\u003eBlock Elements\u003c/h1\u003e\r\n\u003cp\u003eWe're going to start adding content to our page by working with block elements. These are HTML elements that start on their own line when displayed, like a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eblock\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon the page. In this lesson, we will learn how to add paragraphs, headers, and lists to our pages.\u003c/p\u003e\r\n\u003cp\u003eOpen up\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand modify it so that it looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe formatting instructions around the text are called tags. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a p tag. It means that everything that follows is a paragraph until\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis reached. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a closing tag or end tag indicates the end of the paragraph. Closing tags always match the header but have a backslash in front.\u003c/p\u003e\r\n\u003cp\u003eWhen we viewed this page without the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags in the last lesson, all of the text appeared on the same line, despite being written on different lines. When we load up the page now, the lines appear as separate paragraphs.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-12-webpage_screenshot_paragraphs.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eWe've just made a change to our code. Time to commit!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n  \u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add paragraph block elements to the page\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's try some more tags:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy First Webpage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from Moringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've added the main header (\u003ccode\u003e\u0026lt;h1\u0026gt;My First Webpage\u0026lt;/h1\u0026gt;\u003c/code\u003e) and a subheader (\u003ccode\u003e\u0026lt;h2\u0026gt;Written with a little guidance from Moringa School\u0026lt;/h2\u0026gt;\u003c/code\u003e). Here's how it looks in the browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-13-webpage_screenshot_headers.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eThere are six different levels of headers you can add using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethrough\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e. Like the paragraph tags, we have an opening tag that indicates where the header begins (\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e) and a closing tag that indicates where it ends (\u003ccode\u003e\u0026lt;/h1\u0026gt;\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eHTML ignores empty spaces and blank lines, which is called whitespace. That's why the extra line we might add between our headers and paragraphs doesn't do anything when the HTML is displayed. We could take it out, or make it three spaces, and it would look exactly the same in the browser.\u003c/p\u003e\r\n\u003cp\u003eLet's commit again!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n  \u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add header block elements\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a little bit more:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy First Webpage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from Moringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some things I'm going to learn about coding:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eCSS\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJavaScript\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eAnd a lot more!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we've added an unordered list (\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e) with four list items (\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e). Here's the page with the unordered list:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-14-webpage_screenshot_unordered_list.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eIf we wanted to make an ordered list that uses numbers and letters instead of bullets, we would use an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eol\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eCSS\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJavaScript\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eAnd beyond!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eol\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's the list now:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-15-webpage_screenshot_ordered_list.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice in the code how I've indented the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003es within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003es. This makes it much easier to read which tags are nested and makes it easy to see where the closing tag goes when it's not on the same line. It's a good idea to write your closing tag just after you write your opening tag, and then go back and fill in whatever comes in the middle. This way, you won't forget to close a tag after opening it.\u003c/p\u003e\r\n\u003cp\u003eLet's commit again!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"add list elements\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe're done with this page for the moment. Now is a good time to push the project to GitHub. As a reminder, here are the steps (which should be done by both you and your pair, since you each want a copy of the repository on your GitHub):\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erepository on GitHub\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git remote add [remote nickname] [remote url]\u003c/code\u003e(replacing [remote nickname] with your initials or another good nickname and [remote url] with the URL to the GitHub repository you just created)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git push [remote nickname] master\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing [remote nickname] with the same nickname you used when you added the remote link)\u003c/li\u003e\r\n\u003cli\u003eCheck on GitHub that your code uploaded successfully\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-recreate-a-website","title":"Thursday: Recreate a Website","type":"WikiPage","content":"\u003cp\u003eGoal: Recreate an existing website using Bootstrap components, along with everything we have learned so far. Navigate the Bootstrap documentation to use new and unfamiliar components.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we ensure our stylesheet takes precedence over Bootstrap's? Where does this occur?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eRecreate the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://en.wikipedia.orgwiki/Main_Page\"\u003eWikipedia Main Page\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eusing Bootstrap. The important thing to focus on here is the the layout, not the functionality. Use divs, spans, classes, and floats along with the Bootstrap grid system to accomplish this. Add your own custom stylesheet as well.\u003c/p\u003e\r\n\u003cp\u003eFeel free to use dummy text and images for content. You can create a dummy link by using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehref\u003c/code\u003evalue like this:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a href=\"#\"\u0026gt;\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eIf you make it this far, great! The goal for the day is to get practice using Bootstrap and practice navigating the documentation. If you feel confident in your abilities, go ahead and move on to the next section.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInclude a detailed README with author names, project name, a description, setup instructions, and copyright information.\u003c/li\u003e\r\n\u003cli\u003eIf you finish early, go back to projects you worked on previously this week and add in Bootstrap.\u003c/li\u003e\r\n\u003cli\u003eBegin exploring the Bootstrap documentation. Try implementing elements we haven't explicitly covered here in our curriculum; whether in this site, or site from earlier this week.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-variable-scope","title":"Wednesday: Variable Scope","type":"WikiPage","content":"\u003ch2\u003eHomework: Variable Scope\u003c/h2\u003e\r\n\u003cp\u003eBefore we move on, let's pause to discuss\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003evariable scope\u003c/strong\u003e. The scope of a variable defines where and when it is available to be used or modified. Scope can be global or local depending on how it is declared.\u003c/p\u003e\r\n\u003ch2\u003eGlobal Scope\u003c/h2\u003e\r\n\u003cp\u003eVariables declared outside of functions have\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eglobal scope\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich means that all code and functions can access them.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable\"\u003c/span\u003e;\r\n\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esampleFunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(globalString);\r\n        globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable update!!\"\u003c/span\u003e;\r\n        alert(globalString);\r\n      }\r\n\r\n      alert(globalString);\r\n      sampleFunction();\r\n      alert(globalString);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run this in JSFiddle and see what we get each time we ask for an alert.\u003c/p\u003e\r\n\u003ch2\u003eLocal Scope\u003c/h2\u003e\r\n\u003cp\u003eVariables declared inside of functions have\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elocal scope\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ewhich means they are only locally available during the execution of the function. When we look at a variable that is defined within a function, we find that it's scope ends when the function is finished processing. In fact, the variable is created and destroyed each time the function runs.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIf we move the variable declaration from the global to the local by adding it inside the function, let's see what happens:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esampleFunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable\"\u003c/span\u003e;\r\n        alert(globalString);\r\n        globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable update!!\"\u003c/span\u003e;\r\n        alert(globalString);\r\n      }\r\n\r\n      alert(globalString);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNothing. Look in the console and the error\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eUncaught ReferenceError: globalString is not defined\u003c/code\u003e. We have not run the function so as the error message indicates,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eglobalString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas not actually been defined yet. It now has local scope.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's look at another example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.10.2.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eAn adventure in variable scope\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"click-one\"\u003c/span\u003e\u0026gt;\u003c/span\u003eclick me first\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"click-two\"\u003c/span\u003e\u0026gt;\u003c/span\u003eclick me second\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn your\u003cspan\u003e \u003c/span\u003e\u003cem\u003escript.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-one\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e whatToSay = \u003cspan class=\"hljs-string\"\u003e\"Hello!\"\u003c/span\u003e;\r\n          alert(whatToSay);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-two\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(whatToSay);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eclick me first\u003c/em\u003e, a dialog box pops open that says \"Hello!\". If we then click click me second, what happens? Nothing. If we look to the JavaScript console, we find the familiar error\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUncaught ReferenceError: whatToSay is not defined\u003c/em\u003e. And that's true. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is defined inside a function. Therefore, the program only knows about the variable while it is inside the function processing the code there. As soon as the function is complete, the variable is no longer defined; it's outside the limits of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e's variable scope.\u003c/p\u003e\r\n\u003ch2\u003eUnscoped variables (bad practice!)\u003c/h2\u003e\r\n\u003cp\u003eWhen you create a variable, it is important to declare it to the program using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIf you declare a variable by assigning it a value like this (without\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNamer\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        sampleName = \u003cspan class=\"hljs-string\"\u003e\"Cindy Lou\"\u003c/span\u003e\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJavaScript will make it a global variable\u003cspan\u003e \u003c/span\u003e\u003cem\u003eautomatically\u003c/em\u003e, even if it is inside of a function. In the above function,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esampleName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewould become a global variable with global scope which allows any part of the code to access or modify it.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eThis is something you should\u003cspan\u003e \u003c/span\u003e\u003cem\u003enever\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edo. Always use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword to declare your variables and consciously determine whether their scope should be global or local.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's just carry this through so that you understand what's going on if you see it elsewhere:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-one\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          whatToSay = \u003cspan class=\"hljs-string\"\u003e\"Hello!\"\u003c/span\u003e;\r\n          alert(whatToSay);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-two\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(whatToSay);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword removed from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e, if we click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eclick me first\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand then click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eclick me second\u003c/em\u003e, the dialog box will open up both times because it has defaulted to a global variable.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThis code is very small, so you may not see the problem with using a global variable. But imagine a code base that's thousands or tens of thousands of lines long. If you see a function that looks like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(whatToSay);\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eit would be incredibly difficult to figure out where\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas defined. And if\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas used and changed in multiple places, it would be next to impossible to figure out where it's value was last set. (For a horror story on a missing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e, read Geoffrey Hayes's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.pixelstech.net/article/1320253282-How-One-Missing-%60var%60-Ruined-our-Launch\"\u003e\"How one missing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eruined our launch\"\u003c/a\u003estarting at the \"Seem kinda bad?\" paragraph.)\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eTo conclude, always create variables with either global or local scope using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword. Using scoped variables lets us easily follow the flow of our application and ensures our functions don't step on each other's execution in unexpected ways.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs jQuery used to hide and show definitions when flashcards are clicked on?\u003c/li\u003e\r\n\u003cli\u003eIs code indented properly throughout?\u003c/li\u003e\r\n\u003cli\u003eAre Git commit messages descriptive, and in the correct tense?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-navigating-bootstrap-documentation","title":"Thursday: Navigating Bootstrap Documentation","type":"WikiPage","content":"\u003cp\u003eAll right, we've gone over some of the basics of Bootstrap. But Bootstrap is a huge framework - the unminified CSS file alone has more than 6700 lines of code! It simply would not be feasible for us to cover every single feature.\u003c/p\u003e\r\n\u003cp\u003eInstead, we are going to spend some time in this lesson going over how to navigate and use the Bootstrap documentation. That way, you will be able to take advantage of any of the features provided by Bootstrap whenever you need to!\u003c/p\u003e\r\n\u003cp\u003eBeyond the scope of Bootstrap, the ability to efficiently navigate and reference documentation is one of the most important skills to build as a web developer. Even developers with years of experience don't just sit down and start coding everything from memory - often they have an idea of what they would like to accomplish, and getting there is a continual process of referencing documentation and experimenting with code until something works.\u003c/p\u003e\r\n\u003cp\u003eYou will undoubtedly need to navigate documentation both throughout your journey as a student at Moringa and as you start work as a developer. The documentation for Bootstrap is well-organized and contains clear explanations and examples. It's a great resource to start learning more about Bootstrap, but it's also a great way to start familiarizing yourself with the process of navigating documentation.\u003c/p\u003e\r\n\u003cp\u003eWe've actually already been navigating the Bootstrap documentation as we've been getting familiar with the framework over the past few lessons. We have referenced the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/getting-started/\" target=\"_blank\"\u003eGetting Started\u003c/a\u003e\u003cspan\u003e \u003c/span\u003epage, the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/\" target=\"_blank\"\u003eCSS\u003c/a\u003e\u003cspan\u003e \u003c/span\u003epage, and the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/\" target=\"_blank\"\u003eComponents\u003c/a\u003e\u003cspan\u003e \u003c/span\u003epage. Generally, the sections we will reference the most are the CSS and Components pages. The navigation bar at the top of the page includes links to each of these sections:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-11-navigation_links.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eCSS\u003c/h2\u003e\r\n\u003cp\u003eBootstrap's CSS section contains information on Bootstrap's extensions on standard HTML elements, such as headers, tables, buttons, images, the grid system, and so on.\u003c/p\u003e\r\n\u003ch2\u003eComponents\u003c/h2\u003e\r\n\u003cp\u003eThe components section includes resources on Bootstrap elements that exist on their own, and are not simply re-styled HTML elements. Many custom components have been created, including jumbotrons, panels, wells, navigation bars, icons, and more.\u003c/p\u003e\r\n\u003ch2\u003eNavigation Sidebar\u003c/h2\u003e\r\n\u003cp\u003eEach page of the Bootstrap documentation has a handy sidebar on the right of the page for easy navigation. You can see what features are available at a glance. Clicking on any item navigates to the documentation for that element.\u003c/p\u003e\r\n\u003ch3\u003eCSS\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-12-css_nav_sidebar.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003eComponents\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-13-components_nav_sidebar.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eSelect\u003cspan\u003e \u003c/span\u003e\u003cem\u003eProgress bars\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eunder\u003cspan\u003e \u003c/span\u003e\u003cem\u003eComponents\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eso that we can walk through some of the features of the documentation together.\u003c/p\u003e\r\n\u003cp\u003eEvery entry in the Bootstrap documentation will contain a description of the element, sections with headings for each of the ways that you can customize the element, examples of what it looks like on the page, and code samples.\u003c/p\u003e\r\n\u003cp\u003eFor example, in the progress bars entry, we see that we have several options. The first two are\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBasic example\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eWith label\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-14-progress_bars_example.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eBoth examples show us what the component looks like on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-15-progress_bars_example_02.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eUnderneath, some sample code is provided for you to use the element in your own page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-16-progress_bars_example_code.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eGo ahead and explore the documentation for yourself! You're not going to understand everything in the documentation at this point, and that's okay. Again, navigating documentation is a skill, and the only way to get better is to practice. As you start using Bootstrap in your own projects, explore the documentation and implement features beyond the ones we've covered over the past few lessons.\u003c/p\u003e\r\n\u003ch2\u003eJavaScript Documentation\u003c/h2\u003e\r\n\u003cp\u003eIt's worth noting that there are several Bootstrap elements that have visual effects or animations (such as dropdown menus, modal windows, etc.) - but these require JavaScript. We won't begin exploring JavaScript until next week, nor are you required to begin implementing any Bootstrap elements with visual effects.\u003c/p\u003e\r\n\u003cp\u003eHowever, if you'd like to optionally explore these effects and elements in your own projects, you're welcome to. Just note that any Bootstrap elements that have animations will not work unless Bootstrap's own JavaScript files are also linked.\u003c/p\u003e\r\n\u003cp\u003eFor now, the easiest way to do this is to include the CDN link to Bootstrap's JavaScript file in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003etags of your HTML document:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-17-bootstrap_js_cdn.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you will soon experience, the web is constantly growing and evolving, and the best way to keep up is to be able to adapt to these changes. More likely than not, you will eventually be asked to use a language or technology you've never seen before. Practice navigating unfamiliar documentation now, and you'll be better prepared when the situation arises again.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-class-vs-id","title":"Wednesday:Class vs. ID","type":"WikiPage","content":"\u003cp\u003eBefore we go on, let's talk about the difference between assigning a class to an HTML tag and assigning an id to an HTML tag. For the remainder of this section you can ignore IDs and continue using classes, but a brief explanation is in order, as you are likely to find references to IDs when reading resources online.\u003c/p\u003e\r\n\u003cp\u003eBoth classes and IDs can be targeted by CSS rules (classes with a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand IDs with a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esymbol). For example, both paragraph tags below are styled the same, though one is referenced by class and the other by ID.\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eindex.html\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eSome Exciting Red Text\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"line1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eThis text will appear red.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"line2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eThis text will also be red. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003estyles.css\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.line1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-id\"\u003e#line2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe important difference is that IDs are unique, while classes are not unique. We can use the same class on multiple elements, while IDs must be unique to a single element on the page. IDs may appear to work even when duplicated on the same page, but duplicate IDs can lead to inconsistent behavior and hard-to-find bugs.\u003c/p\u003e\r\n\u003cp\u003eIf in doubt, use a class.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-installing-bootstrap","title":"Thursday: Installing Bootstrap","type":"WikiPage","content":"\u003cp\u003eNow that we've seen some of the benefits to using a front-end framework such as Bootstrap, let's walk through how to download it and use it in one of our own projects.\u003c/p\u003e\r\n\u003cp\u003eThere are several ways to go about using Bootstrap in our own projects. In this lesson, we will cover two of the simplest options.\u003c/p\u003e\r\n\u003cp\u003eFirst, navigate to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/\" target=\"_blank\"\u003eBootstrap's website\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDownload Bootstrap\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton on the front page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-01-download_bootstrap.jpg\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThis will take you to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDownloads\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epage, which gives you three options to get started, each one suited for different skill levels and use cases:\u003c/p\u003e\r\n\u003cp\u003eClick on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDownload Bootstrap\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton in the first option. This will start a download of a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-3.3.7-dist.zip\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(the version number at the time of this writing was 3.3.7, but your download may have a different number - that's perfectly fine). The extension of the download is\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.zip\u003c/em\u003e, which is a file format that compresses files to reduce their size, making downloads faster. In order to access the files it contains, we need to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunzip\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe folder, which is as simple as double-clicking the downloaded folder.\u003c/p\u003e\r\n\u003ch2\u003eBootstrap Contents\u003c/h2\u003e\r\n\u003cp\u003eThe downloaded folder should contain folders named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e, each containing several files. The file structure looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-02-bootstrap_filestructure.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eHere's a rundown of what each of these folders contain:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains the Bootstrap stylesheet in a variety of formats.\r\n\u003cul\u003e\r\n\u003cli\u003eThere are several files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap\u003c/em\u003e. They are all different formats of the same stylesheet that we will be using in our projects.\u003c/li\u003e\r\n\u003cli\u003eThere are also several files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-theme\u003c/em\u003e. They are also different formats of the same stylesheet. This one is optional, and provides a visually-enhanced Bootstrap theme. It contains additional styles that work with animations and visual effects. For now, we will only focus on using the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.min\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eextension indicates a minified file. Minified means that characters not necessary for computers to understand the code have been removed (such as whitespace). The functionality stays the same, but the file is much smaller and faster to use.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.map\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles are used with development tools called CSS preprocessors, which extend the functionality of CSS. We will not be using CSS preprocessors in this course, so we will not use\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.map\u003c/em\u003efiles either.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains a variety of useful icons, called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eglyphicons\u003c/em\u003e, in different formats. See the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/\" target=\"_blank\"\u003eBootstrap documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor the available icons. We will learn how to use these in an upcoming lesson.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains JavaScript code for animations and visual effects. You can see more information\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/javascript/\" target=\"_blank\"\u003ehere\u003c/a\u003e. We will not be using JavaScript until later in the course, so for now, we will be getting familiar with the contents of the css folder. Adding Bootstrap to a Project In our projects, we will be using either\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.min.css\u003c/em\u003e. These files both contain the same CSS, but the second one is a minified version.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThese files are CSS stylesheets just like the CSS we've been writing, and we include them in our projects in exactly the same way. To use either of these CSS files in a project, we simply need to add the file to the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cp\u003eNow that the stylesheet is in the project's css folder, we need to link it in in the website's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esection:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e =\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eExample Page Title\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can actually link your own stylesheet along with Bootstrap's stylesheet. HTML allows you to link as many stylesheets as you want! Because of cascading, the order of the stylesheets matters, and your own custom stylesheets must be linked after the Bootstrap stylesheet. We'll learn more about using custom CSS alongside Bootstrap in an upcoming lesson.\u003c/p\u003e\r\n\u003ch2\u003eBootstrap CDN\u003c/h2\u003e\r\n\u003cp\u003eAnother option for linking Bootstrap in your project is to link to the CDN, which stands for content delivery network. We'll cover what this means in a second, but first, let's see how to include it. On the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003ca href=\"http://getbootstrap.com/getting-started/#download\" target=\"_blank\"\u003eDownloads\u003c/a\u003e\u003c/em\u003epage (the same one we visited above) underneath the links to download the Bootstrap files, there is a list of CDN links:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-03-bootstrap_cdn_links.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eA CDN is a network of servers that store content and deliver it to users. In other words, the Bootstrap stylesheets are hosted online at the addresses above, and we can link to the online address instead of including the actual files in our project and linking to our local copies of the files.\u003c/p\u003e\r\n\u003cp\u003eNotice how the links from the Bootstrap website look similar to how we include stylesheets in our projects? We'll actually include them in the same way. Just copy and paste a CDN link into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof your webpage:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eintegrity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ecrossorigin\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"anonymous\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eExample Page Title\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor now, just use the first CDN link provided, because it does not include any JavaScript.\u003c/p\u003e\r\n\u003cp\u003eDepending on the size of the files, linking to the CDN can really cut down on the resources and time required to load a website. The downside of using the CDN is that you need an internet connection to use it, because the project needs to access the stylesheet from the online location for the CSS to load.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-behaviour-driven-development-bdd","title":"Tuesday: Behaviour Driven Development (BDD)","type":"WikiPage","content":"\u003ch1\u003eBehavior Driven Development\u003c/h1\u003e\r\n\u003cp\u003eOne of the most difficult challenges facing us as developers is taking a problem we want to solve or a concept we want to realize and turning it into a set of specific programming tasks.\u003c/p\u003e\r\n\u003cp\u003eA common process to do this is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBehavior-Driven Development\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(or\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://en.wikipedia.orgwiki/Behavior-driven_development\" target=\"_blank\"\u003eBDD\u003c/a\u003e) and is used by developers across coding languages. In BDD, rather than thinking about the code first, the focus begins on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebehaviors\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat we want to see in our final application. We identify what the program\u003cspan\u003e \u003c/span\u003e\u003cem\u003eshould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edo before determining how to make it do it.\u003c/p\u003e\r\n\u003cp\u003eTo practice this, we'll imagine that we have been hired by a person born on February 29th. She would like to determine if any given year is a leap year (meaning it's a birthday year for her!). Here's a finished example of what she'd like: Leap year detector.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/leapyear.png\" alt=\"leap year website\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd after hitting a leap year.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/leapyear_result.png\" alt=\"leap year website\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBefore we think about the programmatic elements, what\u003cspan\u003e \u003c/span\u003e\u003cem\u003eshould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea leap year program do? At its most basic, it will need to be able to take a year from the user and answer\u003cspan\u003e \u003c/span\u003e\u003cem\u003etrue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003efalse\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the question: is this year a leap year? Our program will only be able to provide an answer once it successfully evaluates what the user provides as a year. Let's think of all of the possibilities we might get from a user and what the correct response should be for them.\u003c/p\u003e\r\n\u003ch2\u003eSpecifications\u003c/h2\u003e\r\n\u003cp\u003e\u003ca href=\"http://www.timeanddate.com/date/leapyear.html\" target=\"_blank\"\u003eTimeanddate.com\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eoffers us the 3 criteria that must be considered to determine if a year is a leap year:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe year is evenly divisible by 4;\u003c/li\u003e\r\n\u003cli\u003eIf the year can be evenly divided by 100, it is NOT a leap year, unless;\u003c/li\u003e\r\n\u003cli\u003eThe year is also evenly divisible by 400. Then it is a leap year.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTherefore, each time a user offers a year to evaluate, we will ultimately need to test the value against each of the leap year rules.\u003c/p\u003e\r\n\u003cp\u003eIn BDD, our next step is to generate examples of these rules one-by-one. These examples are also known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003especifications\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003especs\u003c/strong\u003e. We can create a table that helps us sort out the details of the specifications for each rule using the following pieces of information:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ethe behavior that we'll need to write code to handle\u003c/li\u003e\r\n\u003cli\u003ea sample of input that would demonstrate the behavior\u003c/li\u003e\r\n\u003cli\u003ethe expected output we'd get when the code is working correctly\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/s8ba59r4ubwjuel/bdd-leap-year-grid.png?raw=1\" alt=\"Leap Year Input-Output Grid\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAlthough there are many other considerations for our final application (display, user interaction, form building, what if someone enters a letter?, etc), we will not worry about those until we have the core functionality in place. If we think of any additional functionality we need, we can add behaviors to our specification list as we go. When you code using BDD, it is good to get into the habit of making a note of all behaviors as you think of them, but staying focused on one task at a time.\u003c/p\u003e\r\n\u003cp\u003eLet's look at another example of specs organized on a table showing behavior, input and output:\u003c/p\u003e\r\n\u003ch3\u003eTitle Case\u003c/h3\u003e\r\n\u003cp\u003eIn this example, we want to build an application that will take a user's string of words and convert them to title case - capitalizing letters like we'd find in a book title. There are a few more rules for creating title cased words from strings than Leap Year. Let's brainstorm the first several:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/mwlf5zuw57m2w7w/bdd-title-case-grid.png?raw=1\" alt=\"BDD Table for Title Case\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs we did with the leap year application, we choose the simplest first - one word gets capitalized -\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ebeowulf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecomes\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eBeowulf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand go to the most complex. And as always, we may think of additional behaviors along the way: what if a user enters nothing? what about iPod or McDuff? Remember, let your brain keep brainstorming by adding new behaviors to your list but always stay focused on one specification at a time.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-branching","title":"Thursday: Branching","type":"WikiPage","content":"\u003ch2\u003eHomework: Branching\u003c/h2\u003e\r\n\u003cp\u003eNow that we've learned the basics of how to manipulate web pages with jQuery, we're going to add some logic to our pages that will allow us to control the flow of our code based on certain conditions. This kind of logic is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebranching\u003c/strong\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAs an example, we are going to create a website for a bar. We only want to show the drinks menu to the user if they are over 21. So, the condition is age. When we come to determining this condition in the code, it is like a fork in the road with two paths or branches. If the user is over 21, they'll see the drinks menu. If not, they will get a message indicating that they are not old enough to view the content.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere's an example:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.10.2.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eDrinks\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"drinks\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eDrink menu\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eBeer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eThe King of Beer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eThe Queen of Beer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eReal cold beer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWine\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eRed wine\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eWhite wine\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eBlue wine\u0026amp;li;/li\u0026gt;\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"under-21\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eSorry, we can't serve you.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's illegal in the US. Try Mexico or Europe.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn our\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyle.css\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-id\"\u003e#drinks\u003c/span\u003e, \u003cspan class=\"hljs-id\"\u003e#under-21\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"How old are you?\"\u003c/span\u003e));\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (age \u0026gt;= \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e) {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#drinks'\u003c/span\u003e).show();\r\n        }\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eA value entered into a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efield always returns a string even if a number is entered. Since we want our age to be compared to another number, we have to change it into a number using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003efunction.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOnce we collect the user's age, we can write a JavaScript\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement\u003c/strong\u003e, or a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebranch\u003c/strong\u003e. If statements consist of the keyword\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efollowed by a condition in parentheses. The condition will always evaluate to a boolean value: either true or false. After the condition, we add the code that we want to execute if the condition is true. This code is set between two curly braces on it's own lines. (Note the standards for an if statement: spacing, two-space indentation and NO semicolon after the final curly brace.)\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWhen the condition evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, the code that follows between the curly braces is executed. If the condition is false, the code in the curly braces is not executed and the JavaScript processing moves on.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's work through a couple examples of our age condition. If our user indicates an age of 25, then the condition\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage \u0026gt;= 21\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecomes\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e25 \u0026gt;= 21\u003c/code\u003e, which evaluates to true. The code in the curly braces is run and the div with an id of drinks is shown.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIf age is 16,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage \u0026gt;= 21\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecomes\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e16 \u0026gt;= 21\u003c/code\u003e, which evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e. In this case, the code in the curly braces is skipped and nothing is displayed.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBack to our code, let's show a different message if the condition is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(the user is under 21). To do this we'll add an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"How old are you?\"\u003c/span\u003e));\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (age \u0026gt;= \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e) {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#drinks'\u003c/span\u003e).show();\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#under-21'\u003c/span\u003e).show();\r\n        }\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, just like before, when the condition in parentheses evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, the code in the first set of curly braces is run. But when the condition evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e, the code in the second set of curly braces, after the else keyword, is run.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAn else statement does not need a condition because the code in its curly braces is what will be run when the if condition is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eGenerally, your code is executed from top to bottom, like a car driving straight down the road. When your car encounters an if statement, it is like encountering a fork in the road. You can't take both paths - if the condition is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, the if code runs, otherwise the else code runs.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWhat if we need to have more conditions? What if we want to display a special third message if the user is exactly 21? Let's pop up an alert that says \"Now don't go crazy!\" if the age is equal to (===) 21:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"How old are you?\"\u003c/span\u003e));\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (age \u0026gt; \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e) {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#drinks'\u003c/span\u003e).show();\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (age === \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e) {\r\n          alert(\u003cspan class=\"hljs-string\"\u003e\"Now don't go crazy!\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#drinks'\u003c/span\u003e).show();\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#under-21'\u003c/span\u003e).show();\r\n        }\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eelse if\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis just like an alternate\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e. It also has a condition to be checked in parenthesis next to it, and if that condition is true then the code in curly braces following it is run. But\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse if\u003c/code\u003e's condition is only checked when the if condition has already been found to be false. In real life, you use this idea of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif, else if\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eall the time. Say you're going to the beach with your friends over the weekend. You all decide that the easiest way to get there would be to drive, but only your friend Omera has a car. So, if Omera is free, you can all drive with her. But, he never picks up his phone. So, you all decide that as an alternate plan you will take the bus - but only if Omera is busy. Then one of your friends remembers that this is a holiday weekend, so the bus might not be running. You roll your eyes at your friend and say \"Fine, if we can't find Omera, and the buses aren't running, we can all just go to my house and watch movies.\" That is an if statement! Let's re-interpret this discussion in pseudocode:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (Omera === \u003cspan class=\"hljs-string\"\u003e\"available to drive\"\u003c/span\u003e) {          \u003cspan class=\"hljs-comment\"\u003e// if Omera can drive...\u003c/span\u003e\r\n        driveToBeach();                                \u003cspan class=\"hljs-comment\"\u003e// call the function to drive to the beach.\u003c/span\u003e\r\n      }\r\n      \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (busesAreRunning === \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e) {             \u003cspan class=\"hljs-comment\"\u003e// if Omera can't drive and the buses are running...\u003c/span\u003e\r\n        busToBeach();                                  \u003cspan class=\"hljs-comment\"\u003e// take the bus to the beach.\u003c/span\u003e\r\n      }\r\n      \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {                                           \u003cspan class=\"hljs-comment\"\u003e// if all the other options fail...\u003c/span\u003e\r\n        watchMovies();                                 \u003cspan class=\"hljs-comment\"\u003e// watch movies instead.\u003c/span\u003e\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe triple equals sign\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis easy to mix up with the single equals sign\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e=\u003c/code\u003e. Remember that the single equals sign (\u003ccode\u003e=\u003c/code\u003e) is used to assign a value to a variable. The triple equals (\u003ccode\u003e===\u003c/code\u003e) is used in conditions to check if the values on its left and right sides are equal.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWhen you are writing an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement, you can have as many\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse if\u003c/code\u003e's in it as you like, but you can only have one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emust be the first statement, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emust be the last statement.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWhen JavaScript tries to figure out if the condition is true, it's looking for a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eboolean\u003c/code\u003e. You saw in the Assignment \u0026amp; Comparison Operators lesson that comparisons return a boolean -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e. Check out what's going on here in the JavaScript console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-number\"\u003e22\u003c/span\u003e;\r\n      \u0026gt; age \u0026gt; \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe're getting a boolean. We could write the JavaScript for our drinks page like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e over21 = confirm(\u003cspan class=\"hljs-string\"\u003e\"Are you over 21? Click OK for yes or Cancel for no.\"\u003c/span\u003e);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (over21) {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#drinks'\u003c/span\u003e).show();\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n          $(\u003cspan class=\"hljs-string\"\u003e'#under-21'\u003c/span\u003e).show();\r\n        }\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn other words, when I earlier said \"If the condition in the parentheses is true, then the first statement is run,\" it's more precise to say \"If the condition in the parentheses evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, then the first statement is run.\" (Note: this isn't 100% correct, as we'll see in the next lesson, but don't worry about that for now.)\u003c/p\u003e","frontPage":false},{"exportId":"friday-independent-project-portfolio-landing-page","title":"Friday: Independent Project: Portfolio Landing Page","type":"WikiPage","content":"\u003ch2\u003ePortfolio Landing Page\u003c/h2\u003e\r\n\u003cp\u003eCongratulations on beginning your journey toward becoming a developer! As a developer, you need a web portfolio to showcase your work. Today, you will be creating the landing page for your programming portfolio.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eRequirements\u003c/h3\u003e\r\n\u003cp\u003eHere are the requirements for your page:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eYour name\u003c/li\u003e\r\n\u003cli\u003eAn image of you or something that represents who you are\u003c/li\u003e\r\n\u003cli\u003eA list of projects you have created with active links to them (either on GitHub or GitHub pages)\r\n\u003cul\u003e\r\n\u003cli\u003eFor each, include a brief description of the project and what languages it uses\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAn \"About Me\" section including:\r\n\u003cul\u003e\r\n\u003cli\u003eYour background (for example, your education, job experience, a paragraph on why you decided to take a class on programming, etc.)\u003c/li\u003e\r\n\u003cli\u003eYour current interests/hobbies/skills\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eDeploy your site onto GitHub pages so that a live site can be viewed at\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour-username.github.io/portfolio\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(for example)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eObjectives\u003c/h3\u003e\r\n\u003cp\u003eIn addition to these requirements, your portfolio will be evaluated on the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSome of the most common HTML tags are incorporated, including:\r\n\u003cul\u003e\r\n\u003cli\u003ep, h, ul, ol, li, em, strong, a, img, div, span\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eSubmission of Independent Projects\u003c/h2\u003e\r\n\u003cp\u003eIndependent Projects must be submitted by 6pm on Friday. (For Moringa Prep part-time students, code review and deadlines will be discussed in class.)\u003c/p\u003e\r\n\u003cp\u003eComplete the following steps to submit your project:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eBefore you start working on your project,create a GitHub repository for your project\u003c/li\u003e\r\n\u003cli\u003eFill this\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://submit-ip.moringaschool.com/\" target=\"_blank\"\u003eform.\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eStart working on your project\r\n\u003cul\u003e\r\n\u003cli\u003eBefore pushing your final code to GitHub, at 5pm do a final check for each objective. Spend a few minutes checking indentation, removing commented-out code, creating a detailed README, etc. Your project should be polished and complete.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003ePush the final code to your GitHub repo by 6pm local time.\r\n\u003cul\u003e\r\n\u003cli\u003eEven if you are not completely done working on your project, push anyways which will communicate to your TM how much you have completed\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e","frontPage":false},{"exportId":"monday-javascript-arrays","title":"Monday: Javascript Arrays","type":"WikiPage","content":"\u003ch1\u003eArrays and Looping Objectives\u003c/h1\u003e\r\n\u003cp\u003eWe'll start out this week by learning about some important programming concepts that will allow us to better work with data:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eArrays - lists of data or information\u003c/li\u003e\r\n\u003cli\u003eLooping - allows JavaScript to repeat an action until some condition is met\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThen we'll dedicate the rest of the week to coding all day, putting into practice everything we've learned so far.\u003c/p\u003e\r\n\u003cp\u003eEach day's exercises will specifically explore the week's objectives. Remember that speed and quantity are not measurements of success at the end of a day...\u003cem\u003eunderstanding\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis. While we expect you to review and share each other's work, there's a great saying that applies (with a slight Moringa School modification): \"Don't compare your code to others, compare your code to the code you wrote yesterday\".\u003c/p\u003e\r\n\u003cp\u003eThis week also shifts where our attention will be focused. Over the past two weeks, we have been creating websites with HTML, CSS and Bootstrap. We've added effects with jQuery and gotten started on the basics of JavaScript. When a project was completed, we ran the code in the browser to display it.\u003c/p\u003e\r\n\u003cp\u003eIn this section, we will continue to practice being really conscious of the separation of back-end business logic and front-end user interface logic. We'll focus on writing our own JavaScript functions that we will call from jQuery.\u003c/p\u003e\r\n\u003cp\u003eAt the end of the week, you will be able to:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ebreak problems down into behavior examples\u003c/li\u003e\r\n\u003cli\u003ebuild JavaScript functions that use arrays and looping\u003c/li\u003e\r\n\u003cli\u003ecreate HTML pages that use jQuery to call JavaScript functions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eThe code review will give you the opportunity to develop a project with the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eJavaScript business logic and user interface logic are separate.\u003c/li\u003e\r\n\u003cli\u003eVariable names are descriptive and use lower camel case (e.g. myVariableExample).\u003c/li\u003e\r\n\u003cli\u003eCode has proper indentation and spacing.\u003c/li\u003e\r\n\u003cli\u003eApplication works as expected.\u003c/li\u003e\r\n\u003cli\u003eAll previous objectives have been met.\u003c/li\u003e\r\n\u003cli\u003eProject is broken down into \"plain English\" specs, listed in README.\u003c/li\u003e\r\n\u003cli\u003eProject is in a presentable, portfolio-quality state.\u003c/li\u003e\r\n\u003cli\u003eYou are able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eJavascript Arrays\u003c/h2\u003e\r\n\u003cp\u003eUntil now, we've always dealt with one piece of information at a time: one number, one string, one element on a page. But often, we need to group things together. For example, what if we wanted to have a list of the months of the year? We'd use an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003earray\u003c/strong\u003e, which is just a list of things grouped together. An array looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e months = [\u003cspan class=\"hljs-string\"\u003e\"january\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"february\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"march\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"april\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"may\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"june\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"july\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"august\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"september\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"november\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"december\"\u003c/span\u003e];\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere are some more arrays for you to try in the JavaScript console:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode class=\"\"\u003e[2, 5, 7, 3423, 85, 65]\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode class=\"\"\u003e[\"e\", \"p\", \"i\", \"c\", \"o\", \"d\", \"u\", \"s\"]\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode class=\"\"\u003e[\"word\", 45, \"blah\", 123]\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou can put variables and expressions in your arrays, or even other arrays:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e variable = \u003cspan class=\"hljs-string\"\u003e\"I'm a variable!\"\u003c/span\u003e;\r\n  \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e things = [variable, \u003cspan class=\"hljs-string\"\u003e\"I'm not a variable!\"\u003c/span\u003e];\r\n  \u0026gt; things;\r\n  [\u003cspan class=\"hljs-string\"\u003e\"I'm a variable!\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"I'm not a variable!\"\u003c/span\u003e]\r\n\r\n  \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e numbers = [\u003cspan class=\"hljs-number\"\u003e62\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e62\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e];\r\n  \u0026gt; numbers;\r\n  [\u003cspan class=\"hljs-number\"\u003e62\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e31\u003c/span\u003e]\r\n\r\n  \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e confusingAssortmentOfThings = [\u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e123\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"another string\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e456\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e321\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yet another string\"\u003c/span\u003e];\r\n  \u0026gt; confusingAssortmentOfThings;\r\n  [\u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e123\u003c/span\u003e, \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e321\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yet another string\"\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e(That\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eArray[2]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust means that this element of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003econfusingAssortmentOfThings\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray is itself an array containing 2 elements. More on this later.)\u003c/p\u003e\r\n\u003cp\u003eJust like numbers and strings, arrays have methods. Here are a couple for you to start with:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e fruits = [\u003cspan class=\"hljs-string\"\u003e\"apple\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"orange\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"passion fruit\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"kiwi\"\u003c/span\u003e];\r\n  \u0026gt; fruits.pop();\r\n  \u003cspan class=\"hljs-string\"\u003e\"kiwi\"\u003c/span\u003e\r\n  \u0026gt; fruits;\r\n  [\u003cspan class=\"hljs-string\"\u003e\"apple\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"orange\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"passion fruit\"\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e numbers = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e];\r\n  \u0026gt; numbers.reverse();\r\n  [\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\r\n  \u0026gt; numbers;\r\n  [\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote that both the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ereverse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods change the array on which they're called. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod removes the last item from the array AND\u003cspan\u003e \u003c/span\u003e\u003cem\u003ereturns\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ereverse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod reverses the order of items in the array and returns that reversed array.\u003c/p\u003e\r\n\u003cp\u003eYou can also add elements to an array, or combine two arrays:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e\u0026gt; var greetings = [];\r\n  \u0026gt; greetings.\u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n  \u0026gt; greetings.\u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'hello'\u003c/span\u003e);\r\n  \u0026gt; greetings;\r\n  [\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e]\r\n\r\n  \u0026gt; greetings.concat([\u003cspan class=\"hljs-string\"\u003e'hola'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'buenos dias'\u003c/span\u003e]);\r\n  [\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hola\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"buenos dias\"\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote that while\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eadds an element to an array, the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003econcat()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod doesn't actually change the original array, but rather returns a new array that combines the two. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003egreetings\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray still only contains the 2 elements pushed on to it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\u0026gt; greetings;\r\n  [\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you want to access an element from an array, the syntax is a bit different from anything we've seen before:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e letters = [\u003cspan class=\"hljs-string\"\u003e'e'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'p'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'i'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'c'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'o'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'd'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'u'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e's'\u003c/span\u003e];\r\n  \u0026gt; letters[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"e\"\u003c/span\u003e\r\n  \u0026gt; letters[\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"o\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJust like with strings, we count array elements starting with zero. So the zeroth element of the array is\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e'e'\u003c/code\u003e, and the fourth element is\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e'o'\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eNote that it is conventional for array variable names to be plural, thereby making it clear that the variable refers to a collection of things rather than a single thing. Following this convention will help with debugging your own code as well as making your code clearer for others.\u003c/p\u003e\r\n\u003cp\u003eCheck out the MDN documentation for\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Mutator_methods\" target=\"_blank\"\u003eMutator\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Accessor_methods\" target=\"_blank\"\u003eAccessor\u003c/a\u003e\u003cspan\u003e \u003c/span\u003emethods, and experiment using these methods on your own.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-catch-up-day","title":"Thursday: Catch-up Day","type":"WikiPage","content":"\u003ch2\u003eCatch Up Day\u003c/h2\u003e\r\n\u003cp\u003eTake this day to do a review of this week's work and also the previous weeks' content. Take time and go through the further exploration sections and make sure that you are at par with what we are learning everyday. The technical mentors will be there to assist you as you cover what you did not understand and any other incomplete projects and exercises.\u003c/p\u003e\r\n\u003cp\u003eRemember, the ABC of a software developer is \"Always Be Coding\". Have fun!! :)\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-readme","title":"Tuesday: README ","type":"WikiPage","content":"\u003cp\u003eEvery GitHub repository should have a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREADME.md\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile. It's often the first thing someone new to your project sees and is frequently the only source of documentation. The READMEs we will write will have the extension,\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e.md\u003c/code\u003e which stands for Markdown. Like HTML, Markdown is a language that uses annotations to format the display of text.\u003c/p\u003e\r\n\u003cp\u003eThe README file should be located in the top level of the project directory. GitHub knows to look for a file named \"README\" and display the contents on the repo's viewing page.\u003c/p\u003e\r\n\u003cp\u003eIt's worth taking the time to make your README look presentable because it will be the first thing anyone will see in your repositories. You want to make a solid first impression - if people see that you have a messy or incomplete README, they will assume that your code is also messy or incomplete. You want to make it as easy as possible for your users (such as potential employers) to check out your code. Writing a strong README is a good way to practice - and showcase - your empathy as a developer.\u003c/p\u003e\r\n\u003cp\u003eCheck out the following examples of good READMEs:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://github.com/iharsh234/WebApp\"\u003eWebApp\u003c/a\u003e: description, live demo, screenshots, usage and collaboration instructions, technologies used, to do list, collaborators, license\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://github.com/sindresorhus/pageres\"\u003ePageRes\u003c/a\u003e: logo, description, installation instructions, usage instructions, API documentation, links to related repos, live demo, collaborators, license\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://github.com/IgorAntun/node-chat\"\u003eNode.JS Chat\u003c/a\u003e: description, screenshot, live demo, features, setup instructions, usage instructions, license\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAs you can see from these examples, READMEs vary widely from one repository to the next, depending on the project needs. This is why it's important that your README is well-organized and easy to read. Moringa School recommends including as a minimum the following sections:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eApplication name\u003c/li\u003e\r\n\u003cli\u003eNames of contributors\u003c/li\u003e\r\n\u003cli\u003eDescription of the project's purpose\u003c/li\u003e\r\n\u003cli\u003eComplete setup/installation instructions\u003c/li\u003e\r\n\u003cli\u003eLicense information with a copyright and date\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAdditional sections to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLive demo\u003c/li\u003e\r\n\u003cli\u003eInstructions on running tests\u003c/li\u003e\r\n\u003cli\u003eTechnologies used\u003c/li\u003e\r\n\u003cli\u003eFuture features or to do list\u003c/li\u003e\r\n\u003cli\u003eKnown bugs\u003c/li\u003e\r\n\u003cli\u003eContact information\u003c/li\u003e\r\n\u003cli\u003eSupport or contribution instructions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBelow is a README sample template written in Markdown. Feel free to copy and paste the text below into a new file and replace the relevant parts in curly brackets with information about your project. It includes sections from above, but you can modify this in any way to suit your project's needs or to make your README look the way you want.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e# {Application Name}\r\n#### {Brief description of application}, {Date of current version}\r\n#### By **{List of contributors}**\r\n## Description\r\n{This is a detailed description of your application, including its purpose and usage.  Give as much detail as needed to \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexplain\u003c/span\u003e what the application does, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e other information you want users \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e other developers \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e have. }\r\n## Setup/Installation Requirements\r\n* This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a great place\r\n* \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e list setup instructions\r\n* \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a simple\r\n* easy-\u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e-understand\r\n* \u003cspan class=\"hljs-keyword\"\u003eformat\u003c/span\u003e\r\n{Leave nothing \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e chance! You want it \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be easy \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e potential users, employers \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e collaborators \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e run your app. \u003cspan class=\"hljs-keyword\"\u003eDo\u003c/span\u003e I need \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e run a \u003cspan class=\"hljs-keyword\"\u003eserver\u003c/span\u003e? \u003cspan class=\"hljs-keyword\"\u003eDo\u003c/span\u003e I need \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e dependencies? How should I \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e up my \u003cspan class=\"hljs-keyword\"\u003edatabases\u003c/span\u003e? \u003cspan class=\"hljs-keyword\"\u003eIs\u003c/span\u003e there other code this app depends \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e?}\r\n## Known Bugs\r\n{\u003cspan class=\"hljs-keyword\"\u003eAre\u003c/span\u003e there issues that have \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e yet been resolved that you want \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e let users know you know? Outline \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e issues that would impact \u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e your application. \u003cspan class=\"hljs-keyword\"\u003eShare\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e workarounds that \u003cspan class=\"hljs-keyword\"\u003eare\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e place. }\r\n## Technologies Used\r\n{Tell me about the languages \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e tools you used \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecreate\u003c/span\u003e this app. Assume that I know you probably used HTML \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e CSS. \u003cspan class=\"hljs-keyword\"\u003eIf\u003c/span\u003e you did something really cool \u003cspan class=\"hljs-keyword\"\u003eusing\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eonly\u003c/span\u003e HTML, point that out.}\r\n## Support \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e contact details\r\n{Let people know what \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e they run \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e issues \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e have questions, ideas \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e concerns.  Encourage them \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e contact you \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e make a contribution \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e the code.}\r\n### License\r\n*{Determine the license under which this application can be used.  See below \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e more details \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e licensing.}*\r\nCopyright (c) {\u003cspan class=\"hljs-keyword\"\u003eyear\u003c/span\u003e} **{List \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econtributors\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e company name}**\r\n  \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eLicensing\u003c/h2\u003e\r\n\u003cp\u003eAn open source license details how others can use your code. Adding a license to your repository is a good practice because it is how you state your intent.\u003c/p\u003e\r\n\u003cp\u003eMIT and GPL are the most common licenses. An MIT license means your code is free to use by anyone and you are not liable (Rails and jQuery use an MIT license). GPL also indicates free usage of the code but when used, the resulting work MUST be open source (Linux, Git and Wordpress use GPL).\u003c/p\u003e\r\n\u003cp\u003eFor additional details on choosing a license for your code, visit GitHub's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://choosealicense.com/\"\u003eChoose a License site\u003c/a\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"monday-text-editor-and-github","title":"Monday: Text Editor and Github","type":"WikiPage","content":"\u003ch1\u003eText Editor: Atom\u003c/h1\u003e\r\n\u003cp\u003eWhen we write code, we do it in a text editor. Word processing programs like Microsoft Word are not ideal for writing code because they add styles and formatting that can get in the way of our code. We want plain, raw text without any extras for our coding files.\u003c/p\u003e\r\n\u003cp\u003eIf you have a Mac, your device comes with a text editor called TextEdit which can be found in your Applications list. If you have a PC, the default text editor is Notepad (Windows) or Gedit (Ubuntu), which can be found though the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStart\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emenu. The Mac and Ubuntu Terminal applications also include a console-based text editor called Nano. These text editors allow you to write code with plain, raw text.\u003c/p\u003e\r\n\u003cp\u003eAt Moringa School, we use the free text editor,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAtom\u003c/em\u003e. Atom was designed with the developer in mind by adding features and customization that help developers write their code more productively.\u003c/p\u003e\r\n\u003ch3\u003eInstallation\u003c/h3\u003e\r\n\u003cp\u003eTo use Atom on your device, download the appropriate installer for your operating system at the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://atom.io/\" target=\"_blank\"\u003eAtom website\u003c/a\u003e. Or, on Windows, you can optionally use a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epackage manager\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003esuch as\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://chocolatey.org/packages/Atom\" target=\"_blank\"\u003eChocolatey\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor installation, too.\u003c/p\u003e\r\n\u003ch3\u003eOverview\u003c/h3\u003e\r\n\u003cp\u003eLet's take a quick tour of Atom. When we open the editor, we arrive on an empty file with the name \"untitled\". If we add content to the file, we see the x at the top becomes a blue circle. This indicates that there is content that hasn't yet been saved. We'll save this file as\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eusing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.html\u003c/code\u003eextension to indicate that this will be a document written in HTML. The blue circle returns to a grey x and we know that our file's content has been saved.\u003c/p\u003e\r\n\u003cp\u003eAtom offers developers the ability to customize the editor's settings and shortcuts. Press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e,\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(Mac) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e,\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(Ubuntu and Windows) to see the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSettings\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eview.\u003c/p\u003e\r\n\u003cp\u003eOne setting that we want to make sure we have in place is the tab length. Writing good code means making a habit of using consistent indentation. The standard for indenting lines of code is 2 spaces. We have confirmed that this is set to 2. So, rather than hitting the space bar twice, we can use the tab key for indentation.\u003c/p\u003e\r\n\u003cp\u003eYou won't need to worry too much about all of the customization possibilities now but as you start gaining coding experience, remember that you can return to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSettings\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eview to make updates to keyboard shortcuts, themes, or packages that add other functionality to the editor.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Resources\u003c/h3\u003e\r\n\u003cp\u003eFor more details about using Atom, take a look at the Atom Flight Manual in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://atom.io/docs\" target=\"_blank\"\u003eDocumentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon the Atom website.\u003c/p\u003e\r\n\u003ch1\u003eGit and Github\u003c/h1\u003e\r\n\u003cp\u003eWhen we get started with writing a new program, the last thing we want to happen is to lose any of our hard work. To prevent that terrible possibility from happening, we will save versions of our code on our computer AND also save a version of our code on a location on the web. Later, when we work in teams, there will be more versions of our code as each team member copies the main version to work on, share, review and merge into our final program (and NOT overwrite each other's work!). At Moringa School, we will learn to manage these different versions of our code using two tools:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGit\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGitHub\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eGit is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eversion control system\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat we install on the computers where we write code. Git allows us take a snapshot of our program, called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecommit\u003c/strong\u003e, at important points along the way as we work. You can think of a commit like a save on a document that you are writing. Although unlike a save, once a commit is made, it is permanently stored in the history of the project. A newer commit does not overwrite the previous commit. If we ever want to go back to the place in time where the commit was made, where all the files looked exactly as they did when we committed, we will be able to do so.\u003c/p\u003e\r\n\u003cp\u003eWhen we are ready to save the code from our computers to a location on the web, we will use\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/\" target=\"_blank\"\u003eGitHub\u003c/a\u003e. GitHub allows us to create\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003erepositories\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto store the code and code history for each of our projects. A repository is what we call the container that holds all of the files from our project with all of the commits that have been made to it.\u003c/p\u003e\r\n\u003cp\u003eEach project that we create will be saved to a repository on GitHub. By the end of your time here, you will have a portfolio of your work represented by all of your GitHub repositories. LinkedIn will be your employment resume and GitHub will serve as your coding resume.\u003c/p\u003e\r\n\u003cp\u003eNote that all repositories on GitHub are public by default. For a monthly fee, GitHub offers\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/blog/2164-introducing-unlimited-private-repositories\" target=\"_blank\"\u003eunlimited private repositories\u003c/a\u003e. However, this is entirely optional. Private repos are not required for this course.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eInstallation\u003c/h2\u003e\r\n\u003ch3\u003eWindows\u003c/h3\u003e\r\n\u003cp\u003eIf you do not already have Git Bash installed, download it\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://git-scm.com/download/win\"\u003ehere.\u003c/a\u003e\u003c/p\u003e\r\n\u003ch3\u003eMac\u003c/h3\u003e\r\n\u003cp\u003eTo install Git on your personal Mac, follow these steps:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eInstall Homebrew, a package manager for Mac (skip this step if Homebrew is already installed on your computer): Go to the terminal and copy and paste this code at the prompt:\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ /usr/bin/ruby \u003cspan class=\"hljs-operator\"\u003e-e\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"\u003cspan class=\"hljs-variable\"\u003e$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u003c/span\u003e\"\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethe above command spans one line.\u003c/li\u003e\r\n\u003cli\u003eRun the following command so that Homebrew packages are run before the system versions of the same (which may be old or not what we want):\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003eecho \u003cspan class=\"hljs-string\"\u003e'export PATH=/usr/local/bin:$PATH'\u003c/span\u003e \u003cspan class=\"hljs-prompt\"\u003e\u0026gt;\u0026gt; \u003c/span\u003e~\u003cspan class=\"hljs-regexp\"\u003e/.bash_profile\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eInstall Git with this command:\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ebrew install git\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eUbuntu\u003c/h3\u003e\r\n\u003cp\u003eUbuntu has a powerful software installation tool known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAdvanced Packaging Tool\u003c/strong\u003e, which is accessed with the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eapt\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ecommand. To install Git via apt, run the following commands:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ sudo apt-get \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e\r\n$ sudo apt-\u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e git\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCreating a GitHub Account\u003c/h2\u003e\r\n\u003cp\u003eIf you have not already created a personal GitHub account to store your code, head over to the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/\"\u003eGitHub website\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand sign up for a free account now.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://moringaschool.instructure.com/courses/14/file_contents/viewer/files/github-account-signup.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Github Home Page\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1$IMS-CC-FILEBASE$/github-account-signup.png\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWhen creating an account, consider choosing a username that you will feel comfortable sharing in a professional setting. Also, keep in mind that all of the work that you will be adding to your GitHub account is viewable to the public. Make a commitment to always present the best version of your code. Again, your Github profile will serve as your resume and portfolio of coding abilities. Make sure your username is professional, and code within it is clean and presentable.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eGit Project Setup\u003c/h2\u003e\r\n\u003cp\u003eWe've started using command line to navigate our computer. Let's switch gears a little and expand on what we're able to do using the command line and start using Git and GitHub. In this lesson, we will create a simple webpage and track the process using Git.\u003c/p\u003e\r\n\u003ch3\u003eSet Git username\u003c/h3\u003e\r\n\u003cp\u003eThe first thing we need to do to start using Git is to let Git know who we are by setting our Git usernames.\u003c/p\u003e\r\n\u003ch4\u003eWorking in pairs\u003c/h4\u003e\r\n\u003cp\u003eIn class, we will be pair programming, so the name and email for each partner needs to be set.\u003c/p\u003e\r\n\u003cp\u003eTo accomplish this, we will be using a program called\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/pivotal/git_scripts\" target=\"_blank\"\u003eGit Scripts\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eby\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://pivotal.io/labs\" target=\"_blank\"\u003ePivotal Labs\u003c/a\u003e. To install Git Scripts, first you need to have Ruby installed (instructions\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\"\u003ehere\u003c/a\u003e), then follow the instructions in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/pivotal/git_scripts\" target=\"_blank\"\u003eGit Scripts repository link\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eOnce you have it installed, you will be able to make commits with both your and your partner's names (we'll see what this means in more detail shortly). The second thing you need to do is create a file named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.pairs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the top-most, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eroot\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edirectory of the project. Here's an example of what the file would look like if Grace Hopper and James Bond were working as a pair:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-attribute\"\u003epairs\u003c/span\u003e:\r\n  \u003cspan class=\"hljs-attribute\"\u003egh\u003c/span\u003e: Grace Hopper\r\n  \u003cspan class=\"hljs-attribute\"\u003ejb\u003c/span\u003e: James Bond\r\n\u003cspan class=\"hljs-attribute\"\u003eemail\u003c/span\u003e:\r\n  \u003cspan class=\"hljs-attribute\"\u003egh\u003c/span\u003e: gracehopper\u003cspan class=\"hljs-property\"\u003e@gmail\u003c/span\u003e.com\r\n  \u003cspan class=\"hljs-attribute\"\u003ejb\u003c/span\u003e: bond\u003cspan class=\"hljs-property\"\u003e@jamesbond\u003c/span\u003e.com\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou will insert your and your partner's initials, names, and email addresses in your own\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.pairs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile, but otherwise the file needs to match the example exactly. If not, then the Git Scripts program will run into an error.\u003c/p\u003e\r\n\u003ch4\u003eWorking solo\u003c/h4\u003e\r\n\u003cp\u003eFor most of your programming career, you'll be working by yourself on your personal computer. When that is the case, you need to set your personal info by setting\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eglobal\u003c/strong\u003e, or computer-wide, variables on your computer for your name and email. Here are the commands to run in the terminal to accomplish this (insert your own name and email when you do this):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ git config --\u003cspan class=\"hljs-built_in\"\u003eglobal\u003c/span\u003e user.name \u003cspan class=\"hljs-string\"\u003e\"Albert Einstein\"\u003c/span\u003e\r\n$ git config --\u003cspan class=\"hljs-built_in\"\u003eglobal\u003c/span\u003e user.email einstein\u003cspan class=\"hljs-property\"\u003e@email\u003c/span\u003e.com\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOnce this is done, the name and email are set for any project located anywhere on the computer. If you run these on your personal computer, you only need to run these commands one time for the names to be set for every project.\u003c/p\u003e\r\n\u003ch2\u003eTracking changes with Git\u003c/h2\u003e\r\n\u003cp\u003eAt Moringa School, every project that we create will have its own directory and its own repository. Now we are going to walk through creating a new project and tracking those changes with git.\u003c/p\u003e\r\n\u003cp\u003eThe first thing we need to do is create the project directory. We'll do this just like we have done previously - Git will come in shortly. Open up Terminal and navigate to the folder where you would like to create your projects.\u003c/p\u003e\r\n\u003cp\u003eI am going to create a new folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-projects\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside of my computer's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments \u003c/em\u003edirectory to hold all of the projects that I will create in class.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd \u003cspan class=\"hljs-constant\"\u003eDocuments\u003c/span\u003e\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir moringa-school-projects\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd moringa-school-projects\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we are located in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-projects\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and we can add a new directory for this project. I am going to call this one\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(and just a bit of computer programming history for you: it's traditional to write some form of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehello world\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the first program or example you write in a new language).\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir hello-world\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd hello-world\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we are located inside of our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and we can turn it into a Git repository. We do this by\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einitializing\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eGit inside of the directory (make sure that you do this inside of\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e! Remember, you can always see your location with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ git init\r\nInitialized empty Git repository \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-regexp\"\u003e/Documents/moringa-school-projects/hello-world/\u003c/span\u003e.git/\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs the confirmation message reads, the Git repository has been initialized inside of a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e. But when we try to list the contents of\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e) with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e, where is it?\u003c/p\u003e\r\n\u003cp\u003eDirectories that being with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehidden\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edirectories, which means that they do not show up with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. To view hidden files, we need to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-a\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoption like this, which stands for \"all\":\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ ls \u003cspan class=\"hljs-operator\"\u003e-a\u003c/span\u003e\r\n.git\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere's our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory! Let's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto it and see what's inside:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd .git\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\n\u003cspan class=\"hljs-constant\"\u003eHEAD\u003c/span\u003e        description info        refs\r\nconfig        hooks       objects\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we're never actually going to be touching any of these files. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory is where all of the changes we make to our project will be tracked. Whenever we add, edit, or delete files, Git will be keeping track of those changes in here. This is actually why the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory is hidden in the first place - to prevent us from making any changes that could interfere with Git's job.\u003c/p\u003e\r\n\u003cp\u003eLet's navigate back up to our main project directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e ..\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that we've set up our Git repository, we need to tell Git who is working on the project. If you are working solo, you can skip this step - you've already set the global username and email for all projects on your computer.\u003c/p\u003e\r\n\u003cp\u003eUsing the initials set in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, run the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit pair\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit pair gh jb\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you run this command and get a big error that looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e/usr/\u003cspan class=\"hljs-built_in\"\u003elocal\u003c/span\u003e/lib/ruby/gems/\u003cspan class=\"hljs-number\"\u003e2.4\u003c/span\u003e.\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e/gems/pivotal_git_scripts-\u003cspan class=\"hljs-number\"\u003e1.4\u003c/span\u003e.\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e/lib/pivotal_git_scripts/git_pair.rb:\u003cspan class=\"hljs-number\"\u003e167\u003c/span\u003e:\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e `block \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eread\u003c/span\u003e_author_info_from_config\u003cspan class=\"hljs-string\"\u003e': undefined method `[]'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e nil:NilClass (NoMethodError)\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eit means that something is wrong with the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Revisit the file and make sure the file matches and the spacing is correct - feel free to copy and paste the example\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in this lesson, replacing the names with yours and your partner's.\u003c/p\u003e\r\n\u003cp\u003eTo see information about the pair set for a project, you can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git about\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand, which comes from Git Scripts:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs python\"\u003e$ git about\r\ngit user:       Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond\r\ngit email:      grace+james\u003cspan class=\"hljs-decorator\"\u003e@\u003c/span\u003e\r\nGitHub project: NONE\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow our project is set up with a Git repository initialized. Let's start adding files to track!\u003c/p\u003e\r\n\u003cp\u003eCreate an empty file in the project directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch hello-world.html\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow open the project in Atom using the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003eatom .\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand tells the computer to open anything that follows it in Atom. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans current directory, so the entire directory should open up in Atom.\u003c/p\u003e\r\n\u003cp\u003eLet's add some text to\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's what this looks like in Atom:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://moringaschool.instructure.com/courses/14/file_contents/viewer/files/MP-W1D1-03-atom_hello_world.jpg?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Atom\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1$IMS-CC-FILEBASE$/MP-W1D1-03-atom_hello_world.jpg\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe little blue dot on the right of the page tab next to the file name (\u003cem\u003ehello-world.html\u003c/em\u003e) means that the file has unsaved changes. Save the file with\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFile\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSave\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the Atom menu bar.\u003c/p\u003e\r\n\u003cp\u003eWe can see what Git is doing with our files with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git status\r\nOn branch master\r\n\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\n\r\nUntracked files:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e include \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e what will be committed)\r\n\r\n    hello-world.html\r\n\r\nnothing added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e but untracked files present (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e track)\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis is Git telling us, \"I noticed that you added a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e, but unless you use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e, I am not going to do anything with it.\"\u003c/p\u003e\r\n\u003cp\u003eBefore we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add\u003c/code\u003e, let's quickly go over a concept that can be a little confusing when first learning git: the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003estaging environment\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand how it relates to a commit.\u003c/p\u003e\r\n\u003cp\u003eTo reiterate, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecommit\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a record of what files you have changed since the last time you made a commit. A commit is like a save point, and we want to make a commit when we've made a notable change or addition to a project. Commits narrate the development of a project and allow you to go back to the state of a project at any point.\u003c/p\u003e\r\n\u003cp\u003eSo, how do you tell Git which files to put into a commit? This is where the staging environment comes in. As we just saw, when you make changes to a repo, Git notices that a file has changed but won't do anything with it.\u003c/p\u003e\r\n\u003cp\u003eTo add a file to a commit, we first need to add it to the staging environment. To do this, we can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add \u0026lt;filename\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. Here is how we add\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add hello-world.html\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e, we see that Git is tracking\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git status\r\nOn branch master\r\n\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\n\r\nChanges \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be committed:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git rm --cached \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e unstage)\r\n\r\n    new file:   hello-world.html\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOnce you've used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to add all the files you want to the staging environment, you can then tell Git to package them into a commit using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. Let's do that now.\u003c/p\u003e\r\n\u003cp\u003eWhen pairing, we use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit-pair-commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit-pair-commit -m \u003cspan class=\"hljs-string\"\u003e\"Add initial hello world page\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen working solo, we use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Add initial hello world page\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo make a commit, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit-pair-commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand followed by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-m\u003c/code\u003eoption (for \"message\"), followed by a short message describing the commit.\u003c/p\u003e\r\n\u003cp\u003eFor consistency, commit messages should be in present tense and describe the change(s) made. As a rule of thumb, they should complete the phrase, \"This commit will...\". So when we look back at our commit history, we know that this commit will \"add initial hello world page\".\u003c/p\u003e\r\n\u003cp\u003eWe can look at our Git commit history with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e de955b7ef50670e42d21f2366ea09cf517379475\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;grace+james@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Tue May \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e58\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e +\u003cspan class=\"hljs-number\"\u003e0300\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial hello world page\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis command lists the commits made in a repository in reverse chronological order, so the most recent commits show up first. As we can see, this commit has been assigned a unique collection of numbers and letters,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ede955b7ef50670e42d21f2366ea09cf517379475\u003c/code\u003e. From now on, whenever we would like to return to this project exactly as it is right now, we will be able to return to this commit.\u003c/p\u003e\r\n\u003cp\u003eAll right, let's add a short paragraph to our page to introduce ourselves:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first website! I am about to embark on the exciting journey of learning how to code. Won't you join me?\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's check out our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit status\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand see what it tells us:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git status\r\nOn branch master\r\nChanges not staged for \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e what will be committed)\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git checkout -- \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e discard changes \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e working directory)\r\n\r\n    modified:   hello-world.html\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eno\u003c/span\u003e changes added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e/\u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git commit -a\"\u003c/span\u003e)\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGit knows that\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehas been modified, but the changes still need to be added to the staging environment and then committed. Let's do that now, using another option for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git add .\r\n$ git \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e -m \u003cspan class=\"hljs-string\"\u003e\"Add intro paragraph\"\u003c/span\u003e\r\n[\u003cspan class=\"hljs-keyword\"\u003emaster\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003ead09ba] \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e intro paragraph\r\n \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e file \u003cspan class=\"hljs-keyword\"\u003echanged\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e insertion(+)\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis time, we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add hello-world.html\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for the current directory (just like in the case of the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom .\u003c/code\u003e), and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill add any changes in the directory that have not yet been added to the staging environment, so we can add multiple files at the same time.\u003c/p\u003e\r\n\u003cp\u003eLet's look at our project history now:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003ead09ba06206efdf5be66c56b0e425ed56ac70d1\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;grace+james@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Tue May \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e26\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e22\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e +\u003cspan class=\"hljs-number\"\u003e0300\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e intro paragraph\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e de955b7ef50670e42d21f2366ea09cf517379475\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;grace+james@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Tue May \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e58\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e +\u003cspan class=\"hljs-number\"\u003e0300\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial hello world page\r\n    \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the most recent commit is at the top. We can make this a little easier to read by adding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--oneline\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoption like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ git \u003cspan class=\"hljs-built_in\"\u003elog\u003c/span\u003e --oneline\r\n\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003ead09ba Add intro paragraph\r\nde955b7 Add initial hello world page\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe seven-character string before each message is also a unique identifier for the commit and can be used in the same way (we will see how in an upcoming lesson).\u003c/p\u003e\r\n\u003cp\u003eThis may seem like a lot of work for such minor changes on a single web page, but as we start building more projects - and more complex projects - we will see just how useful it is to track changes to our code this way.\u003c/p\u003e\r\n\u003ch2\u003eRemote repositories on GitHub\u003c/h2\u003e\r\n\u003cp\u003eSo far, our code only exists on the machines where they were written. We have been tracking our changes in a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elocal\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eGit repository, which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.git\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirectory we've seen. However, it would be good to have a copy of our work backed up online, especially when our projects grow in size and have real-world implications. More importantly, we will need some way of collaborating with others on our work. When we want to push our work to the world, we will push it to a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eremote\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003erepository on GitHub. In this lesson, we will explore GitHub and how to use it.\u003c/p\u003e\r\n\u003cp\u003eWhat do we mean when we say local and remote? When we work on a repository that we can only access from the computer on which it is saved, we call this a local repository. All the code we have written so far has been written locally. If we want to work on the project from another device, we won't be able to access it. A remote repository, on the other hand, is a repository that is saved in a location outside of the computer where it was created, but still accessible by that computer (and other computers as well). At Moringa School, we will generally be saving our work to remote repositories.\u003c/p\u003e\r\n\u003cp\u003eLet's start by pushing our local repository to a remote repository on GitHub.\u003c/p\u003e\r\n\u003cp\u003eThe first thing we need to do is create the remote repository on GitHub. Each partner needs to create a repository on their own GitHub account. Both remote repositories will link to the same local repository, but this will give each of you a personal record of the project.\u003c/p\u003e\r\n\u003cp\u003eOnce you're logged in, click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew Repository\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton, which will take you to the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/new\"\u003e\u003cem\u003eCreate New Repository \u003c/em\u003epage\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://moringaschool.instructure.com/courses/14/file_contents/viewer/files/MP-W1D1-03-new_repo_screen-1.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"MP-W1D1-03-new_repo_screen-1.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's go over the options on this page.\u003c/p\u003e\r\n\u003cp\u003eThe text box under\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRepository Name\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis where we enter the name of the repository. You can name it anything you'd like, but give it a name that helps you identify the repository. It makes sense to give it the same name as the project folder for your local repository. For this project, let's use \"hello-world\".\u003c/p\u003e\r\n\u003cp\u003eUnderneath the repository name, you can enter a description. The description is optional, but it can be helpful for others and your future self to have a quick reference for the description of the repository content.\u003c/p\u003e\r\n\u003cp\u003eYou have the option to make a repository public or private. Because we're using free GitHub accounts, we can only select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePublic\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoption. As the page notes, anyone can see a public repository, but you can choose who has permission to contribute to it.\u003c/p\u003e\r\n\u003cp\u003eThe last option asks whether you would like to initialize the project with a README. A README file contains information about the contents of the repository - stuff like the authors, description, setup instructions, and licensing information. Do not select this box. We will explore README files in an upcoming lesson.\u003c/p\u003e\r\n\u003cp\u003eWith the repository name and description set, click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate Repository\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton. You will be taken to a page that looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-04-empty_repo.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"MP-W1D1-04-empty_repo.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWith this empty repository in place, we can push our locally-stored code to the new remote location.\u003c/p\u003e\r\n\u003cp\u003eFirst, we need to tell our local repository that a remote repository even exists somewhere online. We do this by adding it to Git's record. Just like Git wouldn't do anything with our files until we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e, it won't acknowledge our remote repository yet, either.\u003c/p\u003e\r\n\u003cp\u003eTo tell the repository about the remote location, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cpp\"\u003e$ git remote add gh https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand takes two arguments:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe remote name, for example\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe remote name can be anything - it's a nickname for the remote repository at the URL provided. In this example, the remote repository belongs to one of our partners, Grace Hopper, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare their initials. When working in a pair, it's a good idea to give your remote repository your initials as a nickname, because it clearly differentiates the two remotes and is easy to remember.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe remote location or URL, for example\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://github.com/moringaschool/hello-world.git\u003c/code\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThis is the URL found in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eQuick setup\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebox at the top of the empty repository page\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003ePlease note that your command should include your repository info. Our URL is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://github.com/moringaschool/hello-world.git\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this example, but you want to replace this with your own URL.\u003c/p\u003e\r\n\u003cp\u003eNow Git knows that there is a remote repository, and it's where you want your local repository changes to go. To confirm that Git has done this successfully, run this command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit remote -v\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe response looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs nginx\"\u003e\u003cspan class=\"hljs-title\"\u003egh\u003c/span\u003e    \u003cspan class=\"hljs-url\"\u003ehttps://github.com/moringaschool/hello-world.git\u003c/span\u003e (fetch)\r\ngh    \u003cspan class=\"hljs-url\"\u003ehttps://github.com/moringaschool/hello-world.git\u003c/span\u003e (push)\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-v\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoption will give you a list of all of the remote repositories that your local repository knows about. There's one repository and it’s listed twice, which means it is available to push information to and to fetch information from. If both you and your partner have added remote repositories, then both repositories should be listed.\u003c/p\u003e\r\n\u003cp\u003eWe are finally ready to push our code from local to remote. In other words, we will be copying it from our machine to the location on GitHub. To do this, we will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit push\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e gh master\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit push\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand takes two arguments.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFirst, we provide the name of the remote repository location. In this example, we wanted to push to the remote repository we just created, so we can use the nickname\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat we created.\u003c/li\u003e\r\n\u003cli\u003eSecond, we provide the name of the version of the code (also known as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebranch\u003c/strong\u003e, which we will learn more about in an upcoming lesson) we are pushing. As we start building more complex projects, we will have multiple versions of code at various stages of development on a single, local device. At the moment, we only have one branch, the \"master\" branch.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name given to this branch by Git, and the master is always considered the master copy.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWhen you push to GitHub on a computer where the user has not been set globally, the terminal will prompt you to enter your GitHub login information. This is GitHub protecting your account - only the owner of a repository is allowed to push to it. Once you have entered your login information, the terminal will give you some feedback that it is pushing your code to the remote repository. Go ahead and refresh the repository's page on GitHub, and you can see the file structure of the project, and the same commits that we saw in the terminal.\u003c/p\u003e\r\n\u003ch2\u003eCloning from GitHub\u003c/h2\u003e\r\n\u003cp\u003eAll right, we've pushed code from our personal machine up to GitHub. But as we mentioned before, one of the big advantages to using a service like GitHub is how it lets us collaborate with others on the same code. This requires copying the code from the remote repository into a local repository, a process called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecloning\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo practice this, first, we need to remove the local repository from our personal computers. If you are in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory (check with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epwd\u003c/code\u003e):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ \u003cspan class=\"hljs-built_in\"\u003epwd\u003c/span\u003e\r\nDocuments/moringa-school-projects/hello-world\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMove up one directory with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd ..\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand remove the folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd ..\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003erm -rf hello-world\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow the folder is gone, and we can clone our remote repository back onto our computers. On the main GitHub page for the repository, find the button that says\u003cspan\u003e \u003c/span\u003e\u003cem\u003eClone or download\u003c/em\u003e. A dialog box opens containing the URL for the repository. This is the same URL as the one we used for the remote. Copy the URL (either select the text and copy it manually, or click on the clipboard button next to the URL), and we will clone the repository using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit clone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand in the terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003eclone\u003c/span\u003e https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe terminal will print some feedback that it has successfully cloned the repository. Go ahead and list the contents of the folder and see that we now have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nhello-world\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we navigate into\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit log\u003c/code\u003e, we can see that our previous commits are still part of this repository.\u003c/p\u003e\r\n\u003cp\u003eTake a look at the Git remotes for the repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cpp\"\u003e$ git remote -v\r\norigin    https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git (fetch)\u003c/span\u003e\r\norigin    https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git (push)\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eWe see that the remote repository is automatically linked, and by default, it has the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e. If we make changes to our local repository and want to push those to GitHub, we will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eremote nickname, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin master\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne more (important) thing about Git repositories. Make sure that you never create or clone a repository inside of an existing repository. This creates something called a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esubmodule\u003c/em\u003e, which has an icon like the one here for\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewild-beasts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon GitHub:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://moringaschool.instructure.com/courses/14/file_contents/viewer/files/MP-W1D1-06-submodule.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1$IMS-CC-FILEBASE$/MP-W1D1-06-submodule.png\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThere are cases when you would want to do this, but for our purposes, it will only interfere with our Git process.\u003c/p\u003e\r\n\u003cp\u003eAll right! We've just covered\u003cspan\u003e \u003c/span\u003e\u003cem\u003ea lot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof ground here! Don't worry about memorizing everything that we did here, and use the cheat sheet for reference when using Git in your daily workflow. It's okay if everything isn't making perfect sense right now - we will be using Git every day while at Moringa School, and like anything else, it will become more natural with practice.\u003c/p\u003e","frontPage":false},{"exportId":"monday-array-mapping-and-code","title":"Monday: Array Mapping and Code","type":"WikiPage","content":"\u003ch2\u003eArray Mapping\u003c/h2\u003e\r\n\u003cp\u003eWe just learned how to use the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to loop through every element of an array. Now let's briefly explore\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e, a frequently-used array method that allows us to loop through every element of an array and\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo something\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto each element. Conveniently, the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod does not actually change the array it's called on, but it returns a new transformed array.\u003c/p\u003e\r\n\u003cp\u003eLet's say that we want to double every number in an array. We could do it with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis way:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e numbers = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e];\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e doubledNumbers = [];\r\n    numbers.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(number)\u003c/span\u003e \u003c/span\u003e{\r\n      doubledNumbers.push(number * \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n    });\r\n\r\n    alert(doubledNumbers);\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis works fine, but by using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can make the intent clearer, and our code even DRY-er:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e numbers = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e];\r\n\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e doubledNumbers = numbers.map(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number * \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e;\r\n  });\r\n\r\n  alert(doubledNumbers);\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere instead of looping through an array, we're simply saying that we want to transform one array into another. Note that the original array has not been changed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u0026gt; \u003cspan class=\"hljs-tag\"\u003edoubledNumbers\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-attr_selector\"\u003e[2, 4, 6, 8, 10]\u003c/span\u003e\r\n  \u0026gt; \u003cspan class=\"hljs-tag\"\u003enumbers\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-attr_selector\"\u003e[1, 2, 3, 4, 5]\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe logic inside of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan be as simple or as complicated as you want. Whatever you return will become the corresponding element of the new array. That is, when we say\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ereturn number * 2;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the example above, we're saying that each individual element of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray will be equivalent multiplying the corresponding element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eold\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray by two.\u003c/p\u003e\r\n\u003cp\u003eSo, continuing with this example, the first element in the original array is 1. Since we're multiplying each element by 2 in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, the first element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray will be 2. The second element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoriginal\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray is 2. So the second element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray will be 4, and so on.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eFor more information, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"\u003ethe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eentry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein the Mozilla Developer Network's JavaScript documentation.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Array mapping\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: In the Array Mapping lesson we learned how to use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return a new array with some sort of manipulation or calculation performed on each element. Let's further hone our array mapping skills by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a callback function? How is it different from a plain ol' everyday function?\u003c/li\u003e\r\n\u003cli\u003eWhat portion of the following code is the callback function? What does this particular callback function do?\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003ejavascript\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tripledNumbers = numbers.map(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number * \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eDoes\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ealter the array it is called upon?\u003c/li\u003e\r\n\u003cli\u003eDiscuss with your partner when you would use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand when it might be better to use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eArray Mapping Practice\u003c/h3\u003e\r\n\u003cp\u003eComplete the following in the JavaScript console or on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake an array of numbers, then use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return an array containing each of the original numbers + 1.\u003c/li\u003e\r\n\u003cli\u003eCreate an array of words. Use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return an array of the same words in all uppercase.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: forEach and Map\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: As you saw, looping and mapping are powerful concepts that can manipulate large amounts of data relatively quickly. Practice each by completing the exercises below using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand/or\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eRemember,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunderstanding\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the goal here. You're absolutely not expected to complete everything listed on this page. In fact, there is often intentionally\u003cspan\u003e \u003c/span\u003e\u003cem\u003emore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtent than can reasonably be completed in a single day. (This allows students an opportunity to later review concepts without having to repeat exercises they've previously done). Focus on understanding the concepts, not on speed.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e. When might you use one over another?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eGroceries\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a form that allows a user to input items they need at the store.\u003c/li\u003e\r\n\u003cli\u003eWhen the user submits the form, hide the form and display the list of items in alphabetical order, all uppercased.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eHint: To do this, build an array of the inputted items. (Make sure you don't include any blank fields.) Sort the array in alphabetical order. Make a new array with each entry uppercased (don't just uppercase them when you display them). Then, display the sorted list of things as list items inside a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eExplore the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\"\u003earrays entry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eof the Mozilla Developer Network JavaScript documentation to research what method might be used to sort arrays.\u003c/p\u003e\r\n\u003ch3\u003eWord Play\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a form where users may enter a sentence.\u003c/li\u003e\r\n\u003cli\u003eTurn that sentence into an array using the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\"\u003esplit method\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eThen, loop through this array to build a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray out of every word in the sentence that is 3 or more characters in length.\u003c/li\u003e\r\n\u003cli\u003eFinally, reverse the order of the new array,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\" target=\"_blank\"\u003ejoin\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eit back together into a string, and display it to the user.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eBuild a Deck\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop within another\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop to build an array representing a deck of cards. A deck consists of 52 cards - 13 ranks in each of 4 suits.\u003c/li\u003e\r\n\u003cli\u003eThen, display a list of every card in the deck. (Hint: Each element of the array should read something like \"ace of spades\" or \"4 of hearts\").\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe start of your output should look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/uow14lm92e275xg/deck.png\" alt=\"deck\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003ch4\u003eFilter, Reduce\u003c/h4\u003e\r\n\u003cp\u003eLook into the Array\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\"\u003efilter\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\"\u003ereduce\u003c/a\u003e\u003cspan\u003e \u003c/span\u003emethods. Refactor some of the projects above to make use of these methods.\u003c/p\u003e\r\n\u003ch4\u003eWord Order\u003c/h4\u003e\r\n\u003cp\u003eCreate a website that lets users input a block of text and returns a list of all the unique words and how many times they appeared.\u003c/p\u003e\r\n\u003cp\u003eFor example, if the user inputs \"hello world world\", the page should show:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ehello 1\u003c/li\u003e\r\n\u003cli\u003eworld 2\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf you finish, and feel comfortable with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloops, try to complete the above exercise but instead order the list by the number of appearances - greatest to least. For words that appear the same amount of times, order by which word appeared first.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eHint (and sneak peek at next week): Try creating and playing with an object hash and its contents in the JavaScript console:\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u0026gt; words = {programming: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, fun: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e};\r\n  \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e {programming: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, fun: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e}\r\n  \u0026gt; \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.keys(words);\r\n  [\u003cspan class=\"hljs-string\"\u003e\"programming\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"fun\"\u003c/span\u003e]\r\n  \u0026gt;words.programming\r\n  \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e\r\n  \u0026gt;words.fun\r\n  \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u0026gt;words.nothing\r\n  \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n  words.fun\u0026gt;words.programming\r\n  \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs the JavaScript business logic separate from the user interface logic?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive and easy to understand?\u003c/li\u003e\r\n\u003cli\u003eIs code properly indented throughout?\u003c/li\u003e\r\n\u003cli\u003eAre loops being used correctly? What about mapping?\u003c/li\u003e\r\n\u003cli\u003eAre there any loops that could instead be replaced with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-readme-practice","title":"Tuesday: README practice","type":"WikiPage","content":"\u003cp\u003eGoal: Add some READMEs to your projects and understand what goes into them.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat are some features that make up a good README?\u003c/li\u003e\r\n\u003cli\u003eHow is Markdown similar to HTML? How is it different?\u003c/li\u003e\r\n\u003cli\u003eWhat is an open source license? Why is it a good idea to include one?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eAdd a README to one of each of you and your partner's projects.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-practice-floats","title":"Wednesday: Practice: Floats","type":"WikiPage","content":"\u003cp\u003eGoal: Practice using floats to organize webpage layouts. Use concepts from the lesson on floats, such as wrapping text around an image, creating sidebars, and creating pages with multiple columns.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat are some of the options available to us for using floats?\u003c/li\u003e\r\n\u003cli\u003eWhat are we able to accomplish using floats?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson and create the page about mangoes and pay attention to how floats are used to change the layout of the page.\u003c/p\u003e\r\n\u003ch3\u003eBand Website\u003c/h3\u003e\r\n\u003cp\u003eCreate a website for your favorite band. Give the page a sidebar for upcoming shows. Create an \"About the band\" section and a section for images, and use floats to set the layout of the page.\u003c/p\u003e\r\n\u003ch3\u003ePhotographer Portfolio\u003c/h3\u003e\r\n\u003cp\u003eCreate a website for a photographer. Divide the page into columns that feature different categories of photography: For example, one for portraits, one for nature, and one for weddings.\u003c/p\u003e\r\n\u003ch3\u003eResume\u003c/h3\u003e\r\n\u003cp\u003ePull up your resume from the divs and spans practice, and use floats to divide the different sections into columns and rows. For example, the skills section can be broken into columns to save vertical space.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-introduction-to-bootstrap","title":"Thursday: Introduction To Bootstrap","type":"WikiPage","content":"\u003cp\u003eIf making websites look pretty is not your idea of a good time, don't worry: this isn't a design course. Still, there may come a time that you will need to understand enough CSS to be able to integrate a designer's CSS with your code. You may also be responsible for a project that requires you to make small changes to the CSS every now and then. Running into CSS is unavoidable as a web developer, and this is why it's so important for both web developers and designers to have some understanding of CSS basics.\u003c/p\u003e\r\n\u003cp\u003eFurthermore, you may want to build an app or website that looks nice, without spending a lot of time or effort on the user interface. In that case, front-end frameworks are immensely useful. We will spend this lesson learning what a front-end framework is, and getting familiar with one of the most popular front-end frameworks, Bootstrap.\u003c/p\u003e\r\n\u003ch2\u003eFront-end Frameworks\u003c/h2\u003e\r\n\u003cp\u003eWhen we use the term front-end in web development, we are talking about the parts of the website with which the user interacts: things like menus, buttons, images, navigation bars, and so on. The term framework refers to a package made of a structure of files and folders with pre-written code that can be used to get a project up and running more easily than building it from the ground up. Thus, a front-end framework is a set of code that helps us set up the front end of our websites. That is, the CSS, designs, layouts, and user interactions.\u003c/p\u003e\r\n\u003ch2\u003eBootstrap\u003c/h2\u003e\r\n\u003cp\u003eBootstrap is one of the most popular front-end frameworks. It allows developers to create clean, responsive, professional-looking websites relatively quickly and easily. Originally developed by Twitter as an internal tool to encourage consistency, Bootstrap was later released to the public as a free and open-source framework.\u003c/p\u003e\r\n\u003cp\u003eBootstrap is essentially a set of pre-built code that contains global CSS settings for various front-end elements in the form of fonts, colors, buttons, menus, table, a very useful grid system for page layout, and much more. One of the major advantages of using Bootstrap is that it is responsive, meaning that it has breakpoints and media queries built in, so any Bootstrap elements will automatically reformat according to the user's viewport size.\u003c/p\u003e\r\n\u003cp\u003eFeel free to visit Bootstrap's website\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/\" target=\"_blank\"\u003ehere\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand read more about it.\u003c/p\u003e\r\n\u003cp\u003eIf you're curious to see what Bootstrap can do, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://expo.getbootstrap.com/\" target=\"_blank\"\u003eSites Built With Bootstrap\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto see some of the possibilities.\u003c/p\u003e\r\n\u003cp\u003eOver the next few lessons, we will learn how to implement Bootstrap into our own web pages so that we can quickly create polished, professional sites with less effort than it would take to produce the same results on our own.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-introduction-to-css","title":"Tuesday: Introduction to CSS","type":"WikiPage","content":"\u003ch1\u003eIntroduction to CSS\u003c/h1\u003e\r\n\u003cp\u003eSo far, the sites we've made have not been very exciting. In this lesson, we're going learn how to change that with CSS, which stands for Cascading Style Sheets. CSS is a language that lets us add style to our webpages. It lets us separate the page content and structure from the style and appearance.The\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecascading\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the name refers to the way that styles are applied to an element - we'll get more into that later.\u003c/p\u003e\r\n\u003cp\u003eLet's go back to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eproject. Open up the project in Atom and add a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the main project directory. Create a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside of the folder. Your directory structure should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-01-folder_structure_css.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eFirst, we need to tell the HTML document to use this CSS. The reference typically goes in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003esection like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement links the HTML and CSS files together. It must be placed within the head of the HTML file. It is a self-closing tag and requires the following three attributes:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003ehref\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- like the anchor element, the value of this attribute must be the address, or path, to the CSS file.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003etype\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- this attribute describes the type of document that you are linking to (in this * case, a CSS file). The value of this attribute should be set to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etext/css\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003erel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- this attribute describes the relationship between the HTML file and the CSS file. Because you are linking to a stylesheet, the value should be set to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estylesheet\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow let's add some CSS to\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto see what this looks like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSave the file and refresh the page, and see that the header is now blue.\u003c/p\u003e\r\n\u003cp\u003eWhat we just wrote is known as a CSS rule. It is made of two parts: the selector and the declaration. In the above example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the selector, or the HTML tag to which the rule is applied. Everything inside of the curly braces is the declaration, which defines of the styles to be applied to the selector. The declaration is made of two parts: the property (\u003ccode\u003ecolor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this case) and the value (\u003ccode\u003eblue\u003c/code\u003e), and they are separated by a colon.\u003c/p\u003e\r\n\u003cp\u003eA declaration can contain more than one property. Each property is separated by a semicolon:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice the indentation and spacing here: properties are indented two spaces from the selector.\u003c/p\u003e\r\n\u003cp\u003eLet's add some more rules:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: green\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-family\u003c/span\u003e: sans-serif\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eline-height\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e40px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGo ahead and refresh the page and see the changes. All these rules are pretty straightforward.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, we've set the color to green, the font style to italic, and the text alignment to the center of the page.\u003c/li\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, we've set the font family to _sans serif), which is a type of font.\u003c/li\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eul\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, we've set the line height to 40 pixels -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epx\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis short for \"pixels\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIt's worth noting here that named colors, such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e, are not commonly used. More likely, you will see three- or six-digit hexadecimal codes to define color, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: \u003cspan class=\"hljs-hexcolor\"\u003e#00f\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eor this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n\u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: \u003cspan class=\"hljs-hexcolor\"\u003e#0000ff\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBoth of these are equivalent to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue\u003c/code\u003e. There are numerous tools online for picking colors and hex codes, such as\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://htmlcolorcodes.com/\"\u003ehtmlcolorcodes.com\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou may be wondering why we made\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eitalic using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-style\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty instead of using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003etags like we did in a previous lesson. There are a few reasons for this. First, we can modify the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag just like any other HTML tag.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eemphasize\u003c/em\u003e, and eventually, we may decide that we want to emphasize text by bolding it instead of italicizing it, which we may not want for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003es. Second, one of the advantages of CSS is that we can change style in many places at the same time. What happens when we add another\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e? We have to add\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003es again so that it has the same formatting. Say we want our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003es to be bold as well. Now we have to add\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003etags We end up repeating ourselves with many opportunities to miss something. By using CSS, we only need to change the style in one place, and every\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon every page that uses that CSS file will be updated.\u003c/p\u003e\r\n\u003cp\u003eLet's take a second to reflect on this last point. It's in the nature of websites that even after they're built, they are bound to change: there will be additions, deletions, overhauls, and more. CSS gives us some powerful tools to change what we've built. Remember: good code is code that is easy to change.\u003c/p\u003e\r\n\u003cp\u003eTo see the power of using CSS, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.csszengarden.com/\"\u003eCSS Zen Garden\u003c/a\u003e. Clicking one of the links on the right side of the page will apply a different stylesheet to the same HTML. The page is totally transformed without making any changes in the HTML. Your goal in writing CSS should be to allow to Zen Garden-like changes to your styles.\u003c/p\u003e","frontPage":false},{"exportId":"monday-arithmetic","title":"Monday: Arithmetic","type":"WikiPage","content":"\u003ch2\u003eArithmetic\u003c/h2\u003e\r\n\u003cp\u003eNow that you have the basics of HTML and CSS under your belt, we're going to start learning our first programming language: JavaScript. Remember, web browsers can only do three things: display content with HTML, style it with CSS, and change what's displayed with JavaScript. Because all browsers support JavaScript, it's the de facto programming language of the web.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWe're going to take a detour away from the aesthetically pleasing and obviously useful world of web pages, so that we can learn some programming fundamentals. But don't worry! We'll be back in no time.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLike earlier, I'm going to assume you're using Google Chrome for these lessons. Chrome includes a nice little console that lets you type in JavaScript code. To access it, click on the ☰ button, go to the More Tools menu, and click Developer Tools. Go to the Console tab on the window that pops up at the bottom of the screen. As a shortcut, you can also press Cmd + Option + J on a Mac or Ctrl + Shift + I on a PC.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere at the \u0026gt; prompt, you can type JavaScript and see what it does. Try typing 1 + 2; and pressing Enter.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eCongratulations! You just ran your first JavaScript code.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eYou should see something like:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\nDon't you dare copy \u0026amp; paste!\u003ccode\u003e\u0026gt; 1 + 2;\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e3\u003c/code\u003e\r\n\u003cp\u003eJavaScript took your code -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1 + 2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- evaluated it, and returned the result - 3.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThe semicolon at the end of the line tells JavaScript to run everything before it. You'd think JavaScript would know on its own, wouldn't you?\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eNow try these:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e4 - 3;\u003c/li\u003e\r\n\u003cli\u003e5 * 6;\u003c/li\u003e\r\n\u003cli\u003e10 / 2;\u003c/li\u003e\r\n\u003cli\u003e9 / 2;\u003c/li\u003e\r\n\u003cli\u003e7 + 8 * 9;\u003c/li\u003e\r\n\u003cli\u003e(7 + 8) * 9;\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTry some other arithmetic yourself. Play around with the % operator, called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emodulo\u003c/strong\u003e. It will give you the remainder of dividing two numbers. Don't be fooled into thinking it has something to do with percentages!\u003cem\u003e+, -, *, /,\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003e%\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eare called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eoperators\u003c/strong\u003e. An operator is a special character (or characters) that indicates an action to be performed. Try dividing 0 by 0. The result,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e, stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot a number\u003c/em\u003e. In JavaScript,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis actually considered a type of number (bizarre as that may seem). Try dividing any other number by 0. The result,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eInfinity\u003c/code\u003e, is also a number in JavaScript.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Arithmetic\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eFrom the above section, we have learnt:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to access the JavaScript Console\u003c/li\u003e\r\n\u003cli\u003eAddition, subtraction, multiplication, and division using JavaScript\u003c/li\u003e\r\n\u003cli\u003eHow to use the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e%\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoperator\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans not a number but is actually considered a type of number\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBegin getting comfortable with these concepts by completing the practice exercises listed below. Soon enough, they'll be second nature!\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eMake sure you understand the following before moving on:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e%\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoperator? How is the action it performs different than simply dividing?\u003c/li\u003e\r\n\u003cli\u003eHow can we access the JavaScript console?\u003c/li\u003e\r\n\u003cli\u003eWhen might we see\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eComplete the following exercises to practice arithmetic in JavaScript:\u003c/p\u003e\r\n\u003ch3\u003eAdd:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e77 to 99\u003c/li\u003e\r\n\u003cli\u003e34 to 1233\u003c/li\u003e\r\n\u003cli\u003e-53 to 99\u003c/li\u003e\r\n\u003cli\u003e9,092 to -12312\u003c/li\u003e\r\n\u003cli\u003e943,456,575 to 39,087,092,348,570\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eSubtract:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e99 from 665\u003c/li\u003e\r\n\u003cli\u003e34 to 1233\u003c/li\u003e\r\n\u003cli\u003e555 from 23\u003c/li\u003e\r\n\u003cli\u003e7,912 from 88888\u003c/li\u003e\r\n\u003cli\u003e6,348,709,234 from 87,023,984,709,871,234.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eMultiply:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e89 and 54\u003c/li\u003e\r\n\u003cli\u003e932 and 1,900\u003c/li\u003e\r\n\u003cli\u003e-34 and 8\u003c/li\u003e\r\n\u003cli\u003e25 and 700\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eDivide:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e1008 by 7\u003c/li\u003e\r\n\u003cli\u003e23423 by 75\u003c/li\u003e\r\n\u003cli\u003e90 by 3\u003c/li\u003e\r\n\u003cli\u003e9,870,834,205,987 by 324\u003c/li\u003e\r\n\u003cli\u003eA number by 0.\u003c/li\u003e\r\n\u003cli\u003e0 by 0.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFind the remainder of dividing the following numbers:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e1008 by 7\u003c/li\u003e\r\n\u003cli\u003e23423 by 75\u003c/li\u003e\r\n\u003cli\u003e90 by 3\u003c/li\u003e\r\n\u003cli\u003e9,870,834,205,987 by 324\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-git-merging","title":"Tuesday: Git Merging","type":"WikiPage","content":"\u003cp\u003eIn the last lesson we explored creating and managing multiple branches in a single Git repository. As we learned, branches allow us to create multiple copies of our code. These copies may be used to experiment with implementing new code, without putting the \"final version\" or master branch at risk of bugs or errors.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, branches can be used to simply try out different options before deciding which should end up in the final iteration of the project; like we did in the previous lesson with different sets of CSS styles.\u003c/p\u003e\r\n\u003cp\u003eHowever, once we confirm the code located in a feature branch works, and that we want to include it in the final version of our project, we need to integrate this code into the master branch that represents our final product. The act of incorporating code from multiple branches together is called **merging**. In this lesson, we'll walk through merging branches together in our example project.\u003c/p\u003e\r\n\u003ch2\u003eMerging Branches\u003c/h2\u003e\r\n\u003cp\u003eLet's say we've decided to use the CSS we wrote in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch in the final version of our project. Since the master branch represents the final product, we'll need to merge the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo merge two branches you must first navigate to the branch you'd like to introduce new code into. In our case, this is the master branch, because we'd like to integrate the CSS we created in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto see where we are currently located:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n  master\r\n* \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you followed along with the previous lesson exactly, you should still be located in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e. Let's navigate into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git checkout\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit checkout master\r\n\u003cspan class=\"hljs-constant\"\u003eSwitched\u003c/span\u003e to branch \u003cspan class=\"hljs-string\"\u003e'master'\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to confirm we've successfully navigated to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n  \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git merge\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to bring the contents and commits of an outside branch into our current branch. In our case, we'll bring the commits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch we are currently located in. We'll run the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git merge \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis should result in something that looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-title\"\u003eUpdating\u003c/span\u003e 982b0f2..d5bae64\r\nFast-forward\r\n css/styles.css | \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e ++++++++++++++++-\r\n \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e file changed, \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e insertions(+), \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e deletion(-)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto view our commit history:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e d5bae6406669988e154608ce990e08fed51e9cb3\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e00\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    Make \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e font sans-serif style.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003ef2d9510cdc76736c7c5cf7e5d56264cd405fcd1\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit red theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;gracehopper@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;bond@\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the two most recent commits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare now part of the commit history here in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. This is because we merged\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. This means all code and commits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehave been incorporated into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, too.\u003c/p\u003e\r\n\u003cp\u003eThe commit structure of our project across all branches currently looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-18-flow_chart_4.png\" width=\"820\" height=\"747\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice that merging\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas brought all commits previously exclusive to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehere in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. Also, notice that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommits don't instantly disappear when we merge them into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. They still exist in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003ch3\u003eDeleting Branches\u003c/h3\u003e\r\n\u003cp\u003eAfter successfully merging a branch (always confirm all of the branch's commits are present), you may delete it if you do not plan on using it further. This is safe to do because all commits\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eonce contained are now present in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. So, we don't risk losing any work.\u003c/p\u003e\r\n\u003cp\u003eWe can delete a branch using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch -D\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch -\u003cspan class=\"hljs-constant\"\u003eD\u003c/span\u003e red_theme\r\n\u003cspan class=\"hljs-constant\"\u003eDeleted\u003c/span\u003e branch red_theme (was d5bae64).\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand see\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas been removed from the repository entirely:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, since we opted to integrate the styles in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e, we no longer need the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch either. We'll delete it at this time, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch -\u003cspan class=\"hljs-constant\"\u003eD\u003c/span\u003e blue_theme\r\n\u003cspan class=\"hljs-constant\"\u003eDeleted\u003c/span\u003e branch blue_theme (was \u003cspan class=\"hljs-number\"\u003e268363\u003c/span\u003ea).\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eKnow that merging doesn't always go quite this smoothly, unfortunately. If multiple branches contain edits to the same lines of code, Git won't know which edit should supersede which, and requires the developer to manually intervene (this primarily occurs when branches are working on the same code simultaneously, and both attempt to merge with master). This is known as a merge conflict.\u003c/p\u003e\r\n\u003cp\u003eHowever, we shouldn't encounter any merge conflicts quite yet. For now, simply make sure you're familiar with the general concepts of branching and merging, and able to create branches for use with GitHub Pages. We'll explore merge conflicts, what they look like, and how to resolve them later on.\u003c/p\u003e\r\n\u003cp\u003eAs you can see, merging and branching in Git is a powerful, complex feature. However, don't feel overwhelmed if you don't yet have a handle on everything we've covered in these past two lessons. Feel free to refer back to this content whenever necessary. Soon enough, branching and merging will become second nature!\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-looping-with-for","title":"Tuesday: Looping with \"For\"","type":"WikiPage","content":"\u003ch1\u003eLooping With for\u003c/h1\u003e\r\n\u003cp\u003eLet's continue with looping in Javascript.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a nice, easy-to-read, easy-to-understand method, but it's actually a pretty new addition to JavaScript. It also is limited for use on collections of information where processing iterates through each element in the collection. Let's take a look at a more traditional way of looping called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efor loop\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (var \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e \u0026lt;= \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n    alert(\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e);\r\n  }\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop works:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement takes three parameters: initialization, condition, and final expression.\u003c/li\u003e\r\n\u003cli\u003eThe initialization parameter lets you initialize a variable at the start of the for loop. In this case, we've initialized a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat starts at 1. This is the starting place for the loop. The initialization parameter is executed\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe loop runs.\u003c/li\u003e\r\n\u003cli\u003eThe condition parameter tells the loop when to stop running - or more accurately when to keep running. The loop will stop when the condition is no longer true. In our example, when the index variable is NOT less than or equal to 3, the loop will stop. Until then, it will keep going. The condition is evaluated every time the loop runs.\u003c/li\u003e\r\n\u003cli\u003eThe final expression parameter usually changes the initial value in some way; often by incrementing or decrementing it. In our example, the index variable will be increased by 1\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter each time the loop is executed\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eEach time the loop runs, the code within the loop will pop up an alert with the number of the pass we're on (index).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eHere's an example we saw in the last lesson re-written using a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop instead of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003evar languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Javascript'\u003c/span\u003e];\r\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (var \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e \u0026lt; languages.\u003cspan class=\"hljs-keyword\"\u003elength\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n    alert(\u003cspan class=\"hljs-string\"\u003e'I love '\u003c/span\u003e + languages[\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e] + \u003cspan class=\"hljs-string\"\u003e'!'\u003c/span\u003e);\r\n  }\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere is a new concept in this loop:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages.length\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not a method. Notice it's missing the parentheses at the end. Length is a property on every array we create. Strings also have this property, e.g.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e'foobar'.length\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\r\n    \u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Javascript'\u003c/span\u003e];\r\n    \u0026gt; languages.length;\r\n        \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e school = \u003cspan class=\"hljs-string\"\u003e\"Moringa School\"\u003c/span\u003e;\r\n    school.length;\r\n        \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we explore objects next week, we will talk more about properties but for now, let's continue looping.\u003c/p\u003e\r\n\u003cp\u003eIn the for loop example above, we have an array containing 3 elements. When we first start the loop, we run our initialization statement (\u003ccode class=\"\"\u003evar index = 0\u003c/code\u003e), which creates a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand initializes it with the value\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e0\u003c/code\u003e. We are now done with initialization, which only happens once, when we first enter the for loop. From now on the flow is:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003echeck\u003cspan\u003e \u003c/span\u003e\u003cem\u003econdition\u003c/em\u003e:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex \u0026lt; languages.length\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(continue to step 2 only if condition evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etrue\u003c/code\u003e, otherwise exit out of the for loop)\u003c/li\u003e\r\n\u003cli\u003eexecute code block:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ealert('I love ' + languages[index] + '!');\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eexecute \"final expression\" update statement:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex += 1\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003erepeat, beginning with step 1 above\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eThe first time through the loop index is 0, so languages[index] is \"HTML\". The second time through the loop index is 1, so languages[index] is \"CSS\". The third time through the loop index is 2, so languages[index] is \"Javascript\". The fourth time we try to enter the loop, index is 3 which is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot less than\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages.length\u003c/code\u003e(3), so we don't enter the loop again.\u003c/p\u003e\r\n\u003cp\u003eHere's a chart that may help illustrate the loop flow:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/1kh89c9j4hqbgif/for-loop-languages.png\" alt=\"for loop chart\"\u003e\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eWe previously used a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop to add all the elements of an array together. Let's rewrite that one too with a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003evar total = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n  var summands = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e];\r\n  \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (var \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e \u0026lt; summands.\u003cspan class=\"hljs-keyword\"\u003elength\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n    total += summands[\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e];\r\n  }\r\n  alert(total); \u003cspan class=\"hljs-regexp\"\u003e//\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's a corresponding chart:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/ca68ui2w2q4wqx8/for-loop-summands.png\" alt=\"for loop summands charts\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNote that when\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis 0 here,\u003cspan\u003e \u003c/span\u003e\u003cem\u003esummands[index]\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis 1 because the first element of the array is 1.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis just being used here to refer to which element of the array - it's a bit confusing in this case because the elements of the array are also numbers.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod would have worked just as well in those above cases, but sometimes you'll find yourself in a situations where you need a regular\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop rather than a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop - for instance when you need to run a loop a certain number of times, rather than looping over an array.\u003c/p\u003e\r\n\u003cp\u003eHere's a version of our sum code that uses a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop but doesn't require an array to loop through:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\r\n    \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e total = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e currentNumber = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; currentNumber \u0026lt;= \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e; currentNumber += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n      total += currentNumber;\r\n    }\r\n  alert(\u003cspan class=\"hljs-string\"\u003e\"Total is: \"\u003c/span\u003e + total);\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen the loop begins we initialize our loop variable\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecurrentNumber\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto 1. (Note that we could have used\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eas the variable name here, but\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecurrentNumber\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eseems clearer since we'll be making use of the variable for something other than iterating through a loop; we'll be adding it to\u003cspan\u003e \u003c/span\u003e\u003cem\u003etotal\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eeach time through the loop in addition to using it as an iterator.) We then execute our loop as long as\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecurrentNumber\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis less than or equal to 5, iterating\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecurrentNumber\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eafter each run through the loop. Here's a chart showing the steps:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/uo80ur1fsffxl2e/for-loop-sum.png\" alt=\"for loop sum chart\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe first time through the loop,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 1, which is \u0026lt;= 5, so we go ahead and execute the statement in the code block:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal += currentNumber\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis now 1 after this first time through the loop. At the end of each time through the loop we're incrementing\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e, so\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis now 2.\u003c/p\u003e\r\n\u003cp\u003eThe second time through the loop,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 2, which is still \u0026lt;= 5, so again we execute\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal += currentNumber\u003c/code\u003e, setting total to 3. We again increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe third time through,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 3, so total now becomes 6. And we increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe fourth time through,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 4, so total becomes 10 and then we increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe fifth time through,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 5, so total becomes 15 and we increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe sixth time we try to start going through the loop,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 6, which is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026lt;= 5, so we're done with the for loop. We then show the user an alert that includes the total.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Looping with for\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: In the Looping with for lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe three parameters of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty in JavaScript\u003c/li\u003e\r\n\u003cli\u003eHow to use a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop both with and without arrays\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice utilizing for loops in a variety of ways by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloops? Describe to your partner a specific case in which you would use one over the other.\u003c/li\u003e\r\n\u003cli\u003eHow does a for loop 'know' when to stop looping?\u003c/li\u003e\r\n\u003cli\u003eWhat else can we do with the value we initialize as the first parameter in a for loop?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eCount Up By\u003c/h3\u003e\r\n\u003cp\u003eCreate a program that takes two numbers - one to count to and another to determine what multiple to use to get there.\u003c/p\u003e\r\n\u003cp\u003eHere is some sample input:\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eCount to: 30\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eCount by: 5\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOutput: 5, 10, 15, 20, 25, 30\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eCount to: 50\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eCount by: 7\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOutput: 7, 14, 21, 28, 35, 42, 49\u003c/p\u003e\r\n\u003cp\u003eDon't forget to consider how to handle any input that might be submitted:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eempty values (user just presses enter)\u003c/li\u003e\r\n\u003cli\u003enon-numeric values\u003c/li\u003e\r\n\u003cli\u003enegative numbers\u003c/li\u003e\r\n\u003cli\u003ecount by number is larger than the count to numbers\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eTurn forEach() into For\u003c/h3\u003e\r\n\u003cp\u003eGo back to the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringa-prep.herokuapp.com/#11.html\" target=\"_blank\"\u003elooping practice\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eproblems, and redo one of them with a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop instead of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop.\u003c/p\u003e\r\n\u003ch3\u003eWord Puzzle\u003c/h3\u003e\r\n\u003cp\u003eCreate a website that uses a method to replace vowels in a string with the dash symbol \"-\" to create a word puzzle to solve. Hide the original string when you show the resulting word puzzle, so that another person can try and guess it.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eString Input:\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\"Believe you can and you're halfway there. Robert Mugabe\"\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ePuzzle Output:\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\"B-l--v- y-- c-n -nd y--'r- h-lfw-y th-r-. R-b-rt M-g-b-\"\u003c/p\u003e\r\n\u003cp\u003eDo this\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewithout\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\"regular expressions\".\u003c/p\u003e","frontPage":false},{"exportId":"resource-cheat-sheet-command-line","title":"Resource: Cheat Sheet: Command Line","type":"WikiPage","content":"\u003cp\u003eHere's a quick reference of all of the commands listed in this lesson. Feel free to reference this as you learn the commands - they'll be second nature before you know it.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ pwd\u003c/code\u003e: Prints the path of the current directory to the screen\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ ls\u003c/code\u003e: Lists out the contents of the current folder\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cd directory-name\u003c/code\u003e: Changes the current directory to the one specified\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd ~\u003c/code\u003e: Changes the current directory to the home directory\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cd ..\u003c/code\u003e: Changes the current directory up one level\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ mkdir directory-name\u003c/code\u003e: Creates a new directory (folder) in the current directory with the name specified\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ touch file-name.html\u003c/code\u003e: Creates a new, empty file in the current directory with the name specified\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cp original-file.html new-file.html\u003c/code\u003e: Creates a duplicate copy of the first file listed and gives it the name of the second file listed. Both files still exist.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ mv original-file-name.html new-file-name.html\u003c/code\u003e: Moves the contents of the first file into the second file. Effectively renames the file.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ mv sample-file.html new-location/sample-file.html\u003c/code\u003e: Moves the first file into the folder specified for the second file.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ rm file-name.html\u003c/code\u003e: Removes the file specified.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ rm -rf directory-name\u003c/code\u003e: Removes the folder specified and all of the files inside.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ clear\u003c/code\u003e: Clears the terminal screen.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003efile path\u003c/strong\u003e: The location of a file or folder in the file system. For example:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/MoringaSchool/Pictures/cute-kitten.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the path for the image called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecute-kitten.jpg\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003edirectory\u003c/strong\u003e: Another name for a folder in a file system. For example,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/MoringaSchool/Pictures/cute-kitten.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehas 3 directories:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringaSchool\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePictures\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003ehome directory\u003c/strong\u003e: The highest-level directory on a computer - this is the default directory when you open the terminal.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-strings","title":"Monday: Strings","type":"WikiPage","content":"\u003cp\u003eWe've done a lot with numbers, but there's more to this world than just math. Let's look at words.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"Hello world!\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"Hello world!\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe stuff inside the quotes is called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003estring\u003c/strong\u003e. Strings can include letters, punctuation, and even numbers.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"5674\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"5674\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"!?\u0026amp;\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"!?\u0026amp;\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"Strings are crazy! ;)\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"Strings are crazy! ;)\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhat happens if we don't surround our string with quotes?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; hello;\r\n      x Uncaught \u003cspan class=\"hljs-built_in\"\u003eReferenceError\u003c/span\u003e: hello is not defined (...)\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis doesn't work because JavaScript doesn't know what\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emeans when it's not a string. It looks to see if it's a variable or something similar, and then doesn't find it defined anywhere.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWe can set variables equal to strings:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myString = \u003cspan class=\"hljs-string\"\u003e\"Strings can contain characters like @, $, and %.\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you want to put a quote inside a string, you have two options. Here's the first:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"Quoth the raven, \\\"Nevermore.\\\"\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"Quoth the raven, \"\u003c/span\u003eNevermore.\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe '\\' is called an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eescape\u003c/strong\u003e. It tells JavaScript that the \" that comes right after it is not the end of the string, but just a character inside the string.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eYou can also use single quotes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-string\"\u003e'\"Programming is fun!\", she exclaimed.'\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003eProgramming is fun!\u003cspan class=\"hljs-string\"\u003e\", she exclaimed.\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJavaScript generally doesn't care if you use single or double quotes to indicate a string. If you have a lot of double quotes within the string, using single quotes to indicate the string saves you from having to escape all of the double quotes inside.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Strings\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Strings lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eStrings can include letters, punctuation and numbers\u003c/li\u003e\r\n\u003cli\u003eStrings are surrounded with quotation marks\u003c/li\u003e\r\n\u003cli\u003eVariables can be set equal to strings\u003c/li\u003e\r\n\u003cli\u003eTo escape characters use the \\ character\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice using this fundamental building block of programming by completing the exercises below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we declare a String?\u003c/li\u003e\r\n\u003cli\u003eDo Strings require single or double quotes?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eStrings Practice\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eType a greeting to your best friend.\u003c/li\u003e\r\n\u003cli\u003eSet a variable equal to a string and then display the variable's contents\u003c/li\u003e\r\n\u003cli\u003eMake sure you're clear on the difference between \"9\" with quotes and 9 without.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eMethods\u003c/h2\u003e\r\n\u003cp\u003eNow that you've learned the basics of numbers and strings, let's learn how to manipulate them a bit. First, let's change a number into exponential notation.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eExponential notation is essentially just a way of shortening really long numbers, or really small numbers by removing their zeros. If you're not familiar with exponential notation, here's how it works. Take the number 78.5. In exponential notation, we write it 7.85 * 10. Or take 356.97; in exponential notation, that's 3.5697 * 10\u003csup\u003e2\u003c/sup\u003e. You can also write it as 3.5697e+2.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eExponential notation makes it easy to write very large or very small numbers. For example, 1,000,000,000 becomes 1e+9, and 0.00000002 becomes 2e-8.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWe can use JavaScript to easily change numbers into exponential notation:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-number\"\u003e48432.78\u003c/span\u003e.toExponential();\r\n      \u003cspan class=\"hljs-string\"\u003e\"4.843278e+4\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003etoExponential()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emethod\u003c/strong\u003e. You can think of a method as an action that a number can perform or have taken on it. This method is called on a number to change it to exponential form. JavaScript gives a response to this method's call. The response is \"4.843278e+4\" which is known as the method's\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ereturn value\u003c/strong\u003e. In the example above, we call the\u003cspan\u003e \u003c/span\u003e\u003cem\u003etoExponential()\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethod on the number 48432.78, and the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ereturn value\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the string \"4.843278e+4\".\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eYou can also go in the other direction, and convert out of exponential notation:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-number\"\u003e4.587e2\u003c/span\u003e.toFixed();\r\n      \u003cspan class=\"hljs-string\"\u003e\"459\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoFixed()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will round to the nearest whole number. Here's how we can tell it how many decimal places to use:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-number\"\u003e46.1\u003c/span\u003e.toFixed(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"46.10\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the parentheses is an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eargument\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoFixed()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Arguments provide a bit more information to methods to help them know what they're supposed to do. In this case, the argument is optional. When a method doesn't take an argument, or when the argument is optional and you aren't using it, you still need the parentheses on the end - so you have write\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1.05e3.toFixed()\u003c/code\u003e, not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1.05e3.toFixed\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere's another method that takes an argument:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-number\"\u003e8.12345\u003c/span\u003e.toPrecision(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"8.123\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can also call a method on a variable, since the variable is just standing in for the number it represents:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e8.12345\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; myNumber.toPrecision(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"8.123\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Methods\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Methods section, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to manipulate numbers with methods\u003c/li\u003e\r\n\u003cli\u003eExponential notation\u003c/li\u003e\r\n\u003cli\u003eThe argument to the method is located within the parentheses\u003c/li\u003e\r\n\u003cli\u003eMethods, in JavaScript, are always followed by parentheses\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBegin to practice using methods by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a return value? What does it represent?\u003c/li\u003e\r\n\u003cli\u003eWhat is an argument? How do you provide one to a method in JavaScript?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eMethods Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice using the methods you've learned about:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eConvert the following to exponential notation:\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e9238.479\u003c/li\u003e\r\n\u003cli\u003e98370923874.32\u003c/li\u003e\r\n\u003cli\u003e324.64322\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli\u003eSpecify the number of decimal places each number should have.\u003c/li\u003e\r\n\u003cli\u003eRepeat all of these using a variable set equal to any number you choose.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eString Methods\u003c/h2\u003e\r\n\u003cp\u003eYou can call methods on strings, just like you can with numbers:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"supercalifragilisticexpialidocious\"\u003c/span\u003e.toUpperCase();\r\n      \u003cspan class=\"hljs-string\"\u003e\"SUPERCALIFRAGILISTICEXPIALIDOCIOUS\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOr even call the method on a variable assigned to a string:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e word = \u003cspan class=\"hljs-string\"\u003e\"foo\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; word.concat(\u003cspan class=\"hljs-string\"\u003e\"bar\"\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"foobar\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMethods can be\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003echained\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"foo\"\u003c/span\u003e.concat(\u003cspan class=\"hljs-string\"\u003e\"bar\"\u003c/span\u003e).toUpperCase();\r\n      \u003cspan class=\"hljs-string\"\u003e\"FOOBAR\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcat()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod (which\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003econcatenates\u003c/strong\u003e, or combines, two strings) returns a string, which then has\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoUpperCase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecalled on it. Then,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoUpperCase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the final result.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBy the way, here's a nice shortcut for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcat()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"I love\"\u003c/span\u003e + \u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e + \u003cspan class=\"hljs-string\"\u003e\"Moringa School\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"I love Moringa School\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOr with variables:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sentiment = \u003cspan class=\"hljs-string\"\u003e\"I love \"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animal1 = \u003cspan class=\"hljs-string\"\u003e\"cats\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animal2 = \u003cspan class=\"hljs-string\"\u003e\"dogs;\"\u003c/span\u003e\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; sentiment + animal1;\r\n      \u003cspan class=\"hljs-string\"\u003e\"I love cats\"\u003c/span\u003e\r\n      \u0026gt; sentiment + animal2;\r\n      \u003cspan class=\"hljs-string\"\u003e\"I love dogs\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBack to arguments. String methods can take numbers as arguments, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"caterpillar\"\u003c/span\u003e.charAt(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDid you notice something funny about this example? What's the fifth character of the word \"caterpillar\"? Well, with the way we normally count, \"c\" is the first letter, and \"r\" is the fifth. But JavaScript says that the character at the 5th position is \"p\". That's because computers start counting at zero. So \"c\" is the zeroth letter, and \"r\" is the fourth.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: String Methods\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the string methods lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMethods can be called on strings\u003c/li\u003e\r\n\u003cli\u003eMethods can be chained\u003c/li\u003e\r\n\u003cli\u003eYou can use the + operator on strings in place of the concat() method\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow that we've covered both methods and strings independently, practice common methods meant specifically for strings by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat does 'chaining' a method mean? What does that look like?\u003c/li\u003e\r\n\u003cli\u003eName two string methods.\u003c/li\u003e\r\n\u003cli\u003eName two ways to combine multiple strings together.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eMethods Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice calling methods on strings:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet a variable equal to a string\u003c/li\u003e\r\n\u003cli\u003eCall a method on that variable.\u003c/li\u003e\r\n\u003cli\u003eSet another variable with a string in all uppercase.\u003c/li\u003e\r\n\u003cli\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcat\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod with your two variables.\u003c/li\u003e\r\n\u003cli\u003eNow concatenate them with the shortcut.\u003c/li\u003e\r\n\u003cli\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoUpperCase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on your first variable.\u003c/li\u003e\r\n\u003cli\u003eNow use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoLowerCase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on your second variable.\u003c/li\u003e\r\n\u003cli\u003eFind the character at the 3rd position of either of your variables.\u003c/li\u003e\r\n\u003cli\u003eCheck out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#Methods\"\u003eMDN's documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eof string methods and try out at least five new methods for yourself. If some of them don't make sense, don't worry about it - just try the ones that do. (Stick to the section labelled Methods unrelated to HTML. Click on the method itself to see how to use it in your code.)\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-responsive-design-and-media-queries","title":"Wednesday: Responsive Design and Media Queries","type":"WikiPage","content":"\u003cp\u003eYou may have noticed that some websites look a little different on your phone than they do in a browser window on your computer screen. Altering the appearance of a website depending on the device used to view it is an important feature of CSS that ensures a quality user experience on any device. It's essential to building modern websites. In this lesson, we'll learn about adapting a site for different screen sizes using media queries.\u003c/p\u003e\r\n\u003cp\u003eBuilding a site to change its appearance in response to the size of screen on which it is being viewed is known as responsive web design. The screen being used to view a site is often called a viewport. Before we begin, let's take a look at some examples of websites that use responsive design. Check out the following two websites to view some examples of responsive design. Each site contains the layouts of several different websites, and how their styles appear differently depending on the user's screen size.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://responsivedesign.is/examples/\"\u003eResponsive Design\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://mediaqueri.es/\"\u003emediaqueri.es\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBut how do we make our own sites responsive? How does it know when to use styles meant for smaller viewports, and when to apply styles meant for larger ones?\u003c/p\u003e\r\n\u003cp\u003eIn human terms, responsive design sounds something like,\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"I want my website to have a white background when viewed on a phone, but a green background when viewed from a computer monitor\"\u003c/em\u003e. To accomplish this, you need to give the computer instructions such as,\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"If the viewport size is larger than 768 pixels, use green for the background color. Otherwise, use white for the background color.\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eTo accomplish this, we can use CSS media queries. A media query is a block of CSS that is applied only when certain conditions about the user's viewport are true.\u003c/p\u003e\r\n\u003cp\u003eLet's walk through creating media queries together. This will allow us to both understand their construction, and see what they look like in action.\u003c/p\u003e\r\n\u003cp\u003eCreate a project directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emedia-query-practice\u003c/em\u003e. Inside, create an HTML file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emedia-query-site.html\u003c/em\u003e, and another directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e. In the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory create a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo start, let's add some HTML to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emedia-query-site.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMedia Queries\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMedia Queries\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc tincidunt vestibulum sollicitudin. Aliquam sit amet ultrices purus, quis pulvinar massa. Sed quis ligula dapibus, gravida lectus sit amet, euismod quam. Integer id nisi sem. Phasellus ac purus et nunc dignissim ultricies quis sed ligula. Proin efficitur nunc eget egestas iaculis. Proin posuere, enim in venenatis gravida, erat metus hendrerit tellus, sit amet sollicitudin magna mauris sit amet ex. In hac habitasse platea dictumst. Fusce porta suscipit felis vitae ornare. Duis fringilla, nunc vitae aliquam lacinia, metus urna tincidunt erat, ut laoreet leo mi ac nibh. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eIn pretium eu sem quis dignissim. In commodo velit eu elit volutpat bibendum. Proin a orci pharetra, pharetra mauris et, tempor odio. Nullam semper magna sit amet augue pretium molestie. Quisque ullamcorper turpis a nisi consectetur, vel consectetur purus lobortis. Pellentesque tristique justo id faucibus rutrum. Donec mi lacus, molestie et posuere eget, lacinia sed turpis. Aenean id sem ligula. Cras venenatis commodo felis a tempor. Duis nec leo facilisis, condimentum odio dictum, rutrum lectus. Nullam vehicula elementum imperdiet.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eNullam sit amet ante porttitor, vestibulum quam nec, tincidunt sem. Nulla ac diam in risus porta sollicitudin. Nam pellentesque diam nec arcu vehicula varius. Praesent id ornare magna. Aliquam congue nisl enim, id vulputate lacus faucibus non. Sed ac dignissim dui, quis porttitor augue. Donec velit erat, hendrerit ut tincidunt vel, placerat sit amet risus.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, the fun part: let's add some media queries!\u003c/p\u003e\r\n\u003cp\u003eMedia queries are located in CSS stylesheets. Because of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecascading\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein CSS, they should be located at the bottom of the file, to prevent other style rules from overriding them.\u003c/p\u003e\r\n\u003cp\u003eThe basic skeleton of a media query looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e () \u003c/span\u003e{\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere are three parts to this block of code:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e@media\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells the browser that this is a media query\u003c/li\u003e\r\n\u003cli\u003eThe parentheses will contain the conditions of when to apply CSS\u003c/li\u003e\r\n\u003cli\u003eThe curly braces will contain the CSS rule to be applied when the conditions contained in the parenthesis are true\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eMedia Type\u003c/h2\u003e\r\n\u003cp\u003eMedia queries will often include something called a media type, which refers to the type of device the user is viewing a site with. We have the following options to choose from:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eall\u003c/code\u003e: Suitable for all devices.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eprint\u003c/code\u003e: Intended for viewing a site in \"print preview\" mode. For instance, if we had a website with a dark-colored background that users may want to print, we could use a print media query that removes the dark-colored background for print media types. This would both make our website's information more legible in a printed format, and save our users printer ink.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003escreen\u003c/code\u003e: Intended primarily for color computer screens.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003espeech\u003c/code\u003e: Intended for screen readers that assist users with impaired vision.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf you do not explicitly specify a type, the media query will default to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eall\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eHere's how to add the media type to a query:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen () \u003c/span\u003e{\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBy specifying the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escreen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia type, we're instructing our site to only apply any CSS in this media query to the site if a user is viewing it through a screen.\u003c/p\u003e\r\n\u003ch2\u003eMedia Features\u003c/h2\u003e\r\n\u003cp\u003eTo tell a media query the conditions of when to apply CSS, we include something called a media feature. Media features are specific properties and details about the manner the user is viewing content. The most commonly-used media features are:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eheight\u003c/code\u003e: Describes the height of the viewport, in pixels. This media feature can also have a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix added onto it. That is, we can say\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax-height\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto specify the maximum height to which a media query's CSS should apply. Or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-height\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto define a minimum height.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003ewidth\u003c/code\u003e: Describes the width of the viewport, in pixels. Like height, it may also have a min or max prefix added onto it.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eorientation\u003c/code\u003e: Indicates whether the viewport is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elandscape\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(wider than it is tall) or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eportrait\u003c/code\u003e(taller than it is wide).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWhile not required for this course, you can learn about the additional, less common features in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Media_features\"\u003eMDN Documentation on Media Queries\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewidth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia feature in our media query. We'll also include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix, in order to specify a minimum width:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-property\"\u003e@media\u003c/span\u003e screen \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e (min-\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e480\u003c/span\u003epx) {\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe've done a few things here:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFirst, we specified that this CSS rule will apply to the screen media type.\u003c/li\u003e\r\n\u003cli\u003eThen we added the word\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebetween our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escreen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia type, and the parenthesis containing our new media feature. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword is used for combining media features with media types, as well as combining multiple media features together.\u003c/li\u003e\r\n\u003cli\u003eThen, we included\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-width: 480px\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the parenthesis.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003ewidth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis our media feature.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix specifies that the CSS we will eventually include in this media query should only be applied to viewports with a minimum width of 480 pixels.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e480px\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply refers to size (in pixels) we'd like to define as the maximum. When defining pixel sizes in CSS, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epx\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esuffix is required.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eBreakpoints\u003c/h3\u003e\r\n\u003cp\u003eThis rule means the CSS we will eventually include in this media query will only be applied when the user's viewport is wider than the minimum width of 480 pixels. This is known as a breakpoint.\u003c/p\u003e\r\n\u003cp\u003eA breakpoint is the point at which a media query's condition becomes true. For instance, because our media query has a min-width of 480px, it will apply its styles only when the viewport is 480 pixels wide or greater. 480px is therefore the breakpoint, because it is the point at which the query will be \"activated\".\u003c/p\u003e\r\n\u003cp\u003eFor some standard device breakpoints, check out this reference at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://css-tricks.com/snippets/css/media-queries-for-standard-devices/\"\u003eCSS Tricks\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eMobile-First Design\u003c/h2\u003e\r\n\u003cp\u003eLet's focus on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix for a bit here. What's the difference? Why does it matter which one we use?\u003c/p\u003e\r\n\u003cp\u003eWhen we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-width\u003c/code\u003e, then the design changes when the width is larger than 480 pixels. Using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax-width\u003c/code\u003emeans that the design changes when the width gets smaller than 480 pixels.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-width\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill make the page display faster on smaller devices, and is a good idea because smaller devices usually have less power to display a website. This approach to designing a website is called mobile first design, because it means designing for mobile screens before designing for desktop or other devices. When in doubt, take the mobile first approach.\u003c/p\u003e\r\n\u003ch2\u003eCSS Rules\u003c/h2\u003e\r\n\u003cp\u003eAll right, we have our setup ready to make some media queries. Let's start writing some CSS! We will include CSS within the curly braces, and the CSS is exactly like the CSS we've been using so far. The only difference is that the CSS rule will only be applied when the media query conditions are met.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe're saying that when the user is viewing our page from a screen, and the page width is larger than 480 pixels, then the background color will be black and the text color will be white. Any smaller than that, and only the default styles will be applied. Try it out!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D3-04-resize_window_responsive.gif\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can add multiple media queries to address a variety of viewport sizes and media types. Let's add another media query to our site:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellowgreen\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you refresh the page, you can see that if the width is between 480 and 767 pixels, the background color is black, when the width is 768 pixels or larger, the background color changes to yellow-green. Notice that the text color remains white after the background turns yellow-green, even though we don't specify text color in the second CSS rule. This is because he viewport is still greater than 480 pixels wide, and we didn't say anything about text color in the second CSS rule. Unless we override the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty with a new rule, it will remain white.\u003c/p\u003e\r\n\u003ch2\u003eViewport Ranges\u003c/h2\u003e\r\n\u003cp\u003eWe can also specify both minimum and maximum values for a media query. This can be useful if we don't want to worry about certain styles applying to multiple media queries.\u003c/p\u003e\r\n\u003cp\u003eWe could add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax-width\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our media query like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) and (max-width: \u003cspan class=\"hljs-number\"\u003e767px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellowgreen\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo specify the viewport range, we added a second\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebetween the two sets of parentheses. Now when we refresh the page, we see that the text color is white only for the first media query, and changes back to black when the screen width is greater than 767 pixels.\u003c/p\u003e\r\n\u003ch2\u003eMore CSS in Media Queries\u003c/h2\u003e\r\n\u003cp\u003eLet's look at another example of how we can use media queries to change our webpage's display. Often, sites will display text in a single column for easy reading on mobile phones or smaller devices, but display the text in columns on larger devices (see\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://mediaqueri.es/dbp/\"\u003ethis example from mediaqueri.es\u003c/a\u003e).\u003c/p\u003e\r\n\u003cp\u003eWe've styled text into columns in a previous lesson on floats. Where do you think we need to put the CSS for displaying our text as columns at only larger screen sizes?\u003c/p\u003e\r\n\u003cp\u003eHere's the CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) and (max-width: \u003cspan class=\"hljs-number\"\u003e767px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellowgreen\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n  \u003cspan class=\"hljs-class\"\u003e.column\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e220px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur new rule will float any element with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolumn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the left, and make its width 220 pixels, but only for screens larger than 768 pixels. Check it out! Our text is displayed in a single column by default:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D3-05-single_column.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBut at larger screen sizes, we have columns:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D3-06-multiple_column.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you can see, media queries are a powerful tool in web design! We have the ability to tailor our user's experience of the webpage depending on how they view it. As more individuals are accessing web content through handheld devices and tablets, it's a good idea to be aware of responsive design and how we can use it to give the user the highest quality experience.\u003c/p\u003e\r\n\u003cp\u003eAs you create websites and applications throughout this course, begin implementing media queries to ensure your content looks great on all devices.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-practice-css","title":"Tuesday: Practice: CSS","type":"WikiPage","content":"\u003ch1\u003ePractice: CSS\u003c/h1\u003e\r\n\u003cp\u003eGoal: Start getting familiar with CSS basics. Be able to use CSS styling on HTML elements.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow does HTML know about CSS we have added in a separate stylesheet?\u003c/li\u003e\r\n\u003cli\u003eHow do we add a style to an HTML element?\u003c/li\u003e\r\n\u003cli\u003eName four CSS rules.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eWork through the lesson to add CSS styling to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eThen, add a reference to\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e. Refresh the page and notice that the styles from\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eare applied to the page.\u003c/p\u003e\r\n\u003cp\u003eAdd more custom styles to the page. Use the following styles:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolor\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebackground-color\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-size\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-style\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-family\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eline-height\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdd a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag somewhere on the page and customize those with CSS so that using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003emakes text italic and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emakes text bold.\u003c/p\u003e\r\n\u003cp\u003eMake a new stylesheet with different styles and add it to both pages. Give it a different name than\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand make sure you can add it to your page correctly.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-functions","title":"Tuesday: Functions","type":"WikiPage","content":"\u003ch2\u003eFunctions\u003c/h2\u003e\r\n\u003cp\u003eSo far, none of the JavaScript we've learned has let us do anything with a web page. Let's try something a little more interesting:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; alert(\u003cspan class=\"hljs-string\"\u003e\"Hello world!\"\u003c/span\u003e);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWow! When you press enter, the page pops open a dialog box that says \"Hello world!\". Exciting stuff!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efunction\u003c/strong\u003e. A function is something that performs an action. Just like a method, a function can take an argument. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction pops up a dialog box with the string that you pass in as an argument.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere's another JavaScript function that takes a string as an argument:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; prompt(\u003cspan class=\"hljs-string\"\u003e\"What is the air-speed velocity of an unladen swallow?\"\u003c/span\u003e);  \u003cspan class=\"hljs-comment\"\u003e// I'm going to type \"African or European?\"\u003c/span\u003e\r\n      \u003cspan class=\"hljs-string\"\u003e\"African or European?\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn JavaScript, everything after the // is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecomment\u003c/strong\u003e, and is ignored. Comments are a convenient way to leave notes in your code for yourself or other programmers. This dialog box lets you type in a response, and then that response is\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ereturned\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. One cool thing we can do here is a set a variable equal to the response, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteColor = prompt(\u003cspan class=\"hljs-string\"\u003e\"What is your favorite color?\"\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e// I'm going to type \"green\"\u003c/span\u003e\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; favoriteColor;\r\n      \u003cspan class=\"hljs-string\"\u003e\"green\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we created a variable named favoriteColor and assigned it to hold the string inputted by the user.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eJust like we could chain methods to each other, we can also chain methods to a function:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; prompt(\u003cspan class=\"hljs-string\"\u003e\"Type something in lowercase:\"\u003c/span\u003e).toUpperCase(); \u003cspan class=\"hljs-comment\"\u003e// I'm going to type \"lowercase\"\u003c/span\u003e\r\n      \u003cspan class=\"hljs-string\"\u003e\"LOWERCASE\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnother built-in function that allows us to interact with the webpage user is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. This too takes a string as an argument.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; confirm(\u003cspan class=\"hljs-string\"\u003e\"Are you sure?\"\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e// I'm going to press the OK button\u003c/span\u003e\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTry it out for yourself in the JavaScript console. You should have seen that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns one of two values:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e. Notice that there are no quotes around these values. That is because these are\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebooleans\u003c/strong\u003e, not strings. They simply represent being true or false. You saw them before when you worked with comparison operators. And on that note, you might have noticed that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturned\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e, also without quotes.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply represents that nothing has been returned from the function, or, as you saw earlier, that a variable hasn't been assigned a value.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIt is good to be conscious of what arguments a function takes, and what data type it returns. Here is a table showing that information for the three built-in functions introduced in this lesson:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/function-arguments-returns.png\" alt=\"function argument returns\"\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction does not return anything useful, which is fine because you would just use it to display some information to the user - it is a way of outputting information, not of collecting information. On the other hand, you would want to somehow collect the user's response to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eprompt()\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003econfirm()\u003c/em\u003efunctions - likely by assigning the returned value to a variable as demonstrated above with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar favoriteColor = prompt(\"What is your favorite color?\");\u003c/code\u003e. That way you can actually do something with the inputted information rather than just ignoring it.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Functions\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Functions video, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFunctions perform actions in the browser\u003c/li\u003e\r\n\u003cli\u003eExamples of JavaScript functions are\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eMethods can be chained onto functions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFunctions are an incredibly important part of programming, and you'll be using them constantly. Begin to get the hang of calling some common JavaScript functions by completing the practice exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow can we comment out code?\u003c/li\u003e\r\n\u003cli\u003eWhat happens when we run code that is commented out?\u003c/li\u003e\r\n\u003cli\u003eWhat are the differences between the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunctions in JavaScript?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eFunctions Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice using JavaScript functions:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto pop up a dialog box with a warning for the user.\u003c/li\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ask a yes or no question.\u003c/li\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ask a question.\u003c/li\u003e\r\n\u003cli\u003eSave the response to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a variable. All responses entered by a user in to a prompt input filed are saved as strings (even if the user enters 10, the value is saved as the string, \"10\"). Run at least 3 string methods of your choice on the string variable that you create from the prompt.\u003c/li\u003e\r\n\u003cli\u003eAsk a new question and save the response as a new variable and run 3 different string methods on it.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eParsing Integers\u003c/h2\u003e\r\n\u003cp\u003eThe most common error beginning JavaScript students experience is attempting to call functions meant for numbers on strings. This happens especially frequently because\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall values returned from a prompt are saved as strings\u003c/strong\u003e. Even if the user enters a number into a prompt without quotation marks! Unfortunately, this is simply how JavaScript works. If we wanted to collect a value from a user with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e, and perform arithmetic with this value, we would need to convert it into a number with JavaScript's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. If not, we would receive some very unexpected output.\u003c/p\u003e\r\n\u003ch2\u003eCommon Data Type Errors\u003c/h2\u003e\r\n\u003cp\u003eHere's what can happen if you\u003cspan\u003e \u003c/span\u003e\u003cem\u003edon't\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eparse integers correctly. In the example below, we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ask the user how old they are. The user enters 35. We then attempt to perform some arithmetic on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter your age: \"\u003c/span\u003e);\r\n      \u0026gt; age + age;\r\n      \u003cspan class=\"hljs-number\"\u003e3535\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRemember,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall values returned from a prompt are strings!\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eSo, even though the user entered a number,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis actually equal to the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"35\"\u003c/code\u003e. Since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator can be used to concatenate strings age\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003eage actually returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"3535\"\u003c/code\u003e, instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e70\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eUsing parseInt() to Avoid Data Type Errors\u003c/h2\u003e\r\n\u003cp\u003eTo make a string a number, we parse it using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"5\"\u003c/span\u003e);\r\n      \u0026gt; number;\r\n      \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSo, to change our age from the example above into an integer, we do the following:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedAge = prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter your age: \"\u003c/span\u003e);\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(inputtedAge);\r\n      \u0026gt; age + age;\r\n      \u003cspan class=\"hljs-number\"\u003e70\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAlternatively, the code does the exact same thing on a single line. Here we immediately pass the string returned by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction as the argument to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter your age: \"\u003c/span\u003e));\r\n      \u0026gt; age + age;\r\n      \u003cspan class=\"hljs-number\"\u003e70\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cp\u003eNote: The\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInt\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epart of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis short for integer, which means it's a whole number. If we wanted to convert something into a number with a decimal, we'd use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseFloat()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e pi = \u003cspan class=\"hljs-string\"\u003e\"3.14\"\u003c/span\u003e;\r\n      \u0026gt; \u003cspan class=\"hljs-built_in\"\u003eparseFloat\u003c/span\u003e(pi);\r\n      \u003cspan class=\"hljs-number\"\u003e3.14\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eFloating point\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003enumbers are simply numbers with decimals. If you're parsing a whole number, use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e, if you're parsing a number containing a decimal point, use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseFloat()\u003c/code\u003e.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003eFunctions\u003c/h2\u003e\r\n\u003cp\u003eIn the previous lesson we saw how to use a few built-in JavaScript functions. Now let's write some custom functions. We're going to write a very simple function to start. We'll give it the name\u003cspan\u003e \u003c/span\u003e\u003cem\u003esayHi\u003c/em\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sayHi = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{ alert(\u003cspan class=\"hljs-string\"\u003e'Hello from Moringa School!'\u003c/span\u003e); };\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; sayHi();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eEvery time we run the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esayHi()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction it executes all JavaScript code between the opening and closing braces -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e{\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e}\u003c/code\u003e. In this case it simply pops up a dialog box with the text\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHello from Moringa School!\u003c/em\u003e. This isn't terribly useful, so let's write a slightly more interesting function, which we'll call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e saySomething = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ewhatToSay\u003c/span\u003e) \u003c/span\u003e{ alert(whatToSay); };\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; saySomething(\u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you know, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"hello!\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ean\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eargument\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto the function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e. In the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, that argument is assigned to the variable whatToSay - we call that variable a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eparameter\u003c/strong\u003e. If you're confused about the difference between arguments and parameters, just remember that\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethe argument is the information you pass in, and the parameter is the variable that receives the argument.\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eIn this case,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"hello!\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the argument, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the parameter. The parameter can then be used just like any other variable. If this is unclear, reread it and play around with writing your own functions. Be sure you understand how to write a function that uses an argument passed in. Okay, on to another, slightly more complex function:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{ \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2; };\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; add(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword tells JavaScript to give us the result from that line of code. Without a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e, JavaScript will return\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the function, which is JavaScript's way of saying something does not have a value. Let's step through exactly what happens if we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd(3, 5)\u003c/code\u003e:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWe call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction with the arguments\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e(3, 5)\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction is run. The parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis set equal to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3\u003c/code\u003e, and the parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis set equal to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e3 + 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis run.\u003c/li\u003e\r\n\u003cli\u003eThe result of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3 + 5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis returned.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction ends.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eNotice our variables names:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber2\u003c/code\u003e. We could have called them\u003cspan\u003e \u003c/span\u003e\u003ccode\u003en1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003en2\u003c/code\u003e, and it would have taken less typing. But the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003every clearly expresses what the variable is for, whereas\u003cspan\u003e \u003c/span\u003e\u003ccode\u003en1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill require another programmer (or your future self, when you come back to your code in a few months and don't remember exactly how it works) to figure it out from context. In this example, it would be pretty obvious what\u003cspan\u003e \u003c/span\u003e\u003ccode\u003en1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis for. But if you practice choosing descriptive names now and resisting the temptation to abbreviate, you will be in the habit of doing it when you're writing more complex code where it matters more.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003eJSFiddle\u003c/h2\u003e\r\n\u003cp\u003eIn the writing functions lesson we wrote all of our functions in the JavaScript console. This works for very simple functions that can be written on a single line, but it quickly becomes unwieldy as we want to write longer functions. There are a few solutions. You can write your functions in Atom and then copy \u0026amp; paste into the JavaScript console. Or you can try out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e, a useful tool for experimenting with JavaScript. With JSFIddle, you can write code in the JavaScript box and then execute it by clicking the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton on the menu bar at the top of the JSFiddle page.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/jsfiddle-screenshot.png\" alt=\"JS fiddle screenshot\"\u003e\r\n\u003cp\u003eType this out in the JavaScript box at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e saySomething = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ewhatToSay\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(whatToSay);\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWriting out your functions on multiple lines is clearer even with these simple functions; it will be essential when you begin writing more complex functions. Hit the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRun\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebutton and... nothing happens. This is because we have simply defined two functions and made them available for future use. We have not yet\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecalled\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe functions, so the code inside of them has not yet been executed. Now add this line after the other lines:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      saySomething(\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHit the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRun\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebutton again and you should see an alert pop up.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eNow add another line:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      add(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHit\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRun\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand you should still see your alert popup, but the new line you added doesn't appear to do anything. This is because our add() method\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ereturns\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethe result, but we don't do anything with that return value. When we were running this code directly in the JavaScript console, the console automatically displays any return value. But in \"real life\" programming if you want to display something, you have to tell the computer to do that. We have a variety of options available to us. We could, for instance, assign the return value to a variable and then display it by calling the built-in JavaScript\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealert()\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efunction.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = add(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);\r\n      alert(result);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we hit Run we should get an alert with our result, 8. If you aren't seeing the alert, make sure that you didn't delete your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction definition code. Let's update our little program to make use of both functions:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e saySomething = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ewhatToSay\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(whatToSay);\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = add(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e outputText = \u003cspan class=\"hljs-string\"\u003e\"The sum is \"\u003c/span\u003e + result + \u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e;\r\n      saySomething(outputText);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar result = add(3, 5);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eline calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, passing it 2 arguments - the number 3 and the number 5. Our add() function at this point assigns the first argument (\u003ccode\u003e3\u003c/code\u003e) to the parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the second argument (\u003ccode\u003e5\u003c/code\u003e) to the parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber2\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction then returns the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(in this case), which our code assigns to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresult\u003c/code\u003e. Hence the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is now the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThe next line -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar outputText = \"The sum is \" + result + \".\";\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- concatenates three things together into a new string, which it then assigns to a new variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutputText\u003c/code\u003e. Note that result above is not in quotes. If you wrote\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar outputText = \"The sum is \" + \"result\" + \".\";\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethen outputText would be the string The sum is result. But because we did not put result in quotes, the computer understands the result variable's value (\u003ccode\u003e8\u003c/code\u003e) should be substituted here. Hence the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutputText\u003c/code\u003evariable is assigned the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is 8.\"\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThe last line -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething(outputText);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- calls our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, passing it the value that the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutputText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis standing in for - the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is 8.\"\u003c/code\u003e. Our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction assigns that string passed in to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e. It then calls the built-in JavaScript function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein order to pop up a dialog box with that string.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIf desired, you could refactor those last three lines into one line:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e saySomething = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ewhatToSay\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(whatToSay);\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      saySomething(\u003cspan class=\"hljs-string\"\u003e\"The sum is \"\u003c/span\u003e + add(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e) + \u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThat refactored line calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and passes it a string, which is concatenated together from 3 parts. The first part is just the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is \"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the last part is just the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\".\"\u003c/code\u003e. The second part is the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause that is the return value of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction when passed the arguments\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e. Hence the concatenated string:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is 8.\"\u003c/code\u003e\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Writing Functions\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the previous lessons, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eArguments to functions can be assigned to variables called parameters\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword tells JavaScript to return the result from the line of code\u003c/li\u003e\r\n\u003cli\u003eDon't abbreviate variable names because it can get confusing after time has passed\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBegin familiarizing yourself with writing custom functions in JSFiddle by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we call a function?\u003c/li\u003e\r\n\u003cli\u003eWhat is a parameter, and how do we provide one to a function?\u003c/li\u003e\r\n\u003cli\u003eWhen do we need to parse integers?\u003c/li\u003e\r\n\u003cli\u003eWhat is a return value? How do we tell our functions what value to return?\u003c/li\u003e\r\n\u003cli\u003eWhat method is responsible for parsing integers?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eWriting Custom Functions\u003c/h3\u003e\r\n\u003cp\u003eWrite custom function for each of the following prompts. Then, call the function providing the necessary parameters to see if your function successfully returns the correct value. And don't forget to parse integers when necessary!\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTake somebody's name and say a greeting to them;\u003c/li\u003e\r\n\u003cli\u003eWrite a function to subtract two numbers;\u003c/li\u003e\r\n\u003cli\u003eNow one to multiply two numbers. Then create a new function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethreeTimes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto multiply three numbers together.\u003c/li\u003e\r\n\u003cli\u003eNow write one to divide two numbers. Then write a new function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eremainder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto find the remainder of two numbers.\u003c/li\u003e\r\n\u003cli\u003ePrompt the user to enter their age, another prompt to enter their name and another prompt to enter their favorite food. Pass these as arguments to a function that returns a sentence combining all of this information. Then display the returned string with an alert.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eBusiness and User Interface Logic\u003c/h2\u003e\r\n\u003cp\u003eWell-organized code is easier to debug, it appears more professional, and is easier to revisit later. Writing organized code is a highly-valued skill in the programming field. When working on a team, you'll often collaborate with other developers. Clean code is easier for others to understand and contribute to. Before we begin writing more complex JavaScript, let's make sure we understand how to organize our code using best, most professional practices from the very beginning.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOne of the most important organizational rules to follow is keeping what is known as your user interface and business logic separate. We haven't written any user interface logic\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyet\u003c/em\u003e, but we will in upcoming lessons. In this lesson we'll explore what user interface and business logics are, and what each handles.\u003c/p\u003e\r\n\u003ch3\u003eUser Interface and Business Logics\u003c/h3\u003e\r\n\u003cp\u003eConsider a basic calculator application. Its code falls into two categories: Code that performs calculations, or code responsible for interacting with the user.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThe code that handles arithmetic is the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eback-end\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness logic\u003c/strong\u003e. It's the 'inner workings' of the application that performs calculations and returns a value. It's what takes the numbers\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e, adds them together, and arrives at\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e9\u003c/code\u003e. The functions we've explored so far are all back-end logic.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThe code that handles interacting with user is the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efront-end\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003elogic. It retrieves information from the user and provides it to the business logic to calculate. While buttons on a calculator may be\u003cspan\u003e \u003c/span\u003e\u003cem\u003elabeled\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith numbers, they're just visual buttons. User interface logic is what translates clicking on this area of the page:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/button-on-calculator.png\" alt=\"calculator image\"\u003e\r\n\u003cp\u003e... into the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e. After all, we cannot perform addition on\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuttons\u003c/em\u003e, but you can perform addition on\u003cspan\u003e \u003c/span\u003e\u003cem\u003enumbers\u003c/em\u003e. The user interface logic registers that the user has pushed the button labelled \"4\". It then provides the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the back-end logic where we may perform calculations with it.\u003c/p\u003e\r\n\u003cp\u003eLet's say we also press the buttons labelled \"+\" and \"5\". The user interface logic also translates these interactions into the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand recognizes it will need a method for addition. The back-end logic then adds the numbers\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etogether, and returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e9\u003c/code\u003e. The front-end/user interface logic can then display this result to the user:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/result-displayed-from-calculator.png\" alt=\"calculator image with result\"\u003e\r\n\u003cp\u003eUser interface/front-end logic handles interacting with the user; including displaying or gathering information. The business/back-end logic handles calculating or manipulation information 'behind the scenes'.\u003c/p\u003e\r\n\u003ch3\u003eSeparation of Logic\u003c/h3\u003e\r\n\u003cp\u003eRemember, we want to write clean, well-organized code.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBecause user interface and business logics have separate purposes, their code should always be separate\u003c/strong\u003e. So far, we've only written business logic, so we don't have much to worry about. But keep this rule in mind as we begin to explore user interface logic with jQuery in the coming lessons.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAlso, it's okay if everything we discussed isn't entirely clear right now. Just understand the basic differences between these two logics, and know they should be separate. Throughout the week we will see what this actually looks like in practice. By keeping this basic information in mind before we write more complex JavaScript, you'll learn the most professional practices from the very beginning!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eYou may checkout\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://blog.teamtreehouse.com/i-dont-speak-your-language-frontend-vs-backend\" target=\"_blank\"\u003ethis blog by treehouse\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information on frontend vs backend in the context of web development.\u003c/p\u003e","frontPage":false},{"exportId":"monday-announcement","title":"Monday: Announcement","type":"WikiPage","content":"\u003cdiv\u003e\n\u003cstrong\u003eCongratulations\u003c/strong\u003e, you're almost done with this module! \u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eA few updates/reminders for this week:\u003c/div\u003e\r\n\u003cdiv\u003e- All Independent Projects must be complete and reviewed by Technical Mentors before Tuesday of next week\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eLet your TM know if you have any questions. Have a great week, keep up the great work.\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\u0026lt;3\u003c/div\u003e","frontPage":false},{"exportId":"tuesday-leap-year-exercise","title":"Tuesday: Leap Year Exercise","type":"WikiPage","content":"\u003ch2\u003eLeap Year Part 1\u003c/h2\u003e\r\n\u003cp\u003eNow that we know about the behavior-driven development, let's walk through creating an application using the behavior-driven development process together. Taking time to learn how to identify and code individual behaviors\u003cspan\u003e \u003c/span\u003e\u003cem\u003enow\u003c/em\u003e, while our projects are still relatively small, and tackling larger projects will be that much easier later on.\u003c/p\u003e\r\n\u003ch2\u003eSeparation of Logic\u003c/h2\u003e\r\n\u003cp\u003eA brief reminder: As discussed previously, new programmers often mistakenly combine\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(back-end) and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(front-end) logics . User interface logic includes code that handles event listening, user input, and DOM manipulation. Business (back-end) logic evaluates and manages data. Business logic may be\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecalled\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eby user interface (front-end) logic but they should otherwise be two very separate areas of our code.\u003c/p\u003e\r\n\u003cp\u003eAs our projects continually grow in size and complexity, continue writing clean, professional code by keeping these two logics separated. If necessary, review the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringa-prep.herokuapp.com/#09.html\" target=\"_blank\"\u003eBusiness and User Interface Logic\u003c/a\u003e\u003cspan\u003e \u003c/span\u003elesson from last week.\u003c/p\u003e\r\n\u003ch2\u003eApplication Overview\u003c/h2\u003e\r\n\u003cp\u003eIn the next two lessons we will write a program that takes a year, provided by the user, and returns whether or not that year was (or will be) a leap year. Let's briefly cover what this application will look like:\u003c/p\u003e\r\n\u003ch3\u003eBusiness Logic\u003c/h3\u003e\r\n\u003cp\u003eThe business logic (back-end) of our application will evaluate whether the value provided is a leap year and will return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eaccordingly. Remember, business logic does not care how it is used and can operate independently of any user interaction. It happens in the 'back-end' or 'behind the scenes'.\u003c/p\u003e\r\n\u003ch3\u003eUser Interface Logic\u003c/h3\u003e\r\n\u003cp\u003eThe user interface (front-end) logic of the application will collect input from the user, call our business logic function, and display the results from the business logic back on the web page. Remember, the user interface logic does not care how the business logic works behind the scenes. All the user interface logic must know is that there is a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eleapYear()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction it may call that takes one argument and returns a boolean.\u003c/p\u003e\r\n\u003ch2\u003eBehavior Driven Development Process\u003c/h2\u003e\r\n\u003cp\u003eNow let's walk through how we would code this application using the principles of behavior-driven development:\u003c/p\u003e\r\n\u003ch3\u003eIdentifying Behaviors (also known as \"Specifications\")\u003c/h3\u003e\r\n\u003cp\u003eThe first step in behavior-driven development is to identify small, individual behaviors the program should demonstrate. And you don't have to think of all of them at the beginning. It's entirely alright to add to your list of behaviors/specs/specifications as you think of additional behaviours.\u003c/p\u003e\r\n\u003cp\u003eAlso, always begin with the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esimplest possible behavior\u003c/strong\u003e. In the previous lesson we created a table of specs, or behavior examples, including input and output examples that demonstrate what each behavior should look like in action:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/s8ba59r4ubwjuel/bdd-leap-year-grid.png?raw=1\" alt=\"Leap Year Input-Output Grid\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eKnow that your own specs aren't required to be in a table. In the Intro to Programming class here at Moringa School, we will place specs in our project's README.md file. A simple list of behaviors with an input/output example for each is just fine.\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eWriting Tests\u003c/h3\u003e\r\n\u003cp\u003eThe next step in BDD is to translate your first \"plain English\" spec into a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecoded\u003c/em\u003e\u003cspan\u003e \u003c/span\u003espec, using tools specifically designed for this purpose. Here at Moringa School you will learn how to code automated tests in the core program. Until then we will test our applications\u003cspan\u003e \u003c/span\u003e\u003cem\u003emanually\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eby inserting our example input into the application and double-checking that we receive the correct output.\u003c/p\u003e\r\n\u003cp\u003eTo test manually, we'll first need to build a basic front-end that includes a form to submit values. Later on when we have the ability to write\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecoded\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etests, we will\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebuild the user interface until the business logic is in place and passes all tests.\u003c/p\u003e\r\n\u003ch3\u003eWriting Code\u003c/h3\u003e\r\n\u003cp\u003eLet's create a project directory called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eleap-year\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand initialize a git repository within it to track our changes. We'll add a README with details about our project, and our list of plain English specs. We'll also add\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ejs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecss\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolders.\u003c/p\u003e\r\n\u003ch4\u003eHTML\u003c/h4\u003e\r\n\u003cp\u003eLet's first construct a basic web page where we may enter sample input into our program.\u003c/p\u003e\r\n\u003cp\u003eOur HTML page needs a link to the jQuery library, a link to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, a form to collect input, and a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ediv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display the program's output. We'll also include some Bootstrap:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eleap-year.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-html hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eLeap year detector\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eLeap year detector\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"leap-year\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"year\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEnter a year and find out if it's a leap year:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"year\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eFind out!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"result\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003eUser Interface Logic\u003c/h4\u003e\r\n\u003cp\u003eNext, we'll need some jQuery user interface logic that will retrieve user input from our form, and call our business logic\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eleapYear()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction (which we will write momentarily). After the business logic runs, it will also be responsible for displaying results:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"form#leap-year\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n      event.preventDefault();\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e year = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"input#year\"\u003c/span\u003e).val());\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = leapYear(year);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#result\"\u003c/span\u003e).text(result);\r\n    });\r\n  });\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we have attached a submit listener to our form. When this form is submitted, we assign the value the user enters to the variable,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eyear\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThen, we call the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eleapYear()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction (which we will write momentarily), pass it the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eyear\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable as an argument, and assign the return value (\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e) to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresult\u003c/code\u003e. Even though we haven't written the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eleapYear()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction yet, we already know from our specs that it\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etake a number and return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e. This is yet another benefit to identifying and listing out anticipated behaviors\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe begin coding.\u003c/p\u003e\r\n\u003cp\u003eNow, let's make sure our application can display a result to the user. For now we'll simply display the returned boolean value (currently assigned to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresult\u003c/code\u003e) with the line\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e$(\"#result\").text(result);\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch4\u003eBusiness Logic\u003c/h4\u003e\r\n\u003cp\u003eTo start coding our business logic using the behavior-driven development process, we'll take our plain English specifications (also known as \"specs\" or \"behavior examples\") and begin implementing code that\u003cspan\u003e \u003c/span\u003e\u003cem\u003edoes\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eeach of these behaviors.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eWe always want to begin with the simplest possible example that requires the least amount of code to implement\u003c/strong\u003e, and focus on only\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eone behavior at a time\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/s8ba59r4ubwjuel/bdd-leap-year-grid.png?raw=1\" alt=\"Leap Year Input-Output Grid\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHint: Often if we have a number of conditions that will be evaluated, the first behavior is what will ultimately be the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement when\u003cspan\u003e \u003c/span\u003e\u003cem\u003enone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the conditions are true. In our leap year application, the first behavior is returning\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor a year that is NOT a leap year, which means it is not divisible by 4, 100 or 400.\u003c/p\u003e\r\n\u003cp\u003eNow, in our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003escripts.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile, we will add the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eleast amount of code to implement the first behavior on our list\u003c/strong\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leapYear = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eyear\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n  };\r\n\r\n  \u003cspan class=\"hljs-comment\"\u003e// jQuery user interface logic here.\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDoes the code above seem odd? We haven't even checked to see if the year is a leap year, we just return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eno matter what. But remember, we're only writing\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ejust enough code to make our one, singular, most simple behavior pass\u003c/strong\u003e. If we began checking what the number was divisible by, we'd actually be getting ahead of ourselves!\u003c/p\u003e\r\n\u003cp\u003eThis may feel like overkill for such a small behavior, but if you develop good BDD habits now on these easier programs, you'll be good at it when you get to more difficult situations. Remember,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eone behavior at a time\u003c/strong\u003e, even if that behavior is very, very simple.\u003c/p\u003e\r\n\u003ch3\u003eTesting our Spec\u003c/h3\u003e\r\n\u003cp\u003eNow that we've isolated the most simple behavior possible, and written\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eenough code to make that one single behavior present in our application, let's manually test it out!\u003c/p\u003e\r\n\u003cp\u003eRemember, the first specification we are testing is that the application returns\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor a year that is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003ea leap year. Our example input was 1993, and our anticipated output was\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e. Let's launch our page in the browser and see what happens!\u003c/p\u003e\r\n\u003cp\u003eWe can enter 1993 into our form and submit....\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/yqjm0kkfdl76h0s/leap-year-first-spec-pass.png\" alt=\"leap-year-first-spec-passing\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd look, our program is returning\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e, which is the exact behavior we outlined in our first specification. Our first spec passes!\u003c/p\u003e\r\n\u003cp\u003eLet's commit. When following the BDD process you should commit after each passing spec.\u003c/p\u003e\r\n\u003ch3\u003eRepeat!\u003c/h3\u003e\r\n\u003cp\u003eNow that our first spec passes when tested manually, we simply move onto the next spec and repeat the process!\u003c/p\u003e\r\n\u003cp\u003eOur next behavior details that our program should return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor any year divisible by 4, since that makes it a leap year. Although we know that years divisible by 100 and 400 will\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eneed to be considered, we must focus on\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eone spec at a time\u003c/strong\u003e. Therefore, we are\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003egoing to add code to check whether the provided year is divisible by 4. We'll get to the rest later.\u003c/p\u003e\r\n\u003cp\u003eAgain, we'll add\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejust enough\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecode to make this second specification pass. In this case, we can just add a simple conditional:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leapYear = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eyear\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (year % \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n    }\r\n  };\r\n\r\n  \u003cspan class=\"hljs-comment\"\u003e// jQuery user interface logic here.\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's manually test this behavior too. Referring back to our list of specs, the example input for this second specification was 2004, and we anticipated the output\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAnd look! If we refresh our application and submit the year 2004, we receive 'true':\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/1d7j9lyk78qwzhr/leap-year-second-spec-pass.png\" alt=\"second-spec-passing\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAgain, we will commit after this additional passing spec.\u003c/p\u003e\r\n\u003cp\u003eTime to tackle our next specification: We decided that our application should return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen the provided year is divisible by 100, because that means it is not a leap year. We'll add the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esmallest amount\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof code to create this behavior:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leapYear = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eyear\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (year % \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (year % \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n    }\r\n  };\r\n\r\n  \u003cspan class=\"hljs-comment\"\u003e// jQuery user interface logic here.\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, we can refresh the application and manually test this behavior. Our example input was 1900, and we expected to receive the output\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/wx7ijdijfttt67n/third-spec-pass.png\" alt=\"third-spec-passing\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd look, it works! Let's commit again.\u003c/p\u003e\r\n\u003ch3\u003eRefactoring\u003c/h3\u003e\r\n\u003cp\u003eAs you work through your specs, implementing each individual behavior one-by-one, you may find your code becoming a tiny bit redundant. That's okay! Pausing to refactor along the way is entirely alright in the BDD process. In fact, it's encouraged!\u003c/p\u003e\r\n\u003cp\u003eCan we refactor our application's business logic to make it efficient or easy to read? We currently have two different places returning\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e. Let's refactor our code so that a single evaluation may check whether the year is divisible by 4\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e100. We'll change our 100 condition to use the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enot\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e!\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eso it also returns\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leapYear = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eyear\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ((year % \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) \u0026amp;\u0026amp; (year % \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e !== \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)) {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n    }\r\n  };\r\n\r\n  \u003cspan class=\"hljs-comment\"\u003e// jQuery user interface logic here.\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGreat! We'll commit one more time.\u003c/p\u003e\r\n\u003ch3\u003eImplementing Additional Behaviors\u003c/h3\u003e\r\n\u003cp\u003eWe have one last spec on our current list. Our program should return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor years divisible by 400, since that means they are a leap year. You guessed it, we'll add\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejust enough\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecode to add this functionality to our application, therefore making this last spec \"pass\":\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leapYear = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eyear\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ((year % \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) \u0026amp;\u0026amp; (year % \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e !== \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) || (year % \u003cspan class=\"hljs-number\"\u003e400\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)) {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n    }\r\n  };\r\n\r\n  \u003cspan class=\"hljs-comment\"\u003e// jQuery user interface logic here.\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur example input for this spec was 2000, and we expected our application to return\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e, since 2000 was a leap year. Let's test it out:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/tswr2axcodiqiz3/fourth-spec-passing.png\" alt=\"fourth-spec-passing\"\u003e\u003c/p\u003e\r\n\u003cp\u003ePerfect! We've successfully coded all behaviors outlined by our list of specifications. We know each spec passes, because we received our intended outputs for each individual input.\u003c/p\u003e\r\n\u003cp\u003eIn the next lesson we'll add additional user interface logic to our leap year application.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003eLeap Year Part 2\u003c/h2\u003e\r\n\u003cp\u003eIn the previous lesson, we wrote and tested the business logic for our leap year application. We know our program is successfully demonstrating all necessary behaviors because all of our specifications are passing! Additionally, because we made sure to implement the least amount of code to make each spec pass, and refactor along the way, we have clean, easy-to-read code. Perfect!\u003c/p\u003e\r\n\u003cp\u003eNow that our business logic is in place, let's include additional user interface logic.\u003c/p\u003e\r\n\u003ch2\u003eBusiness Before User Interface\u003c/h2\u003e\r\n\u003cp\u003eIn the core program you will learn how to write coded, automated tests to assist in the BDD process. When these tools are available we will not write user interface logic until all basic back-end logic is present and passes specs.\u003c/p\u003e\r\n\u003cp\u003eBecause we're testing\u003cspan\u003e \u003c/span\u003e\u003cem\u003emanually\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein Intro to Programming, we had to begin with basic HTML and user interface logic to see our results. This is absolutely alright for now, just know that user interface logic should not be written until\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eafter\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ebusiness logic is complete in the core program.\u003c/p\u003e\r\n\u003ch2\u003eUser Interface\u003c/h2\u003e\r\n\u003cp\u003eAs mentioned, we simply created the bare minimum user interface to allow us to manually test our application. Now that all necessary business logic is present, and passes all of our tests, let's add more.\u003c/p\u003e\r\n\u003cp\u003eWe'll spruce up the output section of our page (the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ediv) so that we can present the user with a descriptive message instead of a terse\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eleap-year.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-html hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eLeap year detector\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eLeap year detector\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"leap-year\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"year\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEnter a year and find out if it's a leap year:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"year\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eFind out!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"result\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"year\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e is \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"not\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e a leap year.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll add CSS to hide the div that will display the result until the evaluation is completed:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecss/styles.css\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-css hljs\"\u003e\u003cspan class=\"hljs-id\"\u003e#result\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n  }\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll update our user interface logic to appropriately fill the spans in our HTML\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebased on the value of result\u003c/em\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ejs/scripts.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-comment\"\u003e// business logic\u003c/span\u003e\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leapYear = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eyear\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ((year % \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) \u0026amp;\u0026amp; (year % \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e !== \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) || (year % \u003cspan class=\"hljs-number\"\u003e400\u003c/span\u003e === \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)) {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\r\n    }\r\n  };\r\n\r\n  \u003cspan class=\"hljs-comment\"\u003e// user interface logic\u003c/span\u003e\r\n  $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"form#leap-year\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n      event.preventDefault();\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e year = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e($(\u003cspan class=\"hljs-string\"\u003e\"input#year\"\u003c/span\u003e).val());\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = leapYear(year);\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".year\"\u003c/span\u003e).text(year);\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!result) {                 \u003cspan class=\"hljs-comment\"\u003e// same as writing if (result === false)\u003c/span\u003e\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".not\"\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"not\"\u003c/span\u003e);\r\n      } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".not\"\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n      }\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#result\"\u003c/span\u003e).show();\r\n    });\r\n  });\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the code above, we do the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd the contents of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eyear\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable into a span with the class\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eyear\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eIf the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe set the text of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enot\u003c/code\u003e\u003cspan\u003e \u003c/span\u003espan to \"not\", so that our page will read \"is not a leap year\".\u003c/li\u003e\r\n\u003cli\u003eIf the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe instead empty the\u003ccode class=\"prettyprint\"\u003enot\u003c/code\u003e\u003cspan\u003e \u003c/span\u003espan, so that our page will read \"is a leap year\".\u003c/li\u003e\r\n\u003cli\u003eFinally, we show our entire\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ediv so that the user can see their results.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eSeparation of Logic\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eIt is important to understand why this code belongs in user interface logic.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eWe could\u003cspan\u003e \u003c/span\u003e\u003cem\u003etheoretically\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ejust have our business logic return a formatted string that said \"____ is a leap year\", or \"_____ is NOT a leap year\", but this seriously mixes up business and user interface logics. After all, we're displaying our results in sentence format\u003cspan\u003e \u003c/span\u003e\u003cem\u003efor the user's sake\u003c/em\u003e. It's therefore\u003cspan\u003e \u003c/span\u003e\u003cem\u003euser\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einterface logic.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, what if we later wanted to change the message containing the user's results? We would have to modify the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebusiness\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elogic to change the\u003cspan\u003e \u003c/span\u003e\u003cem\u003edisplay\u003c/em\u003e! This may not seem like a big deal in such a small app, but imagine doing something similar in an application with thousands, even\u003cspan\u003e \u003c/span\u003e\u003cem\u003emillions\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof lines of code! You'd have to unravel countless lines of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eback-end\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elogic just to change the way something is displayed to the user.\u003c/p\u003e\r\n\u003cp\u003eFocus on developing good habits early on, even if they seem like overkill for these smaller projects. Not only will this make it easier to navigate your own code as our projects grow in size and complexity, but it will make it easier for other developers to collaborate with you, and is considered far more professional.\u003c/p\u003e\r\n\u003cp\u003eAlways keep your business and user interface logic separate. Follow the BDD process to clearly outline your program's intended behaviors. Focus on one behavior at a time. And write the minimum code to make each spec pass. Developing these habits now will make tackling the complex applications you'll soon build\u003cspan\u003e \u003c/span\u003e\u003cem\u003efar\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eeasier!\u003c/p\u003e\r\n \r\n \r\n\u003ch1\u003ePractice: Leap Year, Pig Latin\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eBetween now and next Monday, begin brainstorming potential group project ideas.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Focus on breaking your project down into small behavior examples and coding one behavior (also known as a \"specification\" or \"spec\") at a time. Make a list of specifications with input and output examples\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewriting any code. Also, as our projects grow in size, continue to practice good organization by keeping business logic and user interface logic distinctly separate.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003ePretend you have an application that counts the number of vowels in a string. This application has specs detailing each behavior it must exhibit. However, they're out of order! Reorder the following list of specs from the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esimplest possible behavior\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emost complex\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehavior with your partner. Consult with other pairs, if necessary:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe program recognizes vowels in a multiple-word sentence, regardless of capitalization.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"CATS CATERED THE EVENT\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 7\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes a single vowel in a multiple-character word.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"cat\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 1\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes a single vowel.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"a\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 1\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes multiple vowels in a single word.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"cater\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 2\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes a single vowel, regardless of case.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"A\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 1\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes all vowels in a multiple-word sentence, regardless of inconsistent capitalization.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"CaTS CATEReD ThE EveNT\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 7\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program ignores non-alphabetical characters, since they cannot be vowels.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"4%\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 0\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes vowels in a multiple-word sentence.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"cats catered the event\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 7\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eLeap Year\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the leap year lessons to build an application that identifies whether a given year is a leap year. Make each of the specs detailed in the leap year lessons \"pass\" (ie: your program returns the expected output for the expected input).\u003c/p\u003e\r\n\u003ch4\u003eSpecs from Leap Year Lessons\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe program should return when a year is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea leap year.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 1993\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: false\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program should return 'true' for years divisible by 4, since those are leap years.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 2004\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: true\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program should return 'false' for years divisible by 100, since those are not leap years.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 1900\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: false\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program should return 'true' for years divisible by 400, since those are leap years.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 2000\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: true\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAll specs should be listed in the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003ePig Latin\u003c/h3\u003e\r\n\u003cp\u003eWrite a Pig Latin translator or should we say an\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"igPay atinLay anslatorTray\"\u003c/em\u003e?\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eRead all instructions carefully before beginning.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch4\u003eHow Pig Latin Works\u003c/h4\u003e\r\n\u003cp\u003eFirst, here are the rules of Pig Latin:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor words beginning with a vowel, add \"ay\" to the end.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor words beginning with one or more consonants, move all of the first consecutive consonants to the end, and add \"ay\".\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf the first consonants include \"qu\", move the \"u\" along with the \"q\". Don't forget about words like \"squeal\" where \"qu\" doesn't come first!\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor words beginning with \"y\", treat \"y\" as a consonant.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eInstructions\u003c/h4\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eBefore writing any code, make a list of specs detailing each behavior your program will have. Start with the simplest possible behavior, and slowly move up in complexity. To get you started, the first two specs are provided below.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eHave at least two other pairs check your specs before you begin coding.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eEnsure that each possible behavior is represented by a spec, and that they are ordered from simplest to most complex.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003ePlace your specs (and their example inputs and outputs) in your project's README.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCreate a basic user interface that allows your application to accept user input, and display output. This will allow us to manually test each spec.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eSlowly add business logic. Begin by focusing on the behavior outlined in your first, most simple spec. Implement the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eleast amount of logic necessary\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto create this behavior.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eManually test this behaviour by inputting the example input described by the spec into your application, and confirm you receive the correct output.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eOnce behavior outlined by the first spec is successfully implemented, repeat steps 5 - 7 for each subsequent spec. Do not move onto the next spec until the previous one passes.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch4\u003eHelpful Hints\u003c/h4\u003e\r\n\u003cp\u003eWhen you get to consonants, don't try to solve it all at once. Instead, start with an example of a word that only has one consonant; then a word with two consonants; then a word with three; and then tackle the exceptions to the rule, like \"qu\" and \"y\". Once your application can successfully translate single words, work on translating entire sentences. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.slice()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estring method may also come in handy.\u003c/p\u003e\r\n\u003ch4\u003eSpecs\u003c/h4\u003e\r\n\u003cp\u003eTo get you started, below are the first two \"plain English\" specs:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe program does nothing to non-alphabetical characters, since they do not contain consonants or vowels.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Input:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e3\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Output:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e3\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program adds \"ay\" to single-letter words beginning with a vowel.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Input:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ei\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Output:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eiay\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you are done with today's excercises, attempt the following as you explore further with regex.\u003c/p\u003e\r\n\u003ch4\u003eRefactor with Regular Expressions\u003c/h4\u003e\r\n\u003cp\u003eRefactor your code for the projects above using\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\"\u003eregular expressions\u003c/a\u003e. A handy place to try using regular expressions before implementing them is at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://rubular.com/\" target=\"_blank\"\u003eRubular\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch4\u003eBases\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eBinary\u003c/strong\u003e: Write a method to convert numbers from binary to decimal. The input should be a string, and the output an integer. Decimal is the normal system we use for counting. We start at 0, increment until we reach 9, and then reset back to 0 and add another number to the left. In binary, we also start at zero, but we only increment until we reach 1. Then we reset back to zero and add another number to the left.\u003c/p\u003e\r\n\u003cp\u003eHere are some example of numbers in decimal and binary:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs nginx\"\u003e\u003cspan class=\"hljs-title\"\u003eDecimal\u003c/span\u003e  Binary\r\n    \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e        \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e        \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e      \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e\r\n  ...      ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eTrinary\u003c/strong\u003e: You get where I'm going, right?\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eHexadecimal\u003c/strong\u003e: Here's what happens after 9...\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs nginx\"\u003e\u003cspan class=\"hljs-title\"\u003eDecimal\u003c/span\u003e  Hexadecimal\r\n  ...      ...\r\n   \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e        \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e        a\r\n  \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e        b\r\n  \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e        c\r\n  \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e        d\r\n  \u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e        e\r\n  \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e        f\r\n  \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e\r\n  ...     ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you get this far, write a method that takes two arguments: the number to be evaluated and the base you would like it to be evaluated in.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs the business logic and user interface logic distinctly separate?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive and in lower camelCase?\u003c/li\u003e\r\n\u003cli\u003eDoes the code have proper indentation and spacing throughout?\u003c/li\u003e\r\n\u003cli\u003eAre for loops being used correctly?\u003c/li\u003e\r\n\u003cli\u003eAre\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003eloops being used correctly?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs code broken down into plain English specs?\u003c/li\u003e\r\n\u003cli\u003eDo these specs accurately represent the behaviours required of the program?\u003c/li\u003e\r\n\u003cli\u003eAre there any additional specs you can think of?\u003c/li\u003e\r\n\u003cli\u003eIs the business and user interface logic well-separated?\u003c/li\u003e\r\n\u003cli\u003eDoes the application work as expected?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-literal-notation-slash-literal-notation-vs-constructors","title":"Monday: Literal Notation/ Literal Notation vs Constructors","type":"WikiPage","content":"\u003ch1\u003eObject Oriented Javascript\u003c/h1\u003e\r\n\u003ch3\u003eObject-Oriented JavaScript Objectives\u003c/h3\u003e\r\n\u003cp\u003eWe've learned about JavaScript data types like strings, numbers and booleans. We have also learned about JavaScript arrays which are collections of indexed data. This week we are going to learn about JavaScript\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eobjects\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ewhich collect data AND functions into a single\u003cspan\u003e \u003c/span\u003e\u003cem\u003eobject\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eunit. We will see how business logic and user interface logic work together in the creation and updating of objects.\u003c/p\u003e\r\n\u003cp\u003eAt the end of the week, you should be able to:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ebuild JavaScript objects with constructors\u003c/li\u003e\r\n\u003cli\u003eadd methods to JavaScript objects by creating prototypes\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch1\u003eJavascript Objects\u003c/h1\u003e\r\n\u003cdiv class=\"alert alert-danger\"\u003e\r\n\u003cp\u003eFor practice using JavaScript objects, see the end of the lesson text for guided exercises.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eJavaScript is an object-oriented programming language. Though we may not have realized it, we've already been working with JavaScript objects when we use data types like strings and numbers, or when we use a data collection like arrays. Even the functions we write are also objects in JavaScript. In this lesson, we will explore what it means to be an object in JavaScript.\u003c/p\u003e\r\n\u003cp\u003ePreviously, we have had variables that have stored strings, numbers, Booleans, arrays and functions. What happens when we want a variable to store much more information about the \"thing\" the variable represents? For example, if\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyou\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewere a variable and we wanted to store information about you (your name, your course level, your planned track, your enrollment status) in the single variable \"moringaStudent\" - we'd need more than a single string or a single array, we'd need an object!\u003c/p\u003e\r\n\u003cp\u003eIn technical terminology, objects are containers that\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eencapsulate\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edata - meaning all of the relevant data and functions for the thing that the variable name represents are kept together in a \"capsule\", better known as an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eobject\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat can be created and manipulated in our programs as a single unit.\u003c/p\u003e\r\n\u003cp\u003eHere is an example of an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emoringaStudent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e moringaStudent = {\r\n    firstName: \u003cspan class=\"hljs-string\"\u003e\"Charlie\"\u003c/span\u003e,\r\n    lastName: \u003cspan class=\"hljs-string\"\u003e\"Obina\"\u003c/span\u003e,\r\n    level: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\r\n    track: [\u003cspan class=\"hljs-string\"\u003e\"Ruby\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"JavaScript\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"Rails\"\u003c/span\u003e],\r\n    enrollmentStatus: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n  };\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's take a look at how this object is defined. We have our variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emoringaStudent\u003c/code\u003e. We assign it the value of an object by using the curly braces,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e{ }\u003c/code\u003e. This is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eliteral notation\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand we have used it previously to create strings by using quotes,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\" \"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand arrays by using brackets,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e[ ]\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eInside the curly braces are five properties for our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emoringaStudent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject: first name, last name, level, track, and enrollment status. Every property of a JavaScript object consists of a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ekey-value\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epair. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ekey\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the variable that describes the kind of information to be stored. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003evalue\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the specific value of the key. So, in our example, the first name property has a key called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand a value of \"Charlie\", the last name property has a key\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e, with a value of \"Bucket\" and so on with the remaining keys\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elevel\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrack\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eenrollmentStatus\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eEach key-value pair is separated by a colon. And pairs are separated from each other with a comma.\u003c/p\u003e\r\n\u003cp\u003eWe could write our object like this and it would also work:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e moringaStudent = {firstName: \u003cspan class=\"hljs-string\"\u003e\"Charlie\"\u003c/span\u003e, lastName: \u003cspan class=\"hljs-string\"\u003e\"Bucket\"\u003c/span\u003e, level: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, track: [\u003cspan class=\"hljs-string\"\u003e\"PHP\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"JavaScript\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"Drupal\"\u003c/span\u003e], enrollmentStatus: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e};\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, the formatting of the object with each property indented two spaces on a separate line is a convention used when writing JavaScript objects to make it easy to see each property. Imagine an object with hundreds of properties written on the same line. It would be a bit of a challenge to sort out the details.\u003c/p\u003e\r\n\u003cp\u003eProperty keys are always a JavaScript string (though quotes are not needed in this context) that starts with a letter. Property values can be any data type: strings, numbers, Booleans, arrays or even functions. When the value of a property is a function, we call it a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emethod\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eHere is an object with one property and one method. This method when called will make my cat \"speak\" by writing \"Meow\" to the console. (Previously, we have used\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003econsole.log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust for debugging, but we can use it for any message we'd like to see in the console.)\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myCat = {\r\n    name: \u003cspan class=\"hljs-string\"\u003e\"Kitty Kanyau\"\u003c/span\u003e,\r\n    speak: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Meow!\"\u003c/span\u003e);\r\n    }\r\n  };\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo keep it simple, you can think of properties as nouns and methods as verbs or actions.\u003c/p\u003e\r\n\u003cp\u003eSo, once we have an object, how do we use it? What do we do with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003espeak\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod?\u003c/p\u003e\r\n\u003cp\u003eTo access properties and methods on objects, we can use either\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edot notation\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebracket notation\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;myCat.name\r\n  \u003cspan class=\"hljs-string\"\u003e\"Kitty Kanyau\"\u003c/span\u003e\r\n  \u0026gt;myCat[\u003cspan class=\"hljs-string\"\u003e'name'\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"Kitty Kanyau\"\u003c/span\u003e\r\n  \u0026gt;myCat.speak()\r\n  Meow!\r\n  \u0026gt;myCat[\u003cspan class=\"hljs-string\"\u003e'speak'\u003c/span\u003e]()\r\n  Meow!\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDot notation is easier to write and read but bracket notation will additionally allow us to use properties with special characters, or select properties using variables. Until we need the additional functionality, we'll stick with dot notation.\u003c/p\u003e\r\n\u003cp\u003eLet's create an empty new dog object. We use the curly braces to signal JavaScript to create a new object.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog = {};\r\n  \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe built-in JavaScript function that creates a new dog object returns the value of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eundefined\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebut if we type\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can see that an empty object has been created for the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable.\u003c/p\u003e\r\n\u003cp\u003eNow, let's give our dog some properties using dot notation. Here our values are a string and a number\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;dog.name = \u003cspan class=\"hljs-string\"\u003e\"Bark Simba\"\u003c/span\u003e\r\n  \u003cspan class=\"hljs-string\"\u003e\"Bark Simba\"\u003c/span\u003e\r\n  \u0026gt;dog.age = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's add an array for a property value:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;dog.colors = [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e]\r\n  [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe value of a property comes with all of the functionality of its type. For example, we are able to use indexing on the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray as we've done with other arrays.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;dog.colors[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e\r\n  \u0026gt;dog.colors[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can use array methods on the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003epush\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich returns the new length of the array:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;dog.colors.push(\u003cspan class=\"hljs-string\"\u003e\"gray\"\u003c/span\u003e);\r\n  \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e\r\n  \u0026gt;dog.colors\r\n  [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"gray\"\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNumber methods on\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eage\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;dog.age = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u0026gt;dog.age + \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can also update any property by reassigning its value:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs bash\"\u003e\u0026gt;dog.name = \u003cspan class=\"hljs-string\"\u003e\"Rex\"\u003c/span\u003e\r\n  \u003cspan class=\"hljs-string\"\u003e\"Rex\"\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a method to our dog. This will be a property with a function as a value. In this case, we'll give our dog some\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ehowl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunctionality.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs javascript\"\u003e\u0026gt;dog.howl = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{ \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Aaaaaaaaaaaoooooooooooo!\"\u003c/span\u003e) }\r\n\r\n  \u0026gt;dog.howl()\r\n  Aaaaaaaaaaaoooooooooooo!\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith objects, we can use properties within other properties. What if we decided we wanted to calculate our dog's age in human years? Let's add another method to our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;dog.humanYears = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age * \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e}\r\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age * \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ehumanYears\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction has a keyword of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e. When\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis used in an object's method, it always refers to the object on which the method is called. So, when we run\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog.humanYears()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill always refer to the object,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e. (\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan also be used in other places, but it gets tricky depending on its context and we won't cover it in detail here.)\u003c/p\u003e\r\n\u003cp\u003eNow when we run\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog.humanYears()\u003c/code\u003e, we get 35.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Practice\u003c/h3\u003e\r\n\u003cp\u003eIn the JavaScript console, practice creating objects of your own. Feel free to follow along with this lesson or explore some objects of your own. Here is some guided practice to try.\u003c/p\u003e\r\n\u003cp\u003eCreate an object that stores information about a flower including name, color, and height.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eChange the color of your flower using dot notation.\u003c/li\u003e\r\n\u003cli\u003eChange the height of your flower using bracket notation.\u003c/li\u003e\r\n\u003cli\u003eAdd a property that indicates what kind of creatures help the flower with pollination. This includes bees, butterflies and birds.\u003c/li\u003e\r\n\u003cli\u003eAdd one more creature to your list: humans\u003c/li\u003e\r\n\u003cli\u003eWrite a method that allows the flower to grow. After the method is run, the height value should be increased.\u003c/li\u003e\r\n\u003cli\u003eView all of the properties and methods for your flower object.\u003c/li\u003e\r\n\u003cli\u003eExplore viewing, adding and updating more properties and methods on your flower object.\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003eTry using some of the string, number and array methods you have used before on the properties that store these types of data.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch1\u003eLiteral Notation vs Constructors\u003c/h1\u003e\r\n\u003ch2\u003eLiteral Notation\u003c/h2\u003e\r\n\u003cp\u003eIn the previous lesson we created objects using\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eLiteral Notation\u003c/strong\u003e. Let's explore further examples of what literal notation looks like, and how the process of creating objects may be streamlined by using constructors.\u003c/p\u003e\r\n\u003cp\u003eLet's say a dog walker wants to keep track of all dogs they walk.\u003c/p\u003e\r\n\u003cp\u003eWe'll create a dog object using literal notation:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog1 = {\r\n    name: \u003cspan class=\"hljs-string\"\u003e\"Falcor\"\u003c/span\u003e,\r\n    colors: [\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e],\r\n    age: \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\r\n  };\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we'll create another:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog2 = {\r\n    name: \u003cspan class=\"hljs-string\"\u003e\"Nola\"\u003c/span\u003e,\r\n    colors: [\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e],\r\n    age: \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\r\n  };\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd another:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog3 = {\r\n    name: \u003cspan class=\"hljs-string\"\u003e\"Patsy\"\u003c/span\u003e,\r\n    colors: [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e],\r\n    age: \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e,\r\n  };\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou may notice that this is getting a little repetitive. All of these dogs have the same attributes, and therefore this involves typing\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ename\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eover and over again, each time we want to create a new dog. Good news is, there is a much faster way to make\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects! Instead of using literal notation to manually create each individual\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, we can use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eConstructor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a blueprint.\u003c/p\u003e\r\n\u003ch2\u003eConstructors\u003c/h2\u003e\r\n\u003cp\u003eWe will write a constructor to create\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects momentarily, but first, what\u003cspan\u003e \u003c/span\u003e\u003cem\u003eis\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea constructor? The next lesson will introduce constructors and demonstrate how we can use constructors and prototypes to make our lives easier.\u003c/p\u003e\r\n\u003cp\u003eAfter we write a constructor we'll be able to create the same dogs we created in literal notation above, with these three simple lines of code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog1 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Falcor\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog2 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Nola\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e);\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog3 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Patsy\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e);\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see, this is\u003cspan\u003e \u003c/span\u003e\u003cem\u003efar\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eless code, and it's much more scaleable!\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-data-types","title":"Tuesday: Data Types","type":"WikiPage","content":"\u003ch1\u003eData Types\u003c/h1\u003e\r\n \r\n\u003cp\u003eYou've already seen\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enumbers\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003estrings\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebooleans\u003c/strong\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eundefined\u003c/strong\u003e. These are 4 of the 5 basic data types, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eprimitives\u003c/strong\u003e, in JavaScript. The other is\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enull\u003c/strong\u003e, which represents nothingness. Don't worry about\u003cspan\u003e \u003c/span\u003e\u003cem\u003enull\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efor now - we'll learn more about it down the road.\u003c/p\u003e\r\n\u003ch2\u003eData Types\u003c/h2\u003e\r\n\u003ch3\u003eNumber\u003c/h3\u003e\r\n\u003cp\u003eUnsurprisingly, the number type represents numbers.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003e42\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e3.14\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e-10\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(Stands for Not a Number, but is considered a number)\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eInfinity\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e-Infinity\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003evar favouriteNumber = 42;\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou can use certain methods on Numbers:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-number\"\u003e3.14159\u003c/span\u003e.toFixed(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"3.14\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eString\u003c/h3\u003e\r\n\u003cp\u003eAs you've seen, the string type represents text.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003e\"hello, world!\"\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003evar greeting = \"hello, world!\";\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou can use certain methods on strings:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.toUpperCase();\r\n      \u003cspan class=\"hljs-string\"\u003e\"HELLO\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.charAt(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"l\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.toUpperCase().charAt(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-string\"\u003e\"L\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eBoolean\u003c/h3\u003e\r\n\u003cp\u003eBooleans can only hold 2 possible values -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e \u0026gt; \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e \u0026gt; \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.charAt(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e) === \u003cspan class=\"hljs-string\"\u003e\"e\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e enrolledAtEpicodus = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou'll discover soon just how important booleans are to programming.\u003c/p\u003e\r\n\u003ch3\u003eUndefined\u003c/h3\u003e\r\n\u003cp\u003eThe undefined data type has only one possible value -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWhen declaring a variable without giving it a value (\u003ccode\u003evar myNumber;\u003c/code\u003e), JavaScript creates the variable without a value, hence\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eundefined\u003c/strong\u003e. Even when declaring a variable and assigning it a value at the same time (\u003ccode\u003evar favoriteNumber = 42;\u003c/code\u003e), JavaScript actually creates the variable initially without a value, temporarily giving it a value of\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eundefined\u003c/strong\u003e, before then assigning it the value to the right of the equals sign. This is kind of a subtle point, so don't worry too much about it at the moment.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAdditionally, there are some functions and methods that do not return any value, in which case the return value is actually\u003cspan\u003e \u003c/span\u003e\u003cem\u003eundefined\u003c/em\u003e. (You'll learn more about this when we learn how to write our own methods and functions.)\u003c/p\u003e\r\n\u003ch2\u003eData Type Detection\u003c/h2\u003e\r\n\u003cp\u003eIt's important to understand the difference between the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the string \"5\". To the computer, they are two entirely different things, as illustrated by this example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myOtherNumber = \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myText = \u003cspan class=\"hljs-string\"\u003e\"5\"\u003c/span\u003e;\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myOtherText = \u003cspan class=\"hljs-string\"\u003e\"10\"\u003c/span\u003e;\r\n      \u0026gt; myNumber + myOtherNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e\r\n      \u0026gt; myText + myOtherText;\r\n      \u003cspan class=\"hljs-string\"\u003e\"510\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we added\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e10\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe got\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e15\u003c/code\u003e, but when we added\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"10\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"5\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eit concatenated the two strings together.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLikewise, the boolean\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not the same as the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"true\"\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIn the example above, somewhat confusingly, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator works on both numbers and strings - just differently. Usually methods will only work on a specific data type. For example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e48432.78.toExponential();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eworks just fine, but trying to do\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"48432.78\".toExponential();\u003c/code\u003eresults in an error because there is no\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoExponential()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that works on a string. Likewise,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"hello\".charAt(2);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eworks, but\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e314159.charAt(2);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edoes not.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWe can check the data type of a variable or value as follows:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"number\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"5\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"boolean\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e greeting = \u003cspan class=\"hljs-string\"\u003e\"hello world\"\u003c/span\u003e;\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e greeting;\r\n      \u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eData Type Conversion\u003c/h2\u003e\r\n\u003cp\u003eOften input from a web browser will come in as a string and we will need to convert it to a number before working with it.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eWe can convert a string to a number by passing a string to the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eparseInt()\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efunction (more on functions soon):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedAge = \u003cspan class=\"hljs-string\"\u003e\"45\"\u003c/span\u003e;\r\n      \u0026gt; inputtedAge;\r\n      \u003cspan class=\"hljs-string\"\u003e\"45\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e inputtedAge;\r\n      \u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myAge = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(inputtedAge);\r\n      \u0026gt; myAge;\r\n      \u003cspan class=\"hljs-number\"\u003e45\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e myAge;\r\n      \u003cspan class=\"hljs-string\"\u003e\"number\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote that if you try to use parseInt() to convert a string not actually containing a number, the result is the \"number\"\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e name = \u003cspan class=\"hljs-string\"\u003e\"Andrea\"\u003c/span\u003e;\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nonsense = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(name);\r\n      \u0026gt; nonsense;\r\n      \u003cspan class=\"hljs-literal\"\u003eNaN\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you need to go the other way around, you can convert a number to a string by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoString()\u003c/code\u003emethod on the number:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e;\r\n      \u0026gt; myNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e myNumber;\r\n      \u003cspan class=\"hljs-string\"\u003e\"number\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e convertedNumber = myNumber.toString();\r\n      \u0026gt; convertedNumber;\r\n      \u003cspan class=\"hljs-string\"\u003e\"42\"\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e convertedNumber;\r\n      \u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Data Types\u003c/h2\u003e\r\n\u003cp\u003eGoal: In the Data Types lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e5 data types - number, string, boolean, undefined, null\u003c/li\u003e\r\n\u003cli\u003eMethods are generally specific to a data type\u003c/li\u003e\r\n\u003cli\u003eHow to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etypeof\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto check data type\u003c/li\u003e\r\n\u003cli\u003eHow to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.toString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto convert between numbers and strings\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eExplore these different data types and their corresponding methods by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat data type is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e? What about\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eInfinity\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eHow do we tell what data type something is?\u003c/li\u003e\r\n\u003cli\u003eName one way to convert something of one data type into another data type.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eData Types Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice checking and converting data types by doing the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet a variable equal to your favorite number and check the data type.\u003c/li\u003e\r\n\u003cli\u003eThen, create a new variable converting the previous variable to a string. Check the data type again.\u003c/li\u003e\r\n\u003cli\u003eNext, create a third variable, converting this string variable back to a number. Check the data type one more time.\u003c/li\u003e\r\n\u003cli\u003eCompare the first and third variables using === to confirm that they are equal.\u003c/li\u003e\r\n\u003cli\u003eCompare the first and second variables or second and third variables to confirm that they are NOT equal.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-git-html-and-css","title":"Monday: Git, HTML, and CSS","type":"WikiPage","content":"\u003ch1\u003eGit, HTML, and CSS\u003c/h1\u003e\r\n\u003cp\u003eThis week we will be learning the building blocks of making basic web pages: HTML and CSS. We will also focus on using the command line and Git to create a daily workflow for our coding projects.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003eDaily Goals\u003c/h2\u003e\r\n\u003cp\u003eEveryone learns at a different pace. Understanding is the most important goal every day. If you feel like you will not be able to complete all of the lessons on a given day, talk to a teacher about ways to ensure that you are covering the day's objectives. Always focus on understanding the concepts at hand, not finishing the work as quickly as possible. Lessons that have \"Homework\" in the title indicate that the work is expected to be read outside of class hours, and not during class.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePlan\u003c/h2\u003e\r\n\u003cp\u003eWe will begin this week by practicing the command line, Git, Github, and exploring basic HTML. We'll create READMEs to include extra information with our projects on Github. We'll also learn a formatting language called Markdown to format READMEs. Then, we'll explore basic CSS to add styling to our web pages, and actually publish our sites online! Later in the week we will dive deeper into CSS by using divs and spans, floats, cascading, classes, ids, and the box model. Finally, we'll explore a tool called Bootstrap that offers even more powerful styling capability. You're in for a great time!\u003c/p\u003e\r\n\u003cp\u003eAt the end of this section, you will be able to:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eNavigate the command line to access and create directories and files\u003c/li\u003e\r\n\u003cli\u003eUse Git and GitHub to track the creation of static web pages\u003c/li\u003e\r\n\u003cli\u003eCreate a static webpage using HTML\u003c/li\u003e\r\n\u003cli\u003eStyle a static webpage using custom CSS rules in a linked stylesheet\u003c/li\u003e\r\n\u003cli\u003eCreate a project README.md in Markdown\u003c/li\u003e\r\n\u003cli\u003eApply Bootstrap rules and classes\u003c/li\u003e\r\n\u003cli\u003eAdapt a webpage for responsive design\u003c/li\u003e\r\n\u003c/ol\u003e\r\n \r\n \r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003eAt the end of this section, you will complete an independent project. Your instructor will review this project for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse the most common HTML tags:\r\n\u003cul\u003e\r\n\u003cli\u003ep, h, ul, ol, li, em, strong, a, img, div, span\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eUse Bootstrap classes to style your page\u003c/li\u003e\r\n\u003cli\u003eCreate a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eImplement standard indentation and spacing conventions of HTML and CSS\u003c/li\u003e\r\n\u003cli\u003eMake Git commits regularly with clear messages that finish the phrase \"It will…\"\u003c/li\u003e\r\n\u003cli\u003eAdd a README to the GitHub repository that includes:\r\n\u003cul\u003e\r\n\u003cli\u003eAuthor name\u003c/li\u003e\r\n\u003cli\u003eProject or program name\u003c/li\u003e\r\n\u003cli\u003eDescription of program\u003c/li\u003e\r\n\u003cli\u003eProgram setup instructions\u003c/li\u003e\r\n\u003cli\u003eLink to live version of site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eCopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":true},{"exportId":"wednesday-floats","title":"Wednesday: Floats","type":"WikiPage","content":"\u003cp\u003eAll the pages we've made so far have been laid out pretty simply - top to bottom for block elements, and left to right for inline elements. But often we will want our pages to have more complexity, with columns or a sidebar, or text wrapping around an image. We can use floats to design these kinds of layouts.\u003c/p\u003e\r\n\u003cp\u003eLet's see what this looks like. Here's an example of text wrapping around an image:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/mango.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"An image of a ripe mango.\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes are one of the world's favorite fruits. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd here's the CSS rule:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we pull up the page, we can see that the image \"floats\" to the left, and the text wraps to the right of it. You can resize your browser window to see that when the area for the text exceeds the image size, the text flows underneath the image. If you'd like, you can also make the text float to the right by using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efloat: right;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead.\u003c/p\u003e\r\n\u003cp\u003eLet's see how we can use floats to create a sidebar:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eAll about mangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"sidebar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eEating mangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes are delicious! Here are some ways to enjoy them:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eBy themselves\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eSmoothies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eFruit salad\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eWith coconut rice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"main\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes are one of the world's favorite fruits. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's the CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.sidebar\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e30%\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: right\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellow\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and now we have a yellow sidebar on the right of the page. Let's see one more example of floats and make some columns on the page:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eColumns\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's see some columns!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith the CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.column\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e350px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left\u003c/span\u003e;\r\n  }\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we have columns! As you can see, floats are a useful way to lay out web pages.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-cascading-and-inheritance","title":"Wednesday: Cascading and Inheritance","type":"WikiPage","content":"\u003ch1\u003e \u003c/h1\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eYou may have noticed that, in earlier lessons, we defined a style for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, and it was applied to the text that was inside of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags. This is called inheritance: since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags are nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003etags, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags inherit the styles given to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003es.\u003c/p\u003e\r\n\u003cp\u003eOn the other hand, when we applied a style to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags on the same page as a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, it was not applied to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare not nested within another, so their styles are applied independently.\u003c/p\u003e\r\n\u003cp\u003eWe can use inheritance to change the font for the entire web page like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-family\u003c/span\u003e: sans-serif\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSince all of the other elements in the web page are nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, all of the text for the page will be Sans Serif.\u003c/p\u003e\r\n\u003cp\u003eLet's see how we can use cascading to target specific child elements. For example, take this HTML:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eCats vs Dogs\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eCats vs Dogs: the Definitive Guide\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to the ultimate showdown between cats and dogs. May the best one win!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cats\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's why cats are great. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eFind out more about cats \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://www.example.com/cats.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003ehere\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"dogs\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's why dogs are great. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eFind out more about dogs \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://www.example.com/dogs.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003ehere\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWho will win? You will be the judge.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSay we want to color-code each paragraph so that we can tell which paragraphs are about cats and which ones are about dogs. Here is how we can style the paragraphs in each div differently:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.cats\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: coral\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.dogs\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: steelblue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese rules tell the page that all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecats\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass need the background color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecoral\u003c/code\u003e, and all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edogs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass need the background color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esteelblue\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou can nest even further down:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.cats\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e: bold\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.dogs\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can actually nest as far down as you like. A word of caution, however: anything more than 3 or 4 levels deep is usually a sign that you should re-evaluate what you are trying to accomplish with your CSS. Chances are, there's a much more efficient way to accomplish what you're attempting to do.\u003c/p\u003e\r\n\u003cp\u003eNow, consider the following rules:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.dogs\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e: bold\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e: normal\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen it comes to CSS rules, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emore specific\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erule is applied. In this example, a link in a paragraph in an element with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edogs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass will be bold, because the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.dogs p a\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector is more specific than the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ea\u003c/code\u003eselector. This is called specificity.\u003c/p\u003e\r\n\u003cp\u003eThere's one more thing I'd like to cover about cascading: if two rules have the same specificity, the last one wins - in other words, the one that's the farthest down in the CSS file takes precedence. When more than one CSS file is linked in the page head, then again, the furthest one down takes precedence.\u003c/p\u003e\r\n\u003cp\u003eOccasionally, you'll run into HTML that looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003estyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"float: left\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cute-kitten.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the style is embedded in the HTML using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyle\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyle=\"float: left\"\u003c/code\u003e. This is called an inline style, and it should be avoided at all costs! It defeats the purpose of CSS when you do this, because it means that now you can't reuse your styles and keep them in one place. This is not a common practice, but you still may run into it every once in awhile. The main takeaway here is that if you see an inline style, it takes precedence over what's defined in your CSS.\u003c/p\u003e\r\n\u003cp\u003eThere are some additional rules about which style takes precedence in more complicated situations, but that's beyond the scope of what we're learning here.\u003c/p\u003e","frontPage":false},{"exportId":"monday-variables","title":"Monday: Variables","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eAdditional tips\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efor naming JavaScript variables:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eVariables should begin with a letter.\u003c/li\u003e\r\n\u003cli\u003eVariables are case sensitive (myNumber is a\u003cspan\u003e \u003c/span\u003e\u003cem\u003edifferent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003evariable than myNUMBER).\u003c/li\u003e\r\n\u003cli\u003eUse clear names that describe the value being stored like myNumber.\u003c/li\u003e\r\n\u003cli\u003eAlways name your variables in a manner\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ethat will be easy for other developers to understand\u003c/strong\u003e. Avoid vague letters or initials. (For example: var x = 45 doesn't tell us what the value is. Is 45 an age, a distance, size, a time?...)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTry this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e45\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n    \u0026gt; myNumber;\r\n    \u003cspan class=\"hljs-number\"\u003e45\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003emyNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003evariable\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat we set equal to 45. On the second line, when we type myNumber and press Enter, JavaScript returns the value of the variable. In JavaScript, it's conventional to give variables names that start with a lowercase letter, and if they are more than one word, to capitalize the first letter of subsequent words. This is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elower camel case\u003c/strong\u003e, because the capitalized letters look like a camel's humps... or something. Sometimes you'll see a variable initially set without the var keyword, like this:\u003c/p\u003e\r\n\u003ccode class=\"javascript\"\u003emyNumber = 45;\u003c/code\u003e\r\n\u003cp\u003eThis works... most of the time, but it can cause\u003cspan\u003e \u003c/span\u003e\u003cem\u003ereally\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebad bugs down the road. Get in the habit of using the var keyword whenever you create a new variable, and you'll save yourself some massive headaches later. You can change the value of a variable:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myNumber = \u003cspan class=\"hljs-number\"\u003e45\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; myNumber = \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e\r\n      \u0026gt; myNumber;\r\n      \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can do arithmetic with your variables:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteNumber = \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; favoriteNumber * \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-number\"\u003e52\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDoes the variable change when you perform arithmetic on it?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteNumber = \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; favoriteNumber + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNope. But what if we do:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteNumber = \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt;favoriteNumber = favoriteNumber + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere’s a shortcut:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efavoriteNumber += 1\u003c/code\u003e. You can use more than one variable at a time, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num1 = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num2 = \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num3 = num1 + num2;\r\n      \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n      \u0026gt; num3\r\n      \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDon't worry for the moment about that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturn value. Technically speaking, it says\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause declaration of a variable first creates a variable without a value - hence\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e- before assigning it the value that comes to the right of the equals (\u003ccode\u003e=\u003c/code\u003e) sign.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Variables\u003c/h2\u003e\r\n\u003cp\u003eGoal: So far we have learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eVariables, in JavaScript, are written in lower camelcase\u003c/li\u003e\r\n\u003cli\u003eVariables are set using the var keyword\u003c/li\u003e\r\n\u003cli\u003eVariables can be used in arithmetic\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice creating and utilizing variables by completing the exercises listed below. Variables are a fundamental building block of programming; so begin getting comfortable with them now!\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eused? What does it mean?\u003c/li\u003e\r\n\u003cli\u003eHow can we use a variable after we've defined it?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eVariables Practice\u003c/h3\u003e\r\n\u003cp\u003eHere are a few exercises for you to practice using variables:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eequal to your name. Put your name in quotation marks.\u003c/li\u003e\r\n\u003cli\u003eDisplay the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the console.\u003c/li\u003e\r\n\u003cli\u003eChange the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeName\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eSet a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efavoriteNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eequal to your favorite number.\u003c/li\u003e\r\n\u003cli\u003eCalculate what your favorite number divided by 2 is.\u003c/li\u003e\r\n\u003cli\u003eSet another variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emichaelsFavorite\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eequal to 13.\u003c/li\u003e\r\n\u003cli\u003eChange the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emichaelsFavorite\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto 7.\u003c/li\u003e\r\n\u003cli\u003eSubtract your favorite number from mine.\u003c/li\u003e\r\n\u003cli\u003eChange the value of my favorite number to be 26 times its current value.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-practice-creating-a-web-page","title":"Monday: Practice Creating a Web Page","type":"WikiPage","content":"\u003ch1\u003ePractice: Creating a Web Page\u003c/h1\u003e\r\n\u003cp\u003eGoal: familiarize yourself with the basic building blocks of a webpage by creating a basic website.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003cp\u003eDiscuss the following questions with your partner:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWhat are the sections that make up every web page?\u003c/li\u003e\r\n\u003cli\u003eIf we want something to show up on the page when we open it in the browser, where would it go?\u003c/li\u003e\r\n\u003cli\u003eIf we wanted to change the little icon that displays next to the page title, would that code go in the\u003cspan\u003e \u003c/span\u003e\u003ccode data-redactor-tag=\"code\"\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor the\u003cspan\u003e \u003c/span\u003e\u003ccode data-redactor-tag=\"code\"\u003e\u0026lt;body\u0026gt;\u003c/code\u003e?\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-11-favicon.png\" data-verified=\"redactor\"\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWork through the above lesson with your partner to create your first web page. Remember to document your process on Git!\u003c/li\u003e\r\n\u003cli\u003eCreate a second web page in the same project folder, and this one will be all about your favorite things. Name it\u003cspan\u003e \u003c/span\u003e\u003cem data-redactor-tag=\"em\"\u003emy-favorite-things.html\u003c/em\u003e. We can't do too much with the page right now but go through the process of creating the page and give it an appropriate title all the same. You will be practicing your skills and add to this page in upcoming lessons.The folder structure of\u003cspan\u003e \u003c/span\u003e\u003cem data-redactor-tag=\"em\"\u003emy-first-website\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould look like this:\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-18-hello_world_folder_structure_initial.png\" data-verified=\"redactor\"\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e","frontPage":false},{"exportId":"tuesday-debugging-html-and-css","title":"Tuesday: Debugging HTML and CSS","type":"WikiPage","content":"\u003cp\u003eLearning to debug your code is an essential skill as a developer. There are many debugging techniques out there, and I'm going to introduce you to a few techniques you will use all the time for HTML and CSS.\u003c/p\u003e\r\n\u003cp\u003eThese instructions are for Google Chrome. Both the JavaScript Console and Inspect panel discussed below are part of Chrome Developer Tools, or DevTools.\u003c/p\u003e\r\n\u003ch2\u003eJavaScript Console\u003c/h2\u003e\r\n\u003cp\u003eTo access DevTools, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMore Tools\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDeveloper Tools\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom Chrome's main menu (the three dots in the top right corner of the window). As a shortcut, you can also press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eShift\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJ\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Linux or Windows) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOption\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJ\u003c/em\u003e(Mac). You may also have to click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConsole\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the top of the window that pops open.\u003c/p\u003e\r\n\u003cp\u003eThis window is called the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJavaScript Console\u003c/em\u003e. Although we're not working with JavaScript, this is also where errors in the web page are logged. If you see something that looks like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFailed to load resource file:///Users/moringa/css/styles.css\u003c/code\u003e, Chrome is telling you that it was instructed to look for your CSS file at\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/moringa/css/styles.css\u003c/em\u003e, but the file wasn't there. In other words, you either gave the wrong path to the file, or you put the file in the wrong place.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-02-failed_to_load_resource.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eInspect Element\u003c/h2\u003e\r\n\u003cp\u003eAnother very useful tool in debugging web pages is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect Element\u003c/em\u003e. To access this tool, open any webpage and right-click a page element and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect\u003c/em\u003e. As a shortcut, you can also press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eShift\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eI\u003c/em\u003e(Linux or Windows) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOpt\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eI\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Mac). You may click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eElements\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the top of the DevTools window. A window will pop open revealing the source code for the page, with the selected element highlighted in blue.\u003c/p\u003e\r\n\u003cp\u003eWith an element selected, you can see CSS in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStyles\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab. This makes it easy to see what rules have been applied, including those that have been overridden due to specificity or order of other rules (these will be crossed out). Here is what the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStyles\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab looks like with overridden rules:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-04-overridden_rules.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eYou can also uncheck a rule to disable it, or double-click a rule to edit it and see the change live. You can even add new rules and see what they would do live.\u003c/p\u003e\r\n\u003cp\u003eYou won't have much space to work with\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect Element\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eat the bottom of your screen, so click the three vertical dots on the top right-hand side of the inspect element pane near the \"X\" (which you'd click to close the pane). Now, you'll see an option to move the pane to the right-hand side of your browser (dock to right), move the pane to the bottom of the browser window (dock to bottom) or to open the pane in a completely separate window (undock into separate window).\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-03-inspect_element_dock_options.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eInspecting a web page is a fantastic way to see for yourself what makes a website tick. Try inspecting elements on this page to see what CSS rules are being applied.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-practice-customizing-bootstrap","title":"Thursday: Practice: Customizing Bootstrap","type":"WikiPage","content":"\u003cp\u003eGoal: Implement the Bootstrap grid in a project and understand how it works.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat are some of the benefits of using the Bootstrap grid system?\u003c/li\u003e\r\n\u003cli\u003eHow are rows used in the grid system?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-md-4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-md-12\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-md-4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-xs-4\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eHow many columns can fit in a row?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eContinue working on your friend's catering website.\u003c/p\u003e\r\n\u003cp\u003eFor the meals offered, include the following information: meal name, price, ingredients, allergens, and picture. Organize this information in a grid.\u003c/p\u003e\r\n\u003cp\u003eAdd your own stylesheet to customize the appearance of the site.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-practice-branching-and-merging","title":"Tuesday: Practice: Branching and Merging","type":"WikiPage","content":"\u003cp\u003eGoal: Now that you have spent some time learning about branching and merging, let’s practice! The goal of this exercise is to work on branching and merging along with your new CSS skills.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the benefit of branching?\u003c/li\u003e\r\n\u003cli\u003eHow do we create a new branch of a project?\u003c/li\u003e\r\n\u003cli\u003eWhy would we want to merge back into master?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eResort Website\u003c/h3\u003e\r\n\u003cp\u003eYou are hired by an investor to create a website for a private island resort that they are building.\u003c/p\u003e\r\n\u003cp\u003eYour website should have:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA main home page\u003c/li\u003e\r\n\u003cli\u003ePages for:\r\n\u003cul\u003e\r\n\u003cli\u003eaccommodations\u003c/li\u003e\r\n\u003cli\u003eactivities\u003c/li\u003e\r\n\u003cli\u003etravel arrangements\u003c/li\u003e\r\n\u003cli\u003epictures, etc.\u003c/li\u003e\r\n\u003cli\u003econtact information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe investor doesn't know exactly what style they want for the website, so they have asked you to use your best judgement and provide them with at least two options for styling so they can make their decision later.\u003c/p\u003e\r\n\u003cp\u003eMake a branch for each style and when you are done, call a teacher over so that the \"investor\" can see their options and decide which style they would prefer. Once the \"investor\" (your TM) has made their selection, merge that branch into master.\u003c/p\u003e\r\n\u003cp\u003eMake sure you have been making commits throughout building this project and make a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003ebranch to display it on GitHub Pages. And don't forget your README!\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you and your partner finish all activities for the day with time to spare, make a website for your favorite restaurant. Include a page to display the menu, a page with contact information and hours, and a homepage describing the cuisine, or restaurant's history. Add styles using CSS, and publish the site on GitHub Pages.\u003c/p\u003e","frontPage":false},{"exportId":"weekend-research-on-javascript-objects-and-object-oriented-programming","title":"Weekend: Research on Javascript Objects and Object Oriented Programming","type":"WikiPage","content":"\u003ch2\u003eObject Oriented JavaScript\u003c/h2\u003e\r\n\u003cp\u003eFor this weekend, let's take a look at some concepts in programming that are applied in many programming languages around the world. Do some reading and familiarize yourself with object oriented programming principles which include the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEncapsulation\u003c/li\u003e\r\n\u003cli\u003eData Abstraction\u003c/li\u003e\r\n\u003cli\u003ePolymorphism\u003c/li\u003e\r\n\u003cli\u003eInheritance\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe concept of object oriented programming has survived for over 40 years and some of the most popular languages that we have today heavily use this concept.\u003c/p\u003e\r\n\u003cp\u003eIn Javascript working with objects is pretty efficient as we shall observe in the coming week.\u003c/p\u003e\r\n \r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n \r\n\u003ch3\u003eResearch\u003c/h3\u003e\r\n\u003cp\u003eLook at working with objects in Javascript and applying object oriented programming in Javascript. You may use the following links to help you understand:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.w3schools.com/js/js_objects.asp\" target=\"_blank\"\u003eW3 Schools: Javascript Objects\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.tutorialspoint.com/javascript/javascript_objects.htm\" target=\"_blank\"\u003eTutorials Point: JavaScript Objects\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003cp\u003ePS: I have a prize for you for the weekend. It's something that I've always wanted to show you. Click\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://cdn.iwastesomuchtime.com/632014032559.jpg\" target=\"_blank\"\u003ehere\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto find out.\u003c/p\u003e","frontPage":false},{"exportId":"monday-hypertext-markup-language-html","title":"Monday: HyperText Markup Language(HTML)","type":"WikiPage","content":"\u003ch1\u003eHyperText Markup Language (HTML)\u003c/h1\u003e\r\n\u003cp\u003eMany people think that creating a web page involves really complicated code that requires considerable studying to understand. This is not necessarily the case. In the next lesson we will make a simple web page together. But before we do that, let's quickly go over what the World Wide Web is.\u003c/p\u003e\r\n\u003cp\u003eThe web is made up of mostly text files - like the ones you created to write your papers in high school - as well as some other files like images or videos. These files are stored on computers that are connected over networks. When you put a web site's address into your browser, you are really just requesting to see a particular file, or combination of files.\u003c/p\u003e\r\n\u003cp\u003eWe've already seen a basic HTML file with our Hello World and Goodbye web pages. Now, we're going to focus on the basics of HyperText Markup Language, or HTML, that we previously just copy and pasted.\u003c/p\u003e\r\n\u003cp\u003eIt looked a bit like this in Atom:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026lt;h1\u0026gt;HTML Lesson\u0026lt;/h1\u0026gt;\r\n\u0026lt;h2\u0026gt;For Moringa School\u0026lt;/h2\u0026gt;\r\n\r\n\u0026lt;p\u0026gt;The goal \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e lesson \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e to illustrate how simple HTML \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e to read \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e write \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e showing some text written \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e HTML \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e what it looks like \u003cspan class=\"hljs-keyword\"\u003ewhen\u003c/span\u003e it \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e displayed \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a web browser.\u0026lt;/p\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we open this file in our browser, it looks like this:\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-07-hello_world_webpage.png\"\u003e\u003cbr\u003e\r\n\u003cp\u003e\u003cstrong\u003eHyperText\u003c/strong\u003e, or the \"HT\" of HTML, is just a fancy word for text that links to something else. The \"ML\" of HTML stands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emarkup language\u003c/strong\u003e. As we can see in the example above, the text in the HTML file is normal text that is\u003cspan\u003e \u003c/span\u003e\u003cem\u003emarked up\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith instructions written inside of these angle brackets\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e, known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etags\u003c/strong\u003e. The actual language of HTML is the instructions that we wrap around the text to format it and as we'll see, instructions for many other things like images, links, videos and more.\u003c/p\u003e\r\n \r\n \r\n\u003ch1\u003eIndentation and Spacing\u003c/h1\u003e\r\n\u003cp\u003eBefore we start writing any HTML, it's important that we go over some rules to make sure that we're writing our code properly.\u003c/p\u003e\r\n\u003cp\u003eWhen writing HTML (or any other programming language), well-written code follows consistent indentation and spacing patterns. In some languages, indentation and spacing are required for the code to function properly. In HTML, inconsistent indentation and spacing will not impact the functionality of the web page, but will cause your code to be difficult to read and understand.\u003c/p\u003e\r\n\u003cp\u003eConsider this example of HTML with poor indentation and spacing:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e   \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e  Page Title\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHeader\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e  Page content   \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAt first glance, it's difficult to see where elements begin and end, and what elements are nested within each other.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNested\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis another way of saying that the start tag and end tags of one element are inside of the start and end tags of another element.\u003c/p\u003e\r\n\u003cp\u003eHere's the same code with proper indentation and spacing:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePage content\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMuch better!\u003c/p\u003e\r\n\u003cp\u003eIn HTML, start tags and end tags on different lines are always left-aligned with one another. For example, when I see the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, I can scan vertically down to see its closing tag. It's clear that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare nested within\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e. The same goes for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag alignment.\u003c/p\u003e\r\n\u003cp\u003eWhen an element is nested inside another element, it needs to be indented two spaces from the opening tag. You can see in the above example that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis indented two spaces from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis indented two spaces from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWith a text editor like Atom, you can use the tab key to indent quickly. If you use the tab option, make sure tabs are set to two spaces. Some defaults are set to other amounts, such as four spaces, which is too much white space for HTML and is not standard practice.\u003c/p\u003e\r\n\u003cp\u003eTo check your settings in Atom, go to the menu bar and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAtom\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePreferences\u003c/em\u003e, then choose the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEditor\u003c/em\u003emenu in the sidebar and scroll down to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTab Length\u003c/em\u003e.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-08-tab_length.jpeg\"\u003e\r\n\u003cp\u003eAlso, notice that there is no space between the text content of an element and its tags. For example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;Header\u0026lt;/h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas no spaces between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the word\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHeader\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eRegardless of the language you use to write code, learn its conventions for indentation and spacing. Getting in good habits now is much easier than breaking bad habits later. Practice consistency so that your code is easily understood by other developers, as well as yourself.\u003c/p\u003e\r\n \r\n \r\n\u003ch1\u003ePractice: Indentation and Spacing\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue developing good indentation and spacing habits while simultaneously exploring the anatomy of a basic website, and practice cloning Git repositories. These skills will be used nonstop during your time at Moringa School.\u003c/p\u003e","frontPage":false},{"exportId":"monday-introduction-to-javascript","title":"Monday: Introduction to Javascript","type":"WikiPage","content":"\u003ch1\u003eJavascript and Jquery\u003c/h1\u003e\r\n\u003cp\u003eWelcome to JavaScript and jQuery!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIn the next few weeks, your web pages are going to go from static to dynamic thanks to JavaScript and the JavaScript library, jQuery.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eJavascript\u003c/h2\u003e\r\n\u003cp\u003eBack in 1995, a developer at Netscape named Brendan Eich introduced JavaScript to the world. Despite Java and JavaScript both containing \"Java\" in their names, they're two distinct languages that have nothing to do with one another. The official name of JavaScript is ECMAScript which gets its name from the international organization that maintains it,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.ecma-international.org/\" target=\"_blank\"\u003eECMA (European Computer Manufacturer's Association)\u003c/a\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eJavaScript is a programming language used to make web pages interactive. Like HTML and CSS, you do not need to install anything to begin writing JavaScript or see it run on your users' computers. All modern browsers support JavaScript which means JavaScript that you write for your web pages will automatically run when your visitors load your web page in their browsers. In fact, JavaScript is the only scripting language that all browsers support so if you want a page to have dynamic content, learning JavaScript is a must.\u003c/p\u003e\r\n\u003ch2\u003ejQuery\u003c/h2\u003e\r\n\u003cp\u003e\u003ca href=\"https://jquery.com/\" target=\"_blank\"\u003ejQuery\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis a JavaScript library that makes it easier to incorporate JavaScript on your web pages. When we say it is a\u003cspan\u003e \u003c/span\u003e\u003cem\u003elibrary\u003c/em\u003e, we mean that many common tasks that would take many, many lines of JavaScript code to execute have been packaged into methods that you'll be able to use with a single line of code. These methods are always available and ready to use the same way you might check out a book at a library. The goal of jQuery is to allow its users to \"write less, do more\". It's also one of the primary ways we can add interactivity to our sites.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003eDocumentation and Resources\u003c/h2\u003e\r\n\u003cp\u003eJavaScript has been around for many years and there are many places for documentation and help online. Be wary of the resources you find online. There is a lot of bad information out there, especially on JavaScript. There are also many conflicting opinions about ways to accomplish the same task.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere are the primary sources we suggest for documentation and reference. If they seem overwhelming at first, don't be deterred. As your knowledge and ability grow, so too will your ability to navigate the documentation and resources.\u003c/p\u003e\r\n\u003ch2\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\"\u003eMozilla Developer Network (MDN)\u003c/a\u003e\u003c/h2\u003e\r\n\u003cp\u003eMDN is one of the best sources of documentation on JavaScript. The site includes guides, tutorials, reference, tools and resources for developers using JavaScript.\u003c/p\u003e\r\n\u003ch2\u003e\u003ca href=\"https://jquery.com/\" target=\"_blank\"\u003ejQuery Official Site\u003c/a\u003e\u003c/h2\u003e\r\n\u003cp\u003eThe official jQuery site has great documentation on all of the methods and tools that are available when you use the jQuery library.\u003c/p\u003e\r\n\u003ch2\u003e\u003ca href=\"http://stackoverflow.com/\" target=\"_blank\"\u003eStack Overflow\u003c/a\u003e\u003c/h2\u003e\r\n\u003cp\u003eStack Overflow is a good resource for finding answers to specific challenges that you are facing. It's a site for asking and answering questions about programming. You do need to be careful about what you find there, as there is plenty of bad information to go along with the good. Make sure to search to see if somebody has already answered your question before posting. Also, give back by answering questions for other people!\u003c/p\u003e\r\n\u003ch2\u003eSearch Engine\u003c/h2\u003e\r\n\u003cp\u003eFinally, if you're stuck on something, chances are, somebody has gotten stuck on it, too - try a search engine. To make sure you get up-to-date results, may find it helpful to limit your results to the past year (in Google, click Search tools in the bar above your search results, and then change All time to Past year). It's helpful when searching to add the language to your search so you don't find yourself weeding through results for other languages (e.g. \"adding an element to an array JavaScript\" or \"jQuery clicking a button\").\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003eJavaScript \u0026amp; jQuery Objectives\u003c/h2\u003e\r\n\u003cp\u003eIn this section, we will be learning the basics of JavaScript, the programming language of the web, and jQuery, an extensive JavaScript library to help make our webpages interactive. We'll start our exploration with the basic building blocks of JavaScript:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eData types\u003c/li\u003e\r\n\u003cli\u003eOperators\u003c/li\u003e\r\n\u003cli\u003eVariables\u003c/li\u003e\r\n\u003cli\u003eMethods\u003c/li\u003e\r\n\u003cli\u003eFunctions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAs you'll see when you explore other languages, these foundational elements are standard components throughout programming.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThen we will move on to the basics of jQuery:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLearn key jQuery concepts like callbacks and event handlers.\u003c/li\u003e\r\n\u003cli\u003eShow, hide and toggle HTML elements.\u003c/li\u003e\r\n\u003cli\u003eUnderstand the Document Object Model (DOM) and how JavaScript changes the displayed page, not the HTML.\u003c/li\u003e\r\n\u003cli\u003eTraverse and manipulate the DOM.\u003c/li\u003e\r\n\u003cli\u003eCreate forms to gather input from the user.\u003c/li\u003e\r\n\u003cli\u003eManipulate the attributes of HTML elements.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFinally, we will move into more advanced JavaScript:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eImplement branching which allows JavaScript to perform different actions based on different conditions that we create\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003eAt the end of this section, you'll have an opportunity to complete an independent project, which will be reviewed for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAll previous standards (last review's objectives) are in place\u003c/li\u003e\r\n\u003cli\u003eSite uses branching to return destination\u003c/li\u003e\r\n\u003cli\u003ejQuery is used to show and hide destination after questions are answered and submitted\u003c/li\u003e\r\n\u003cli\u003eForm gathers input from the user\u003c/li\u003e\r\n\u003cli\u003eVariable names are descriptive of what they represent\u003c/li\u003e\r\n\u003cli\u003eWeb page is styled using Bootstrap and custom CSS\u003c/li\u003e\r\n\u003cli\u003eYou are able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-practice-github-pages","title":"Tuesday:   Practice: GitHub Pages","type":"WikiPage","content":"\u003cp\u003eGoal: Walk through the process of creating and publishing to a GitHub pages page by publishing one of our previous projects.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following questions with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWe need to create something called a branch to publish our content on Github pages. We'll learn more about branches later, but for now, what is the specific name we must call the branch in order for Github pages to work correctly?\u003c/li\u003e\r\n\u003cli\u003eWhat is the easiest way to add new changes to a Github pages site after it's already been published?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003ePublish to GitHub Pages\u003c/h3\u003e\r\n\u003cp\u003eNow that you have learned how to host your web pages on GitHub Pages, go ahead and make your pet homepage display on GitHub Pages as well. Make sure that each project properly displays for you and your partner. If it isn't working, make sure you have confirmed your email address with GitHub.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-bootstrap-the-basics","title":"Thursday: Bootstrap: The Basics","type":"WikiPage","content":"\u003cp\u003eNow that we've gone over what Bootstrap does, why we would want to use it, and how to add it to a project, let's create a new project and start using some of its features.\u003c/p\u003e\r\n\u003cp\u003eLet's create a webpage to practice using Bootstrap. Create a new project named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-practice\u003c/em\u003e, and inside, create an HTML file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdd some basic starter code to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003eindex.html\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's preview this site in our browser before adding Bootstrap. Load up\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein your browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-04-bootstrap_test_no_styling.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you may have anticipated, we have some headers, lists, and paragraphs, but nothing terribly exciting. Now let's add some Bootstrap! As we covered in the previous lesson on Installing Bootstrap lesson, first we need to download the Bootstrap package from the website, and move the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile into this project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cp\u003eThen, add the link to the stylesheet in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esection of index.html:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we refresh the page, we can see that some styling has already been applied, without even needing to make any other changes:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-05-bootstrap_test_plusbootstrap.png\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eContainer\u003c/h2\u003e\r\n\u003cp\u003eLet's start adding some Bootstrap styles to our page. One of the most commonly used Bootstrap elements is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e. As the name suggests, it provides a container for content that sets the margins and padding according to the size of the user's viewport.\u003c/p\u003e\r\n\u003cp\u003eHere is how we add a container to our page:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      ...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe have added a div inside of the page body with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e, and placed all of the page content inside of that div.\u003c/p\u003e\r\n\u003cp\u003eGo ahead and refresh the page, and you should see that some space has been added around the page content.\u003c/p\u003e\r\n\u003cp\u003eRemember,\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis just a really big stylesheet. Do you recall how we added classes to HTML elements to style our pages? We add Bootstrap styles to our page in a similar way. The only difference is that instead of defining the styles for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass in our own stylesheet, they have already been written for us. All we need to do is include\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein our project, and we can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003eclass in the same way.\u003c/p\u003e\r\n\u003cp\u003eSee for yourself! Open up\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand search for the word \"container\". You can open the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSearch\u003c/em\u003epanel in Atom by typing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eF\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(the \"F\" here is for \"find\"). Alternatively, in the Atom menu, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFind\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFind in Buffer\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-05-find_container.gif\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou should see the following code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n\u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding-right\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin-right\u003c/span\u003e: auto\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: auto\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e750px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e992px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e970px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e1200px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1170px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSee? There's nothing very special here! Just some predefined values for padding, margins, and width. Bootstrap is simply CSS that has already been written for us to serve a specific purpose.\u003c/p\u003e\r\n\u003cp\u003eAlso, notice that if we resize the browser window, the space around the content responds to the change in window size. As you can see in the Bootstrap code sample above, media queries are built right in! This means that when we use Bootstrap elements in our pages, they are already responsive.\u003c/p\u003e\r\n\u003ch2\u003eJumbotron\u003c/h2\u003e\r\n\u003cp\u003eAnother common Bootstrap element is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/#jumbotron\"\u003eJumbotron\u003c/a\u003e. Jumbotrons come in handy when you want to feature a portion of the page. They are often placed at the top of the page to act as the page header.\u003c/p\u003e\r\n\u003cp\u003eCan you guess how we add a Jumbotron section to our page? Much like the container, we simply add a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejumbotron\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass wherever we'd like it to appear on the page. Let's add one around the page header content for our page now:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    ...\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and now we have a jumbotron at the top of our page.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-06-jumbotron.png\"\u003e\u003cspan\u003eResize the browser window and notice that the Jumbotron is also responsive: the margins and font size change in response to the viewport size.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eWells\u003c/h2\u003e\r\n\u003cp\u003eAnother useful Bootstrap component for organizing your webpages is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/#wells\"\u003ewell\u003c/a\u003e. It makes the content of a div appear inset on the page. As with other Bootstrap effects, we add it to an element with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewell\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's what it looks like in our browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-07-well.png\"\u003e\u003c/p\u003e\r\n\u003ch2\u003ePanels\u003c/h2\u003e\r\n\u003cp\u003eAnother similar organization element is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/#panels\"\u003epanel\u003c/a\u003e. The panel wraps the contents of a div in a box, and also provides a section for a heading with a title and a footer.\u003c/p\u003e\r\n\u003cp\u003eFirst, we create the panel like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-default\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSimilarly to other Bootstrap elements, we added the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the div. We also added a second class,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-default\u003c/code\u003e. By itself, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass describes the element, but does not actually have any features that appear on the screen. The second class,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-default\u003c/code\u003e, is called a helper class, which we will cover later in this lesson. It simply adds a border. You can add multiple Bootstrap classes to an element just like we did with our custom CSS classes.\u003c/p\u003e\r\n\u003cp\u003eWe can add heading and footer sections to a panel and format the body like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-default\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and now the panel looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-08-panel.png\"\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWe added a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-heading\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to format the area containing the heading.\u003c/li\u003e\r\n\u003cli\u003eWe added the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-title\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e, which adds a pre-styled heading. Note that the font size of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas overridden by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-title\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/li\u003e\r\n\u003cli\u003eWe added a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-body\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to format the area containing the panel's content.\u003c/li\u003e\r\n\u003cli\u003eWe added a div with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-footer\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto format an area for the panel's footer.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eGo ahead and resize the viewport and notice that all of these elements are responsive as well.\u003c/p\u003e\r\n\u003ch2\u003eHelper Classes\u003c/h2\u003e\r\n\u003cp\u003eAnother feature of Bootstrap is the wide variety of\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#helper-classes\"\u003ehelper classes\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eavailable to add to almost any element. As the name implies, these classes help us out by adding additional styles to the elements on a page.\u003c/p\u003e\r\n\u003cp\u003eLet's highlight a few list items on the page to remind us to come back to them later. We can do this by adding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebg-danger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to various\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags on the page, which will add a red background to the elements.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the class name stands for \"background\", and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edanger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name Bootstrap uses for this particular shade of red.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's what this looks like in the browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-09-helper_bg_danger.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBootstrap comes with a number of preset color values for its elements that can come in handy:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprimary\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuccess\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einfo\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewarning\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edanger\u003c/code\u003e. Let's add some color to the header of the same section, and use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebg-success\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to turn it green:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMany Bootstrap elements have helper classes built in. For example, we can add some color to our panel by adding the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-info\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ePreviously, we used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-default\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, which only gave the div a border. We replaced that with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-info\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, and we can see the change when we refresh the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D4-10-panel_info.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe panel is now blue!\u003c/p\u003e\r\n\u003cp\u003eAs we've seen in this lesson, Bootstrap is a useful tool to have in our arsenal as developers. We were able to quickly transform the layout and style of our pages - and make them responsive - simply by adding a few extra classes. Over the next few lessons, we will learn how to work with Bootstrap on a deeper level to make it work for us!\u003c/p\u003e\r\n\u003cp\u003eAs we move forward and build more websites, start using Bootstrap to quickly create polished, professional pages.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-calculator","title":"Tuesday: Calculator","type":"WikiPage","content":"\u003ch2\u003eCalculator: Business Logic\u003c/h2\u003e\r\n\u003cp\u003eNow that we can write custom JavaScript functions, let's create a simple calculator application! We'll begin with the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eback-end\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness logic\u003c/strong\u003e, and focus first on creating the ability to add numbers together. We'll later include subtraction, multiplication and division, and add the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efront-end\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003elogic.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBecause we've not yet learned about user interface/front-end logic, the difference between front-end logic and back-end logic (or business and user interface logics) might not feel very clear. This is okay! For now, simply know that what we're creating here is business, or back-end logic because it handles the core functionality and computations of the application. Later on we'll learn about jQuery and creating user interfaces, and we'll revisit the differences between the two types of logic.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's write the whole thing in JSFiddle first, then we'll transfer it into our own project.\u003c/p\u003e\r\n\u003ch3\u003eDefining an Addition Function\u003c/h3\u003e\r\n\u003cp\u003eWe've already written an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, so let's use that as a jumping off point. Clear out your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJSFiddle\u003c/em\u003eJavaScript box and put in just your custom\u003cspan\u003e \u003c/span\u003e\u003cem\u003eadd()\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efunction:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n    };\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAdd in a line at the bottom of your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJSFiddle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003escript, below the function definition. This line will call our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, passing it two arguments. The return value from that function is immediately passed to JavaScript's built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. When the script is run, it should pop up a dialog box with the value that the add function returns when passed those two arguments.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      alert(add(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e));\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eGathering User Input\u003c/h3\u003e\r\n\u003cp\u003eNow we have a simple (addition-only) calculator, but it isn't very useful because you have to go in and modify the code every time you want to do a new calculation. Let's add in the ability to collect input from the user. Remember that we can collect input through the built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, which takes a string as an argument and returns a string containing the user's input.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter a number:\"\u003c/span\u003e);\r\n\r\n      alert(number1);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNot very exciting. All we did was echo back to the user what they entered. But let's ask for two inputs and then use them as arguments to our function.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter a number:\"\u003c/span\u003e);\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter another number:\"\u003c/span\u003e);\r\n\r\n      alert(add(number1, number2));\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eParsing Integers\u003c/h3\u003e\r\n\u003cp\u003eOops. We have the problem we previously encountered where the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction returns strings, so the + operator we use inside of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction concatenates the two strings together rather than doing what we want. Because our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction expects numbers as arguments rather than strings, we must convert the inputs into numbers before calling our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter a number:\"\u003c/span\u003e));\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter another number:\"\u003c/span\u003e));\r\n\r\n      alert(add(number1, number2);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we're getting somewhere! In the next exercise, you'll add in support for subtraction, multiplication and division, but first let's move this code into a project so that we can save it and build on it without having to use JSFiddle.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not exit JSFiddle yet.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the next lesson we'll migrate the code we've created here in JSFiddle into a new project directory in Atom.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: Calculator Business Logic\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003eContinue to practice writing JavaScript functions by beginning the business logic for a calculator app. Later, we'll add user interface logic too, and familiarize ourselves with the differences between code for each, and how to keep them separated and organized.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between business and user interface logic?\u003c/li\u003e\r\n\u003cli\u003eWhat's another word for business logic? What about user interface logic?\u003c/li\u003e\r\n\u003cli\u003eHow do you provide a function multiple arguments?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eCalculator\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the previous lesson to begin building a calculator app. Once you've written the code detailed in that lesson, create a project and migrate your code from JSFiddle into Atom by doing the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a calculator project folder on your computer.\u003c/li\u003e\r\n\u003cli\u003eInitialize a git repository in your newly created project folder.\u003c/li\u003e\r\n\u003cli\u003eCreate js and css folders in your project folder.\u003c/li\u003e\r\n\u003cli\u003eCreate an empty scripts.js file in your project's js subdirectory.\u003c/li\u003e\r\n\u003cli\u003eCopy the code from your JSFiddle into your scripts.js file to save it.\u003c/li\u003e\r\n\u003cli\u003eCreate an HTML file in your project directory and include in it a link to your scripts file: \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt; (see below for example html file)\u003c/li\u003e\r\n\u003cli\u003eAdd a README.md file.\u003c/li\u003e\r\n\u003cli\u003eAdd everything to your local git repository and commit the changes.\u003c/li\u003e\r\n\u003cli\u003eCreate a calculator repository on GitHub and push your project to GitHub.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eExample\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHTML File\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eCalculator\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eExample\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejavascript file\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e add = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 + number2;\r\n      };\r\n\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number1 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter a number:\"\u003c/span\u003e));\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number2 = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter another number:\"\u003c/span\u003e));\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = add(number1, number2);\r\n      alert(result);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you open your HTML file in the web browser, it should run your code just like it did on JSFiddle; popping up prompt boxes for input and then an alert with the calculated result. If this isn't working, check that you correctly link to your scripts file and that your scripts file includes both the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and code that actually calls that function. If something on your page isn't working right, an excellent initial troubleshooting step is to check the JavaScript console to see if there are any helpful error messages that might point you in the right direction.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eNext, create functions to\u003cspan\u003e \u003c/span\u003e\u003cem\u003esubtract\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emultiply\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003edivide\u003c/em\u003e. Verify that all four work by changing the line near the bottom of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(currently reads\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar result = add(number1, number2);\u003c/code\u003e) to call different functions. For now you must manually change that line to choose between operations. In upcoming lessons we'll build a user interface for our calculator so that the user can choose between addition, subtraction, multiplication and division.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not build out the user interface yet. For now just focus on the business logic\u003c/strong\u003e.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Custom Functions Practice\u003c/h3\u003e\r\n\u003cp\u003e(You can do these in JSFiddle)\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWrite a function that calculates BMI using two arguments. Then write another function that prompts the user for their height and weight, uses the BMI function and alerts the user of their BMI.\u003c/li\u003e\r\n\u003cli\u003eWrite a function that converts temperature between celsius and fahrenheit.\u003c/li\u003e\r\n\u003cli\u003eWrite functions to be used by a cooking app that convert between units. For example, a function that converts gallons to liters. Create a project for this like you did for the calculator, so that you can return and build a front-end for this later.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003e\u003cem\u003eIf you finish today's lessons and exercises with time to spare, spend the rest of your day exploring the following additional content:\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eRegular Expressions\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eRegular Expressions\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare search strings used to locate and manipulate content that matches a particular pattern.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere is an example of a variable set to a regular expression:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sample_regex = \u003cspan class=\"hljs-regexp\"\u003e/moringaschool/gi\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe characters between the / slashes represent the regular expression. The characters following the regular expression,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egi\u003c/code\u003e, are modifiers. The g stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"global\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand the i stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecase insensitive\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's try it out:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eGo to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://regex101.com/\" target=\"_blank\"\u003eRegular Expressions 101\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eIn the Test String area, add this string: This is a big ol' long string with the word, Moringa, in it. We'll also add school, School, SCHooL and SchOOL just for searching fun.\u003c/li\u003e\r\n\u003cli\u003eIn the Regular Expression fields, add \"Moringaschool\" between the slashes / MoringaSchool /.\u003c/li\u003e\r\n\u003cli\u003eNotice that all lowercase\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMoringaSchool\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eappears in blue in the Test String area. This indicates a match with the pattern of the regular expression.\u003c/li\u003e\r\n\u003cli\u003eTry adding the i modifier. What happens?\u003c/li\u003e\r\n\u003cli\u003eTry adding the g modifier now. What happens?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTo learn all of the characters used when creating regular expressions, visit the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\"\u003eMDN documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eor just experiment on the Regex101 site paying attention the explanation area for what is happening. To use regular expressions to find and replace text that matches patterns, try using the built-in JavaScript method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.replace()\u003c/code\u003e`. Here's an example from MDN that you can try in JSFiddle:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e str = \u003cspan class=\"hljs-string\"\u003e'Twas the night before Xmas...'\u003c/span\u003e;\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newstr = str.replace(\u003cspan class=\"hljs-regexp\"\u003e/xmas/i\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Christmas'\u003c/span\u003e);\r\n      alert(newstr);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo practice how regular expressions create patterns, see how far you can get in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://regexcrossword.com/\" target=\"_blank\"\u003eRegex Crossword\u003c/a\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"monday-array-methods","title":"Monday: Array Methods","type":"WikiPage","content":"\u003ch2\u003eComparing Arrays\u003c/h2\u003e\r\n\u003cp\u003eUnlike other data types we've seen so far, it is not possible to compare two arrays by using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e===\u003c/code\u003ecomparison operator. In JavaScript, two primitive data type values can be the equal: For example, \"abc\" is the same as any other \"abc\". But arrays are different -\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eno two arrays are the same, even if they have the same elements inside\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eIf you need to compare the\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtents\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof two arrays, one way to accomplish this is to transform the arrays into strings using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etoString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction on each and comparing the return values. This will work when the elements are all data types that we have worked with previously, such as strings, numbers, and booleans.\u003c/p\u003e\r\n\u003cp\u003eTry this example in the console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\r\n  \u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e a = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]\r\n  \u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e b = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]\r\n  \u0026gt; a === b\r\n  \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n  \u0026gt; a.toString();\r\n  \u003cspan class=\"hljs-string\"\u003e\"1,2,3\"\u003c/span\u003e\r\n  \u0026gt; a.toString() === b.toString();\r\n  \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCloning Arrays\u003c/h2\u003e\r\n\u003cp\u003eHere is another scenario where arrays may operate differently than we expect.\u003c/p\u003e\r\n\u003cp\u003eSuppose we have an array, and we want to keep in its original form; but we also need to manipulate in some ways. We might have one variable hold the original array and another variable with a copy of the same array that we can change.\u003c/p\u003e\r\n\u003cp\u003eTry this in the console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\r\n  \u0026gt;var originalArray = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\r\n  \u0026gt; originalArray\r\n  [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\r\n  \u0026gt;var \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray = originalArray\r\n  \u0026gt;\u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray\r\n  [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\r\n  \u0026gt;\u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray.push(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e)\r\n  \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e\r\n  \u0026gt;\u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray\r\n  [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e]\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eoriginalArray\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elook like now? We haven't touched it, so we may assume it would retain its original value of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e[1,2,3,4,5]\u003c/code\u003e. But if we check it again in the console, we see:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u0026gt;\u003cspan class=\"hljs-tag\"\u003eoriginalArray\u003c/span\u003e\r\n  \u003cspan class=\"hljs-attr_selector\"\u003e[1, 2, 3, 4, 5, 6]\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn JavaScript, the array is stored in memory, and the two variables\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eoriginal_array\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eclone_array\u003c/code\u003eare called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epointers\u003c/strong\u003e. A pointer references an object in memory but is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe object itself. Therefore, as the array is changed, the new value is reflected in all of the variables that point to it.\u003c/p\u003e\r\n\u003cp\u003eThe way to clone an array\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esimply making another pointer is to create a new variable set to a new array:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003evar \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray = originalArray.slice()\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis ensures that the new array really is an entirely separate entity, instead of simply a pointer to the original array.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Resources\u003c/h3\u003e\r\n\u003cp\u003eFor more details on how the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eslice\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod works, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\" target=\"_blank\"\u003eMDN's Javascript documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon the Array.prototype.slice method.\u003c/p\u003e\r\n \r\n \r\n\u003ch2\u003ePractice: JavaScript Arrays\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Arrays section, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eArrays can contain numbers, strings, variables, expressions and other arrays\u003c/li\u003e\r\n\u003cli\u003eArrays have methods like\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epop()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ereverse()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epush()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow to access an element from an array\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFamiliarize yourself with arrays by completing the exercises below. First, we'll practice creating and manipulating arrays in the JavaScript console, then we'll move on to implementing them into a small project using the HTML and jQuery concepts we learned last week.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a pointer? When might we see one when working with JavaScript arrays?\u003c/li\u003e\r\n\u003cli\u003eHow can we use square bracket notation to isolate a single element in an array? What does this notation look like?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epush()\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWhat types of objects can be placed into a JavaScript array?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eArray Practice in the Console\u003c/h3\u003e\r\n\u003cp\u003ePlay around with arrays of your own by completing each of the following in the JavaScript console:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake an array of your siblings' names or your favorite movie characters' names.\u003c/li\u003e\r\n\u003cli\u003eMake an array of your parents' names.\u003c/li\u003e\r\n\u003cli\u003eCombine these two arrays using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003econcat()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eAdd your pets' names using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epush()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eReverse the order of the array.\u003c/li\u003e\r\n\u003cli\u003eAccess one of your parents' names using the square bracket notation.\u003c/li\u003e\r\n\u003cli\u003eUpdate the name of one of your parents using the index and square bracket notation.\u003c/li\u003e\r\n\u003cli\u003eCheck out methods from the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Methods\" target=\"_blank\"\u003eMDN\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(stick to the accessor and mutator methods sections). Try at least five of them.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFavorite Things Webpage\u003c/h3\u003e\r\n\u003cp\u003eWhen you and your partner are decently comfortable with using arrays in the JavaScript console, move on to implementing them into a full project:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eBuild a page with a form containing input fields where users may enter several of their favorite things.\u003c/li\u003e\r\n\u003cli\u003eThen, write code that gathers each of these form input values and places them into one array.\u003c/li\u003e\r\n\u003cli\u003eNext, build a new array out of the second, first and third elements of the first array, in that order. Use square bracket notation to access each element of the original array, and the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to add these elements from the original array into the new array.\u003c/li\u003e\r\n\u003cli\u003eFinally, display the new array for the user in your page's HTML as list items in a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag. Please present them nicely :)\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-practice-divs-and-spans","title":"Wednesday: Practice: Divs and Spans","type":"WikiPage","content":"\u003cp\u003eGoal: Practice adding divs and spans to pages.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between divs and spans?\u003c/li\u003e\r\n\u003cli\u003eIf I wanted to highlight a specific phrase in a paragraph, would it be better to use a div or a span?\u003c/li\u003e\r\n\u003cli\u003eIf I wanted to highlight a group of paragraphs, would it be better to use a div or a span?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to create the webpage about wildcats, dividing the page into important and unimportant sections. Then, choose one (or several) of the following to practice using divs and spans to style the page.\u003c/p\u003e\r\n\u003ch3\u003eTravel Agency\u003c/h3\u003e\r\n\u003cp\u003ePull up the page you made for Happy Trails Travel Agency and rewrite it to remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etropical\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epopular\u003c/code\u003eclasses from the elements themselves, and use divs instead.\u003c/p\u003e\r\n\u003ch3\u003eNews Article\u003c/h3\u003e\r\n\u003cp\u003eRewrite the news article webpage by removing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintroduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass from the elements themselves and create a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintroduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to hold the elements.\u003c/p\u003e\r\n\u003ch3\u003eResume\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage to display your resume. Use divs and spans to style sections of the page to list your work experience, skills, education, contact info, and any other sections you'd like your resume to have.\u003c/p\u003e","frontPage":false},{"exportId":"monday-introduction-and-interaction-with-the-command-line","title":"Monday: Introduction and interaction with the command line","type":"WikiPage","content":"\u003ch1\u003eIntroduction to the Command Line\u003c/h1\u003e\r\n\u003cp\u003eOne of the first tools every developer needs to get familiar with is the terminal. No matter which language you use, you will be using the terminal a lot. As a person new to programming, using the terminal interface of a computer may be something you'll do for the first time in this lesson.\u003c/p\u003e\r\n\u003cp\u003eWhen you open up your computer and want to access a file or program, it's likely that you do this using a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003egraphical user interface\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGUI\u003c/strong\u003e. This is simply the graphical, or visual, part of a computer program that the user can interact with.\u003c/p\u003e\r\n\u003cp\u003eFor example, when you want to open up your internet browser and you click on the icon in your computer's menu bar, you are using the GUI of your computer's operating system to access the program. The cursor to indicate where on the screen you are clicking and the icons that represent programs are both part of the graphical user interface.\u003c/p\u003e\r\n\u003cp\u003eAnother example of a program with a GUI is a word processor. The GUI gives us a document to type in, a cursor to see where we're typing, letters on the screen to represent the text we've typed, menu options to format our text and save or documents, and more.\u003c/p\u003e\r\n\u003cp\u003eThe GUI gives us a visual representation of what the computer program is doing underneath the hood. However, it's not the only way to interact with a computer. We can also use our computer's terminal interface, and you often will when developing. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eterminal\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a text-based interface that allows users to interact with the computer by typing commands into the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecommand prompt\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou have probably navigated the folders and files on your computer using a GUI such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFinder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon Mac or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDolphin\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon Linux. In the next lesson, we'll see how we can create, update, delete, and navigate folders and files using the terminal. We'll also learn some additional functionality not available by using a GUI.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eAccessing the Terminal\u003c/h2\u003e\r\n\u003ch3\u003eUbuntu Setup\u003c/h3\u003e\r\n\u003cp\u003eThe Terminal application on a PC with Ubuntu installed can be accessed by pressing\u003cspan\u003e \u003c/span\u003e\u003cem\u003ectrl + Alt + T\u003c/em\u003e. Alternatively, you can locate the Terminal application by searching\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTerminal\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eonce you click on the ubuntu icon on the upper left side of your screen.\u003c/p\u003e\r\n\u003ch3\u003eMac Setup\u003c/h3\u003e\r\n\u003cp\u003eThe Terminal application on a Mac is located in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUtilities\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, which is located inside the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eApplications\u003c/em\u003efolder. Alternatively, you can locate the Terminal application by clicking on the magnifying glass icon at the upper right corner of the screen and typing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTerminal\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3\u003eWindows Setup\u003c/h3\u003e\r\n\u003cp\u003eOn Windows we need to use a terminal program as well. There are a lot of good options out there, but we recommend using a program called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGit Bash\u003c/strong\u003e. You can download it\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://git-for-windows.github.io/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCommand Prompt\u003c/h2\u003e\r\n\u003cp\u003eWhen you open up your computer's terminal, you should see a blank screen with a few lines of text in the corner, followed by a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$\u003c/code\u003e. This is called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eprompt\u003c/strong\u003e. It usually provides some contextual information such as who you are, your location on the computer, and other useful info. For example, the prompt on your computer might look something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~\u003c/span\u003e$\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this example,\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eguest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name of the user currently logged in\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003emoringa-Lenovo-B50-80\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the nickname of the computer we're using\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e~\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eindicates that we are located in the Home directory (we'll learn more about what this means later)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the end of the prompt\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTake note here that not all command prompts look the same. Your computer will likely have a different nickname or username, and you may be located somewhere else in the filesystem. There's no need to worry if the prompt on your computer looks different from the example above - this is totally normal.\u003c/p\u003e\r\n\u003cp\u003eAfter the prompt is a blinking grey rectangle, called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecursor\u003c/strong\u003e. This is where you will be typing commands.\u003c/p\u003e\r\n\u003cp\u003eBoth in the curriculum and in resources online, you will often see commands preceded by a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$\u003c/code\u003e. When typing the commands yourself, do not type the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- this is simply a common convention used to indicate that what follows is a command to be run.\u003c/p\u003e\r\n\u003cp\u003eNow that we have covered the basics of the terminal and command line, let's start using it. In the next lesson, we will learn some common and very useful commands, what they do, and how to use them.\u003c/p\u003e\r\n\u003ch1\u003eInteracting with the Command Line\u003c/h1\u003e\r\n\u003cp\u003eNow that we know what the command line is, how to access it, and what to use it for, let's start interacting with it. In this lesson, we will explore some of the most frequently used terminal commands. You will use these commands all the time at Moringa School, so start getting comfortable with them now.\u003c/p\u003e\r\n\u003cp\u003eTo type a command, simply open your terminal program and start typing. Anything you type will appear where the cursor is. Once you've typed the command, hit\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Linux or Windows) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Mac) to run it. For the remainder of this lesson,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill be used interchangeably.\u003c/p\u003e\r\n\u003ch3\u003eSee current location with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe first command on our journey will be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epwd\u003c/code\u003e, which prints your current location to the screen. It stands for \"print working directory\".\u003c/p\u003e\r\n\u003cp\u003eSee what happens when we use this command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eguest@moringa-Lenovo-B50-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e:~$ \u003cspan class=\"hljs-built_in\"\u003epwd\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter we hit\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn or Enter\u003c/em\u003e, we see a series of words separated by slashes (\u003ccode\u003e/\u003c/code\u003e), also known as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efile path\u003c/strong\u003e. Each of the words is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edirectory\u003c/strong\u003e, which is another word for a folder. So, in the example, the terminal returned:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs\"\u003e/home/jill\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis tells us that we are located inside of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejill\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, which is inside of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/p\u003e\r\n\u003cp\u003eThis default directory is also called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehome directory\u003c/strong\u003e, and it is a sort of \"entry point\" for a system, and contains all of a user's files, directories, and programs. Remember when we first opened up the terminal and saw that our location was represented by a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e~\u003c/code\u003e? The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e~\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esymbol refers to the home directory.\u003c/p\u003e\r\n\u003ch3\u003eList out contents of folder with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eNow that we know which folder we are in, let's see what's inside of the folder. The next command we will learn is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003els\u003c/code\u003e, which lists all the content of a folder (\u003ccode\u003els\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"list\"). When I type it on my computer, I see a list of all files and directories in that folder.\u003c/p\u003e\r\n\u003cp\u003eThis tells us that I have each of the following folders in my\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e/\u003cem\u003eGuest\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\n\u003cspan class=\"hljs-constant\"\u003eDocuments\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eDownloads\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eMusic\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003ePictures\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003ePublic\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eTemplates\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eVideos\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRemember, just like\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFinder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFile Explorer\u003c/em\u003e, the terminal interface lets us navigate and interact with our computer.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003els\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells us which files and folders are inside of a directory, just like the icons in the Graphical User Interface.\u003c/p\u003e\r\n\u003ch3\u003eChange folders with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eWhen we're using Finder and we want to move to a different folder, we find the icon for the folder where we want to go and double-click on it. In Terminal, we use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd folder-name\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efolder-name\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the name of the folder to which you'd like to navigate).\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"change directory\". Be sure to always type a space after any command that has an additional argument, such as the name of a directory in this example.\u003c/p\u003e\r\n\u003cp\u003eFor instance, in order to navigate to my\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, I use the command\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd \u003cspan class=\"hljs-constant\"\u003eDocuments\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter hitting\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e, the prompt reads\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e$\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice how\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDocuments\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enow precedes the `$`, indicating that our location has changed.\u003c/p\u003e\r\n\u003cp\u003eHere are a few more options to help you navigate your computer:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIf you type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand press the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ekey - with no directory specified - you'll go back to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome \u003c/em\u003efolder. (You can also type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd ~\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto go there.)\u003c/li\u003e\r\n\u003cli\u003eIf you type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd ..\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(that's two periods), you'll go to the directory above the one you're currently in. So if you're in your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, and type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd ..\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyou'll go to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCreate folders with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mkdir\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emkdir\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"make directory\". We create a folder with a command like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mkdir name-of-directory\u003c/code\u003e, replacing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename-of-directory\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith whatever we would like to name the folder. Make sure you are in your computer's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDesktop\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory and let's create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir moringa-prep\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003els\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon our current folder, we can see that it contains a new folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmoringa-prep\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eCreate new files with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etouch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand works a lot like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emkdir\u003c/code\u003e, but instead of creating a new directory, it creates a new file. The structure looks like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch new-file-name\u003c/code\u003e. For example, let's move to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003edirectory we just made:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd moringa-prep\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd let's create a new file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we list the files in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, we see that it contains\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmy-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote: If you're using Windows PowerShell, you can use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt; New-Item\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eCopy items with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cp\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecp\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"copy\", and it is used to copy files and directories. The basic structure of this command is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cp original-file new-file\u003c/code\u003e, where\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoriginal-file\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name of the original file, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew-file\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis what you want to name the copy. Here's how we would use it to create a copy of\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-file.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enamed\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanother-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecp my-first-file.html another-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we list the contents of the directory, we can see that there are two files:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nanother-file.html    my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe new file is an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindependent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecopy of the original, meaning that any changes to one do not affect the other.\u003c/p\u003e\r\n\u003cp\u003eA word of caution in naming copies. If there is already a file with the name of the new file in a folder, the old file will be overwritten and its contents will be lost, so be careful to give your new documents and folders a unique name.\u003c/p\u003e\r\n\u003ch3\u003eMove and rename items with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand stands for \"move\". It can both move and rename files. To see how this works, let's list the contents of our current directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nanother-file.html    my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's say we want to call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanother-file.html\u003c/em\u003e. We use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003ecommand to rename it like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emv another-file.html my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLike\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cp\u003c/code\u003e, the basic structure of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand requires two pieces of information: the name of the file we would like to rename or move; and the new name or location for the file or folder.\u003c/p\u003e\r\n\u003cp\u003eNow we can use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto see that the file has been renamed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmy-first-file.html    my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's see how we can use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto move a file. First, let's create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto hold the file:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir brand-new-folder\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere is how we move\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emv my-second-file.html brand-new-folder/my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we provided the name of the file that we want to move, which is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emy-second-file.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this case. Then, separated by a space, we provided the new name and location of the file:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrand-new-folder/my-second-file.html\u003c/code\u003e. By changing the name of the file from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emy-second-file.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrand-new-folder/my-second-file.html\u003c/code\u003e, we are actually moving the file into the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/p\u003e\r\n\u003cp\u003eSee for yourself! List the contents of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and see that\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis no longer there:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nbrand-new-folder    my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, navigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd brand-new-folder\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eList the contents of the folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmy-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd we can see that we have successfully used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to move\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3\u003eDelete files with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eWe can delete files using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. Let's see how it works. Here is how we delete\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003erm my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe basic structure of this command is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm file-to-delete\u003c/code\u003e, with a space between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the name of the file you'd like to delete. We can see with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat the file has been removed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that the folder is empty, let's delete it as well. Note that we can not delete a folder from inside of it, so first, navigate up one folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd ..\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen we can delete the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003erm -r brand-new-folder\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that this looks a little different from removing a file: we have an extra option in there,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-r\u003c/code\u003e. As a safety measure,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edoes not delete directories by default. In order to delete directories, we need to include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-r\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eafter the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e, which stands for \"recursive\".\u003c/p\u003e\r\n\u003cp\u003eIf we would like to delete a folder that contains files, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-rf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag instead:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm -rf folder-name\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eClear the terminal screen with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ clear\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eFinally, our terminal screen is getting pretty crowded with all of these commands! Sometimes it's nice to start with a blank screen. To clear the screen from previous commands, we use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ clear\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAfter the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ clear\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand has been issued, all that remains on the display screen is the command prompt. This does not actually clear any data, it simply gives us a blank screen to work with.\u003c/p\u003e\r\n\u003cp\u003eThere are a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eton\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof commands for the terminal, but knowing the commands covered in this lesson will make you pretty effective at using the command line. Being able to use the command line is one way to make yourself a powerful and efficient developer, so get in the habit early!\u003c/p\u003e\r\n\u003ch2\u003eCheat Sheet\u003c/h2\u003e\r\n\u003ch3\u003eCommands\u003c/h3\u003e\r\n\u003cp\u003eHere's a quick reference to all of the commands listed in this lesson. Feel free to reference this as you learn the commands - they'll be second nature before you know it.\u003c/p\u003e\r\n\u003ctable style=\"width: 672px; margin-left: auto; margin-right: auto;\" border=\"1\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003cstrong\u003eCommand\u003c/strong\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cstrong\u003eWhat it does \u003c/strong\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eLists out the contents of the current folder.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003ePrints the path of the current directory to the screen.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\n\u003ccode\u003e$ cd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eo\u003c/span\u003er\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd ~\u003c/code\u003e\n\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eChanges the current directory to the home directory.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ cd ..\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eChanges the current directory up one level.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ mkdir directory-name\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eCreates a new directory (folder) in the current directory with the name specified\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ touch file-name.html\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eCreates a new, empty file in the current directory with the name specified\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ cp original-file.html new-file.html\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eCreates a duplicate copy of the first file listed and gives it the name of the second file listed. Both files still exist.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ mv original-file-name.html new-file-name.html\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eMoves the contents of the first file into the second file. Effectively renames the file.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003ccode\u003e$ mv sample-file.html new-location/sample-file.html\u003c/code\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\u003cspan\u003eMoves the first file into the folder specified for the second file.\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003cspan\u003e\u003ccode\u003e$ rm file-name.html\u003c/code\u003e\u003c/span\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\n\u003cspan\u003eRemoves the file specified.\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003cspan\u003e\u003ccode\u003e$ rm -rf directory-name\u003c/code\u003e\u003c/span\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\n\u003cspan\u003eRemoves the folder specified and all of the files inside.\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd style=\"width: 202px;\"\u003e\u003cspan\u003e\u003ccode\u003e$ clear\u003c/code\u003e\u003c/span\u003e\u003c/td\u003e\r\n\u003ctd style=\"width: 458px;\"\u003e\n\u003cspan\u003eClears the terminal screen.\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e  \u003c/p\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003efile path\u003c/strong\u003e: The location of a file or folder in the file system. For example:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/MoringaSchool/Pictures/cute-kitten.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the path for the image called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecute-kitten.jpg\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003edirectory\u003c/strong\u003e: Another name for a folder in a file system. For example,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/MoringaSchool/Pictures/cute-kitten.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehas 3 directories:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringaSchool\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePictures\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003ehome directory\u003c/strong\u003e: The highest-level directory on a computer - this is the default directory when you open the terminal.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-styling-with-classes","title":"Wednesday: Styling with classes","type":"WikiPage","content":"\u003cp\u003eYesterday, we learned how to style elements of the page. Unfortunately, we had no way of targeting specific parts of the page. So if we wanted one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto be green, all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelements on the page would need to be green. In this lesson, we will learn some HTML code that allows us to label HTML elements so that we can style specific parts of the page any way we'd like.\u003c/p\u003e\r\n\u003cp\u003eLet's create a new page with some paragraphs about my favorite animal, the giraffe. These will be regular paragraphs with an introductory summary at the top of the page.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eGiraffes!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eGiraffes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's time to learn about the mysterious giraffe!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis is an introduction. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eAt first glance, giraffes are pretty magical creatures. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003eAbout the Author\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's some information about the author. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs a note here, the text used to fill these paragraphs is known as lorem ipsum. It looks like Latin, but the words are jumbled and don't really have any meaning. Lorem ipsum text is often used as a placeholder for text when doing website design; you can search online for \"lorem ipsum\" and find many varieties and websites where you can copy the text.\u003c/p\u003e\r\n\u003cp\u003eThis page is nice, but let's the introductory paragraph to look more like an introduction - I want the text to be italicized.\u003c/p\u003e\r\n\u003cp\u003eTo label the introductory paragraph, first we add a class to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e    \u0026lt;p \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"intro\"\u003c/span\u003e\u0026gt;This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e an introduction. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e eiusmod tempor incididunt ut labore et dolore magna aliqua.\u0026lt;/p\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can add a rule to our stylesheet that targets this paragraph by using a class selector. Here's what that looks like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.intro\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we refresh the page, we see that the paragraph with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintro\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis italicized. In the rule the HTML element with a class of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintro\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas targeted with the class selector\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintro\u003c/code\u003e. All class selectors begin with a period:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can also apply a class to multiple tags. Let's say we want our info about the author to be red. Let's add some classes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"author\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAbout the author\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"author\"\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's some information about the author. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd here's the CSS rule:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe class selector targets all elements of a particular class. It's possible, however, for multiple elements on a web page to share a specific styling, but for one of those elements to differ slightly.\u003c/p\u003e\r\n\u003cp\u003eFor example, I want both the header and the paragraph with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto be red, but I want the paragraph text to be a smaller font than the rest of the paragraphs on the page. But what happens when I do this?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-size\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e12px\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe paragraph text size is smaller, but so is the header. Instead, we can target the paragraph with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-size\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e12px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis code uses a new selector:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.author\u003c/code\u003e. What's the difference between the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.author\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.author\u003c/code\u003eselectors?\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.author\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector targets\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall elements\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.author\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector targets only\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003eelements with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e. This type of selector allows you to be even more specific with your styling.\u003c/p\u003e","frontPage":false},{"exportId":"friday-independent-project","title":"Friday: Independent Project","type":"WikiPage","content":"\u003ch1\u003eIndependent Project\u003c/h1\u003e\r\n\u003ch2\u003eAnita's Kitchen\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003cspan\u003e \u003c/span\u003e\u003c/strong\u003eCreate a website from a design.\u003c/p\u003e\r\n\u003ch3\u003eUser Story\u003c/h3\u003e\r\n\u003cp\u003eAnita has asked you create a landing page for her business and has handed you over the design of how the page should appear. Use your knowledge of HTML/CSS and Javascript to create the webpage following the instructions carefully. She has free lunch for the best student!!\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eGo to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/moringaschool/mpft-ip\" target=\"_blank\"\u003ethe Moringa Prep independent project repository on github\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eFollow the instructions in the readme section of the repository\u003c/li\u003e\r\n\u003cli\u003eComplete your work and push it to gh-pages\u003c/li\u003e\r\n\u003cli\u003eAdd the link to gh-pages inside your project's readme\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003cp\u003eYour project will be evaluated on the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate and consistent.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eProject works as expected.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of week’s concepts. If prompted, you are able to discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject submittion time. It is to be submitted by 6pm onFriday unless otherwise stated\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eSubmission of Independent Projects\u003c/h2\u003e\r\n\u003cp\u003eIndependent Projects must be submitted by\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e6pm on Friday.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(For Moringa prep part-time students, code review and deadlines will be discussed in class.)\u003c/p\u003e\r\n\u003cp\u003eComplete the following steps to submit your project:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eBefore you start working on your project,create a github repository for your project\u003c/li\u003e\r\n\u003cli\u003eFill this\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://submit-ip.moringaschool.com/\" target=\"_blank\"\u003eform.\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eStart working on your project\u003c/li\u003e\r\n\u003c/ol\u003e\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eBefore pushing your final code to Github,\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eat 5pm do a final check for each objective. Spend a few minutes checking indentation, removing commented-out code, creating a detailed README, etc. Your project should be polished and complete.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli\u003e\u003cstrong\u003ePush the final code to your GitHub repo by 6pm local time.\u003c/strong\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEven if you are not completely done working on your project, push anyways which will communicate to your TM how much you have completed\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-practice-box-model","title":"Wednesday: Practice: Box Model","type":"WikiPage","content":"\u003cp\u003eGoal: Implement the box model in our code to organize and layout the page content.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between margin and padding?\u003c/li\u003e\r\n\u003cli\u003eWhat are some benefits to using the box model?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson on the box model and understand how its various properties affect the layout of elements on the page. After you have gone through the lesson, here are some exercises for you to practice using margins, borders, and padding. Choose one project to start - you are not expected to complete all of the exercises, but to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunderstand\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe box model.\u003c/p\u003e\r\n\u003ch3\u003eBand Website\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor the sidebar to your band's webpage, add a border and a bit of padding and margin. Give the sidebar a background color, if you haven't already.\u003c/li\u003e\r\n\u003cli\u003eAdd some padding around the images on your band's webpage.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eResume\u003c/h3\u003e\r\n\u003cp\u003eUse the box model to further format sections of your resume. For example, give each section a border to separate different sections from each other.\u003c/p\u003e\r\n\u003ch3\u003ePhotography Portfolio\u003c/h3\u003e\r\n\u003cp\u003eUse the box model to lay out the presentation of your photography portfolio from the Floats exercise. Give each photo a border, and give each column a different background color.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-github-pages","title":"Tuesday: GitHub Pages","type":"WikiPage","content":"\u003cp\u003eWe've made some web pages that we can view on our personal computers. Now let's learn how we can host our sites online. There are a number of ways to do this, and GitHub offers an option that is free and one of the easiest out there. GitHub Pages lets us turn a GitHub repository into a website with a URL that we can access from any browser. Pretty neat!\u003c/p\u003e\r\n\u003cp\u003eIn this lesson, we will walk through the steps to get a website from an existing repository hosted. I am going to use\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the previous lesson on Creating a Web Page to demonstrate. Feel free to use your version of this project, or a different project that you would like to see online. The directions will be the same, and GitHub does not limit the number of sites that you can host online.\u003c/p\u003e\r\n\u003cp\u003eBefore we get started, let's go over a typical project structure for any website. In previous lessons, we put our images and CSS stylesheets in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolders. It's pretty common to organize files in this way.\u003c/p\u003e\r\n\u003cp\u003eSo far, we have been giving our pages descriptive file names, such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e. Another convention is to name the HTML file for the main page for a website\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e. This naming convention is common practice in the industry. Additionally, many hosting services, including GitHub Pages, require this convention to display content. Let's change the name of\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enow. GitHub won't know to display it as the main page if we don't.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ mv \u003cspan class=\"hljs-keyword\"\u003emy\u003c/span\u003e-first-website.html \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e.html\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSince we have been using Git to track our project, let’s commit the change. Be sure to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit-pair-commit\u003c/code\u003ecommand if you are working with a partner in class, and use your remote name instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add .\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Change name of favorite-things.html file to index.html.\"\u003c/span\u003e\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit push origin master\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne of the most important features when using Git or any other version control system is the ability to create a branch. We will go more into detail about what exactly a branch is and how it works in an upcoming lesson, but for now, you can think of it like an exact copy of the code at the point when the branch is created. Each branch exists independent of each other, so once you create a branch, any changes you make to one branch won’t affect the code in another branch. GitHub Pages looks for content to display online in a branch called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e. Let's create that branch now. Run these commands in the Terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch gh-pages\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to create a new branch called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e. Again, we will go more into detail about branching in an upcoming lesson. For now, what matters is that we have a branch called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e, and it is a copy of the code in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch. Next, we push the code to GitHub:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin gh-pages\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAgain, use your own remote name in place of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e. Notice that the last argument in this command is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e, which means that we are pushing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003cp\u003eOnce the project is pushed to GitHub, you will be able to view it online at\u003cspan\u003e \u003c/span\u003e\u003cem\u003egithub-username.github.io/repository-name\u003c/em\u003e. For example, if our GitHub username was\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-student\u003c/em\u003e, and our repository was named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e, we would navigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-student.github.io/hello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the browser.\u003c/p\u003e\r\n\u003cp\u003eOne last thing to note here. For now, if you want to continue making changes to a project, you should edit the code in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch, not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e. Then, when you want to update the live site on\u003cspan\u003e \u003c/span\u003e\u003cem\u003egithub.io\u003c/em\u003e, delete the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch and then create it again using the steps above.\u003c/p\u003e\r\n\u003cp\u003eTo delete a branch, first click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBranches\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the top of the repository's main page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-05-github_branch_tab.png\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThis will take you to a page where all of the repository's branches are listed. Delete a branch by clicking on the red trash can symbol in the branch's row on the right side of the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D2-06-github_branch_delete.png\"\u003e\u003c/p\u003e","frontPage":false}],"assignments":[{"exportId":"i310cba275dc3f4aa8a3306bbbe380979","title":"Assignment: Cookie Recipe","type":"Assignment","content":"\u003cp\u003eNow it's time to practice using Git clone and fixing indentation and spacing. There is a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/iantheninja/cookie-recipe/blob/master/cookie-recipe.html\"\u003ecookie repository\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon GitHub that contains an HTML file with terrible indentation, spacing and HTML tag placement. It really needs your help.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git clone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto clone the repository onto your desktop.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBe sure you have changed into your\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emoringa-school-projects\u003c/strong\u003e\u003cspan\u003e folder \u003c/span\u003eor the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDocuments\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edirectory before cloning the repository, so that \u003cstrong\u003e\u003cspan style=\"color: #ff0000;\"\u003eyou do not accidentally clone the cookie repository inside of an existing project folder\u003c/span\u003e\u003c/strong\u003e.\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eAsk a peer if you're not sure if you are cloning the repository into the correct place.\u003c/li\u003e\r\n\u003cli\u003eCreate a new remote repository on your own GitHub for this project and link it to your local project folder by creating a remote (using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand).\u003c/li\u003e\r\n\u003cli\u003eGo through the HTML file and fix every indentation error. Commit the changes. THEN..\u003c/li\u003e\r\n\u003cli\u003eGo through the HTML file and fix every spacing error. Commit the changes. THEN ...\u003c/li\u003e\r\n\u003cli\u003eGo through the HTML file and fix every tag placement error. Commit the changes.\u003c/li\u003e\r\n\u003cli\u003eHave a TM come by and check your file for any errors that you have missed.\u003c/li\u003e\r\n\u003cli\u003ePush your changes to the remote you created in your own GitHub account.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eToday (and always!), focus on making sure that\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof your code is properly indented and spaced and your HTML tags are properly placed around the content they contain.\u003c/p\u003e","submissionTypes":null,"graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i6b4f79c974dbc18ca84a97e25829bc5d","title":"Assignment: Practice the Command Line","type":"Assignment","content":"\u003ch1\u003ePractice: Command Line\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Start using the command line to interact with your computer. Learn some basic commands.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following question with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a GUI and the command line?\u003c/li\u003e\r\n\u003cli\u003eWhat are some advantages you can think of for using the command line?\u003c/li\u003e\r\n\u003cli\u003eName two commands and what they do.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to start interacting with your computer through the command line. Then, once you have experience using the command line and using basic commands, complete the following exercise in the terminal.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eIf you're not already there, navigate to the home directory.\u003c/li\u003e\r\n\u003cli\u003ePrint your location to the screen to make sure you're in the right spot.\u003c/li\u003e\r\n\u003cli\u003eList the contents of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory to the terminal.\u003c/li\u003e\r\n\u003cli\u003eNavigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDesktop\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003cli\u003eCreate a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003cli\u003eCreate a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eCreate two more files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile2.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile3.html\u003c/em\u003e. (Here's a tip: you can create two files with a single command! Simply separate the two file names with a space:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch file2.html file3.html\u003c/code\u003e)\u003c/li\u003e\r\n\u003cli\u003eCreate a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eMove\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eCopy\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile2.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand name the copy\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile4.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eRename\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile3.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethird-file.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate into\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDelete\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate up one directory so that you are back in\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003ePrint your location to verify that you are back in\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDelete\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eList the contents to the page to make sure that\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewas successfully deleted.\u003c/li\u003e\r\n\u003cli\u003eClear the terminal screen.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eStill want more practice? Check out the adventure game at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://web.mit.edu/mprat/Public/web/Terminus/Web/main.html\" target=\"_blank\"\u003ethis link\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethat uses the same terminal commands that we just learned to navigate through the levels.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ic60e745b5529d2c11126c7bd05139504","title":"Friday: Independent Project","type":"Assignment","content":"\u003ch1\u003eAnita's Kitchen\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003cspan\u003e \u003c/span\u003e\u003c/strong\u003eCreate a website from a design.\u003c/p\u003e\r\n\u003ch3\u003eUser Story\u003c/h3\u003e\r\n\u003cp\u003eAnita has asked you create a landing page for her business and has handed you over the design of how the page should appear. Use your knowledge of HTML/CSS and Javascript to create the webpage following the instructions carefully. She has free lunch for the best student!!\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eGo to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/moringaschool/mpft-ip\" target=\"_blank\"\u003ethe Moringa Prep independent project repository on Github\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eFollow the instructions in the readme section of the repository\u003c/li\u003e\r\n\u003cli\u003eComplete your work and push it to gh-pages\u003c/li\u003e\r\n\u003cli\u003eAdd the link to gh-pages inside your project's readme\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003cp\u003eYour project will be evaluated on the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate and consistent.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eProject works as expected.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of week’s concepts. If prompted, you are able to discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject submittion time. It is to be submitted by 6pm onFriday unless otherwise stated\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003e\n\u003cem\u003e\u003cem\u003eA project README that includes: \u003cstrong\u003eView example below\u003c/strong\u003e\u003c/em\u003e\u003c/em\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003e\u003ciframe style=\"width: 550px; height: 400px;\" title=\"GitHub gist\" src=\"https://www.edu-apps.org/tools/github/github_summary_gist.html#PurpleBooth/109311bb0361f32d87a2\" width=\"550\" height=\"400\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\"\u003e\u003c/iframe\u003e\u003c/em\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i1132a4c6f26441f01cff15ecaadc8d6f","title":"Friday: Independent Project - Ping Pong","type":"Assignment","content":"\u003ch3\u003ePing Pong\u003c/h3\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eCreate a web application that takes a number from a user and returns a range of numbers from 1 to the chosen number with the following exceptions:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eNumbers divisible by 3 are replaced with \"ping\"\u003c/li\u003e\r\n\u003cli\u003eNumbers divisible by 5 are replaced with \"pong\"\u003c/li\u003e\r\n\u003cli\u003eNumbers divisible by 15 are replaced with \"pingpong\"\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA user should be able to enter a new number and see new results over and over again.\u003c/p\u003e\r\n\u003cp\u003eBreak the program down into simple, individual behaviors with input/output examples. Begin with the simplest possible behavior. List these behaviors (also known as \"specs\" or \"specifications\") in the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003eExample Layout\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/hw7lgqaf3ng362u/ping-pong-layout-webshot.png?raw=1\" alt=\"Ping Pong Layout\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYour final application is not required to look like the example. Make it look better!\u003c/p\u003e\r\n\u003ch3\u003eExample Specifications Section in README\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/y3s9xmnmpl6yqfi/example-specs-in-readme.png\" alt=\"example-specs-in-readme-file\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis is only the first specification. Include similar specifications in your README for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehaviors your program demonstrates.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you finish meeting the objectives for this project, consider adding additional features, such as:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRecreate the example layout.\u003c/li\u003e\r\n\u003cli\u003eAdd images and other custom aesthetics.\u003c/li\u003e\r\n\u003cli\u003eImplement different behaviors/effects/images for different inputs.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eYour code will be reviewed for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eJavaScript business logic and user interface logic are separate.\u003c/li\u003e\r\n\u003cli\u003eVariable names are descriptive and use lower camel case (e.g. myVariableExample).\u003c/li\u003e\r\n\u003cli\u003eCode has proper indentation and spacing.\u003c/li\u003e\r\n\u003cli\u003eAll previous objectives have been met.\u003c/li\u003e\r\n\u003cli\u003eProject is broken down into \"plain English\" specs, listed in README.\u003c/li\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate and consistent.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eProject works as expected.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of week’s concepts. If prompted, you are able to discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject submittion time. It is to be submitted by 6pm onFriday unless otherwise stated\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eSubmission of Independent Projects\u003c/h2\u003e\r\n\u003cp\u003eIndependent Projects must be submitted by\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e6pm on Friday.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(For Moringa prep part-time students, code review and deadlines will be discussed in class.)\u003c/p\u003e\r\n\u003cp\u003eComplete the following steps to submit your project:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eBefore you start working on your project,create a github repository for your project\u003c/li\u003e\r\n\u003cli\u003eFill this\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://submit-ip.moringaschool.com/\" target=\"_blank\"\u003eform.\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eStart working on your project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eBefore pushing your final code to Github,\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eat 5pm do a final check for each objective. Spend a few minutes checking indentation, removing commented-out code, creating a detailed README, etc. Your project should be polished and complete.\u003c/li\u003e\r\n\u003cli\u003e\u003cstrong\u003ePush the final code to your GitHub repo by 6pm local time.\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEven if you are not completely done working on your project, push anyways which will communicate to your TM how much you have completed\u003c/li\u003e\r\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i3e972ae6b1ab43e61f968faf81ddabc2","title":"Friday: Independent Project - Portfolio Landing Page ","type":"Assignment","content":"\u003ch2\u003ePortfolio Landing Page\u003c/h2\u003e\r\n\u003cp\u003eCongratulations on beginning your journey toward becoming a developer! As a developer, you need a web portfolio to showcase your work. Today, you will be creating the landing page for your programming portfolio.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eRequirements\u003c/h3\u003e\r\n\u003cp\u003eHere are the requirements for your page:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eYour name\u003c/li\u003e\r\n\u003cli\u003eAn image of you or something that represents who you are\u003c/li\u003e\r\n\u003cli\u003eA list of projects you have created with active links to them (either on GitHub or GitHub pages)\r\n\u003cul\u003e\r\n\u003cli\u003eFor each, include a brief description of the project and what languages it uses\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAn \"About Me\" section including:\r\n\u003cul\u003e\r\n\u003cli\u003eYour background (for example, your education, job experience, a paragraph on why you decided to take a class on programming, etc.)\u003c/li\u003e\r\n\u003cli\u003eYour current interests/hobbies/skills\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eDeploy your site onto GitHub pages so that a live site can be viewed at\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour-username.github.io/portfolio\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(for example)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eObjectives\u003c/h3\u003e\r\n\u003cp\u003eIn addition to these requirements, your portfolio will be evaluated on the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSome of the most common HTML tags are incorporated, including:\r\n\u003cul\u003e\r\n\u003cli\u003ep, h, ul, ol, li, em, strong, a, img, div, span\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":17.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i4380361521db3e98b94c2b244835cb40","title":"Friday: IP review","type":"Assignment","content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i4646139234f48f6fcfbf104e6d462a71","title":"Roll Call Attendance","type":"Assignment","content":null,"submissionTypes":"an external tool","graded":true,"pointsPossible":100.0,"dueAt":null,"lockAt":null,"unlockAt":null}],"discussion_topics":[{"exportId":"iceabe33ee77ccc9edfd195c98ed31460","title":"Discussion: HTML Forms","type":"DiscussionTopic","content":"\u003ch2\u003eWarm Up\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWhy does variable scope matter?\u003c/li\u003e\n\u003cli\u003eWhat happens when you don't use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto declare a variable? Why is that bad?\u003c/li\u003e\n\u003cli\u003eThere are two alerts that display the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erabbitName\u003c/code\u003e, one when the function runs and one at the end of the code. What value do you expect at each alert? (Use JSFiddle to test your theories.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rabbitName = \u003cspan class=\"hljs-string\"\u003e\"Njoro\"\u003c/span\u003e;\n\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehoppity\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        alert(rabbitName);\n        rabbitName=\u003cspan class=\"hljs-string\"\u003e\"Fredi\"\u003c/span\u003e;\n      }\n\n      hoppity();\n      alert(rabbitName);\n    \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat values do you expect at these alerts?\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rabbitName = \u003cspan class=\"hljs-string\"\u003e\"Njoro\"\u003c/span\u003e;\n\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehoppity\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rabbitName = \u003cspan class=\"hljs-string\"\u003e\"Tanu\"\u003c/span\u003e\n        alert(rabbitName);\n        rabbitName=\u003cspan class=\"hljs-string\"\u003e\"Fredi\"\u003c/span\u003e;\n      }\n\n      hoppity();\n      alert(rabbitName);\n    \u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eWhy do you need\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen working with jQuery forms?\u003c/li\u003e\n\u003c/ul\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"icf39d29fd7924bb6b2ede5bfa34403f7","title":"Discussion: Indentation and Spacing","type":"DiscussionTopic","content":"\u003cp\u003e\u003cem\u003eDiscuss the following:\u003c/em\u003e\u003c/p\u003e\n\u003ch2\u003e\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eWhy is indentation and spacing important? What benefit is there to ensuring that it is consistent?\u003c/li\u003e\n\u003cli\u003eWhen do we indent?\u003c/li\u003e\n\u003cli\u003eHow many spaces should make up one indent?\u003c/li\u003e\n\u003cli\u003eIf we wanted to change the little icon that displays next to the page title, would that code go in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e?\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/MP-W1D1-11-favicon.png\"\u003e\n\u003c/li\u003e\n\u003cli\u003eWhat is an opening tag? What is a closing tag?\u003c/li\u003e\n\u003cli\u003eWhat does it mean when an element is nested within another? Can you give an example of when we would use nested elements?\u003c/li\u003e\n\u003cli\u003eWhat is the difference between a block element and an inline element?\u003c/li\u003e\n\u003cli\u003eWhat does it mean to provide a relative path?\u003c/li\u003e\n\u003cli\u003eWhat is an HTML attribute? Can you give some examples of ones that we have seen so far?\u003c/li\u003e\n\u003c/ol\u003e","lockAt":null,"unlockAt":null,"graded":false}],"quizzes":[],"files":[{"type":"file","name":"MP-W1D1-03-new_repo_screen-1.png","size":64377,"files":null},{"type":"file","name":"MP-W1D1-04-empty_repo.png","size":82750,"files":null},{"type":"file","name":"MP-W1D1-06-submodule.png","size":16141,"files":null},{"type":"file","name":"MP-W1D1-03-new_repo_screen.png","size":64377,"files":null},{"type":"file","name":"MP-W1D1-03-atom_hello_world.jpg","size":33850,"files":null},{"type":"file","name":"github-account-signup.png","size":162649,"files":null}]}